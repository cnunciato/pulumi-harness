{
    "name": "harness",
    "displayName": "Harness",
    "description": "A Pulumi package for creating and managing Harness  resources.",
    "keywords": [
        "pulumi",
        "harness",
        "lbrlabs"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`harness` Terraform Provider](https://github.com/harness/terraform-provider-harness).",
    "repository": "https://github.com/lbrlabs/pulumi-harness",
    "logoUrl": "https://raw.githubusercontent.com/lbrlabs/pulumi-harness/master/assets/logo.svg",
    "pluginDownloadURL": "github://api.github.com/lbrlabs",
    "publisher": "lbrlabs",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Lbrlabs.PulumiPackage"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/lbrlabs/pulumi-harness/sdk/go/harness"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Harness  resources.",
            "packageName": "@lbrlabs/pulumi-harness",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/harness/terraform-provider-harness)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-harness` repo](https://github.com/lbrlabs/pulumi-harness/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-harness` repo](https://github.com/harness/terraform-provider-harness/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "lbrlabs_pulumi_harness",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/harness/terraform-provider-harness)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-harness` repo](https://github.com/lbrlabs/pulumi-harness/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-harness` repo](https://github.com/harness/terraform-provider-harness/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "string",
                "description": "The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ACCOUNT_ID"
                    ]
                }
            },
            "apiKey": {
                "type": "string",
                "description": "The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable. For more information to\ncreate an API key in FirstGen, see https://docs.harness.io/article/smloyragsm-api-keys#create_an_api_key.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_API_KEY"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "description": "The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the\n`HARNESS_ENDPOINT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ENDPOINT"
                    ]
                }
            },
            "platformApiKey": {
                "type": "string",
                "description": "The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment\nvariable. For more information to create an API key in NextGen, see\nhttps://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_PLATFORM_API_KEY"
                    ]
                }
            }
        },
        "defaults": [
            "accountId",
            "endpoint"
        ]
    },
    "types": {
        "harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "This is an IAM role in the target deployment AWS account.\n"
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "harness:cloudprovider/AwsUsageScope:AwsUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/GcpUsageScope:GcpUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to inherit the GCP credentials from.\n"
                },
                "oidc": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthenticationOidc:KubernetesAuthenticationOidc",
                    "description": "Service account configuration for connecting to the Kubernetes cluster\n"
                },
                "serviceAccount": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthenticationServiceAccount:KubernetesAuthenticationServiceAccount",
                    "description": "Username and password for authentication to the cluster\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthenticationUsernamePassword:KubernetesAuthenticationUsernamePassword",
                    "description": "Username and password for authentication to the cluster\n"
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/KubernetesAuthenticationOidc:KubernetesAuthenticationOidc": {
            "properties": {
                "clientIdSecretName": {
                    "type": "string"
                },
                "clientSecretSecretName": {
                    "type": "string"
                },
                "identityProviderUrl": {
                    "type": "string"
                },
                "masterUrl": {
                    "type": "string"
                },
                "passwordSecretName": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientIdSecretName",
                "identityProviderUrl",
                "masterUrl",
                "passwordSecretName",
                "username"
            ]
        },
        "harness:cloudprovider/KubernetesAuthenticationServiceAccount:KubernetesAuthenticationServiceAccount": {
            "properties": {
                "caCertificateSecretName": {
                    "type": "string"
                },
                "masterUrl": {
                    "type": "string"
                },
                "serviceAccountTokenSecretName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "serviceAccountTokenSecretName"
            ]
        },
        "harness:cloudprovider/KubernetesAuthenticationUsernamePassword:KubernetesAuthenticationUsernamePassword": {
            "properties": {
                "masterUrl": {
                    "type": "string"
                },
                "passwordSecretName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameSecretName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "passwordSecretName"
            ]
        },
        "harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the service\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the service variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails": {
            "properties": {
                "authorEmailId": {
                    "type": "string",
                    "description": "The email id of the author\n"
                },
                "authorName": {
                    "type": "string",
                    "description": "The name of the author\n"
                },
                "message": {
                    "type": "string",
                    "description": "Commit message\n"
                }
            },
            "type": "object"
        },
        "harness:index/GitConnectorUsageScope:GitConnectorUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi": {
            "properties": {
                "amiDeploymentType": {
                    "type": "string",
                    "description": "The ami deployment type to use. Valid options are AWS_ASG, SPOTINST\n"
                },
                "asgIdentifiesWorkload": {
                    "type": "boolean",
                    "description": "Flag to indicate whether the autoscaling group identifies the workload.\n"
                },
                "autoscalingGroupName": {
                    "type": "string",
                    "description": "The name of the autoscaling group.\n"
                },
                "classicLoadbalancers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The classic load balancers to use.\n"
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "hostnameConvention": {
                    "type": "string",
                    "description": "The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n"
                },
                "spotinstCloudProviderName": {
                    "type": "string",
                    "description": "The name of the SpotInst cloud provider to connect with.\n"
                },
                "spotinstConfigJson": {
                    "type": "string",
                    "description": "The SpotInst configuration to use.\n"
                },
                "stageClassicLoadbalancers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The staging classic load balancers to use.\n"
                },
                "stageTargetGroupArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The staging classic load balancers to use.\n"
                },
                "targetGroupArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ARN's of the target groups.\n"
                },
                "useTrafficShift": {
                    "type": "boolean",
                    "description": "Flag to enable traffic shifting.\n"
                }
            },
            "type": "object",
            "required": [
                "amiDeploymentType",
                "cloudProviderName",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Flag to assign a public IP address.\n"
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the ECS cluster to use.\n"
                },
                "executionRole": {
                    "type": "string",
                    "description": "The ARN of the role to use for execution.\n"
                },
                "launchType": {
                    "type": "string",
                    "description": "The type of launch configuration to use. Valid options are FARGATE\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ids to apply to the ecs service.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ids to apply to the ecs service.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ids to use when selecting the instances.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "clusterName",
                "launchType",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "iamRole": {
                    "type": "string",
                    "description": "The IAM role to use.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ids to apply to the ecs service.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ids to apply to the ecs service.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ids to use when selecting the instances.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh": {
            "properties": {
                "autoscalingGroupName": {
                    "type": "string",
                    "description": "The name of the autoscaling group.\n"
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "desiredCapacity": {
                    "type": "integer",
                    "description": "The desired capacity of the auto scaling group.\n"
                },
                "hostConnectionAttrsName": {
                    "type": "string",
                    "description": "The name of the host connection attributes to use.\n"
                },
                "hostConnectionType": {
                    "type": "string",
                    "description": "The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP\n"
                },
                "hostnameConvention": {
                    "type": "string",
                    "description": "The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}\n"
                },
                "loadbalancerName": {
                    "type": "string",
                    "description": "The name of the load balancer to use.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSshTag:InfrastructureDefinitionAwsSshTag"
                    },
                    "description": "The tags to use when selecting the instances.\n"
                },
                "vpcIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The VPC ids to use when selecting the instances.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "hostConnectionType",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsSshTag:InfrastructureDefinitionAwsSshTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm": {
            "properties": {
                "autoscalingGroupName": {
                    "type": "string",
                    "description": "The name of the autoscaling group.\n"
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "desiredCapacity": {
                    "type": "integer",
                    "description": "The desired capacity of the autoscaling group.\n"
                },
                "hostConnectionAttrsName": {
                    "type": "string",
                    "description": "The name of the host connection attributes to use.\n"
                },
                "hostConnectionType": {
                    "type": "string",
                    "description": "The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP\n"
                },
                "hostnameConvention": {
                    "type": "string",
                    "description": "The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}\n"
                },
                "loadbalancerName": {
                    "type": "string",
                    "description": "The name of the load balancer to use.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n"
                }
            },
            "type": "object",
            "required": [
                "autoscalingGroupName",
                "cloudProviderName",
                "hostConnectionAttrsName",
                "hostConnectionType",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "The type of authentication to use. Valid options are SSH*PUBLIC*KEY.\n"
                },
                "baseName": {
                    "type": "string",
                    "description": "Base name.\n"
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of deployment. Valid options are NATIVE_VMSS\n"
                },
                "hostConnectionAttrsName": {
                    "type": "string",
                    "description": "The name of the host connection attributes to use.\n"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "The name of the resource group.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The unique id of the azure subscription.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to connect with.\n"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "baseName",
                "cloudProviderName",
                "deploymentType",
                "resourceGroupName",
                "subscriptionId",
                "username"
            ]
        },
        "harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The name of the resource group.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The unique id of the azure subscription.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "resourceGroup",
                "subscriptionId"
            ]
        },
        "harness:index/InfrastructureDefinitionCustom:InfrastructureDefinitionCustom": {
            "properties": {
                "deploymentTypeTemplateVersion": {
                    "type": "string",
                    "description": "The template version\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionCustomVariable:InfrastructureDefinitionCustomVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentTypeTemplateVersion"
            ]
        },
        "harness:index/InfrastructureDefinitionCustomVariable:InfrastructureDefinitionCustomVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the infrastructure definition\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "hostConnectionAttributesName": {
                    "type": "string",
                    "description": "The name of the SSH connection attributes to use.\n"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of hosts to deploy to.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "hostConnectionAttributesName",
                "hostnames"
            ]
        },
        "harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of hosts to deploy to.\n"
                },
                "winrmConnectionAttributesName": {
                    "type": "string",
                    "description": "The name of the WinRM connection attributes to use.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "hostnames",
                "winrmConnectionAttributesName"
            ]
        },
        "harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace in Kubernetes to deploy to.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "The naming convention of the release. When using Helm Native the default is ${infra.kubernetes.infraId}. For standard Kubernetes manifests the default is release-${infra.kubernetes.infraId}\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "namespace",
                "releaseName"
            ]
        },
        "harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster being deployed to.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace in Kubernetes to deploy to.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "The naming convention of the release.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "clusterName",
                "namespace",
                "releaseName"
            ]
        },
        "harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The PCF organization to use.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The PCF space to deploy to.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "organization",
                "space"
            ]
        },
        "harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Port to use for Kerberos authentication\n",
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "string",
                    "description": "Name of the principal for authentication\n",
                    "willReplaceOnChanges": true
                },
                "realm": {
                    "type": "string",
                    "description": "Realm associated with the Kerberos authentication\n",
                    "willReplaceOnChanges": true
                },
                "tgtGenerationMethod": {
                    "$ref": "#/types/harness:index/SshCredentialKerberosAuthenticationTgtGenerationMethod:SshCredentialKerberosAuthenticationTgtGenerationMethod",
                    "description": "TGT generation method\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "port",
                "principal",
                "realm"
            ]
        },
        "harness:index/SshCredentialKerberosAuthenticationTgtGenerationMethod:SshCredentialKerberosAuthenticationTgtGenerationMethod": {
            "properties": {
                "kerberosPasswordId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "keyTabFilePath": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication": {
            "properties": {
                "inlineSsh": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthenticationInlineSsh:SshCredentialSshAuthenticationInlineSsh",
                    "description": "Inline SSH authentication configuration. Only ond of `passphrase_secret_id` or `ssh_key_file_id` should be used\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to\n"
                },
                "serverPassword": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthenticationServerPassword:SshCredentialSshAuthenticationServerPassword",
                    "description": "Server password authentication configuration\n",
                    "willReplaceOnChanges": true
                },
                "sshKeyFile": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthenticationSshKeyFile:SshCredentialSshAuthenticationSshKeyFile",
                    "description": "Use ssh key file for authentication\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The username to use when connecting to ssh\n"
                }
            },
            "type": "object",
            "required": [
                "port",
                "username"
            ]
        },
        "harness:index/SshCredentialSshAuthenticationInlineSsh:SshCredentialSshAuthenticationInlineSsh": {
            "properties": {
                "passphraseSecretId": {
                    "type": "string"
                },
                "sshKeyFileId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKeyFileId"
            ]
        },
        "harness:index/SshCredentialSshAuthenticationServerPassword:SshCredentialSshAuthenticationServerPassword": {
            "properties": {
                "passwordSecretId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordSecretId"
            ]
        },
        "harness:index/SshCredentialSshAuthenticationSshKeyFile:SshCredentialSshAuthenticationSshKeyFile": {
            "properties": {
                "passphraseSecretId": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "harness:index/SshCredentialUsageScope:SshCredentialUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupLdapSettings:UserGroupLdapSettings": {
            "properties": {
                "groupDn": {
                    "type": "string",
                    "description": "The group DN of the LDAP user group.\n"
                },
                "groupName": {
                    "type": "string",
                    "description": "The group name of the LDAP user group.\n"
                },
                "ssoProviderId": {
                    "type": "string",
                    "description": "The ID of the SSO provider.\n"
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings": {
            "properties": {
                "groupEmailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The email addresses of the user group.\n"
                },
                "microsoftTeamsWebhookUrl": {
                    "type": "string",
                    "description": "The Microsoft Teams webhook URL of the user group.\n"
                },
                "sendMailToNewMembers": {
                    "type": "boolean",
                    "description": "Indicates whether an email is sent when a new user is added to the group.\n"
                },
                "sendNotificationsToMembers": {
                    "type": "boolean",
                    "description": "Enable this setting to have notifications sent to the members of this group.\n"
                },
                "slackChannel": {
                    "type": "string",
                    "description": "The Slack channel to send notifications to.\n"
                },
                "slackWebhookUrl": {
                    "type": "string",
                    "description": "The Slack webhook URL to send notifications to.\n"
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupPermissions:UserGroupPermissions": {
            "properties": {
                "accountPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                },
                "appPermissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                    "description": "Application specific permissions\n"
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions": {
            "properties": {
                "alls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsAll:UserGroupPermissionsAppPermissionsAll"
                    },
                    "description": "The permission to perform actions against all resources.\n"
                },
                "deployments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsDeployment:UserGroupPermissionsAppPermissionsDeployment"
                    },
                    "description": "Permission configuration to perform actions against deployments.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsEnvironment:UserGroupPermissionsAppPermissionsEnvironment"
                    },
                    "description": "Permission configuration to perform actions against workflows.\n"
                },
                "pipelines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsPipeline:UserGroupPermissionsAppPermissionsPipeline"
                    },
                    "description": "Permission configuration to perform actions against pipelines.\n"
                },
                "provisioners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsProvisioner:UserGroupPermissionsAppPermissionsProvisioner"
                    },
                    "description": "Permission configuration to perform actions against provisioners.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsService:UserGroupPermissionsAppPermissionsService"
                    },
                    "description": "Permission configuration to perform actions against services.\n"
                },
                "templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsTemplate:UserGroupPermissionsAppPermissionsTemplate"
                    },
                    "description": "Permission configuration to perform actions against templates.\n"
                },
                "workflows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsWorkflow:UserGroupPermissionsAppPermissionsWorkflow"
                    },
                    "description": "Permission configuration to perform actions against workflows.\n"
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupPermissionsAppPermissionsAll:UserGroupPermissionsAppPermissionsAll": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsDeployment:UserGroupPermissionsAppPermissionsDeployment": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "envIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsEnvironment:UserGroupPermissionsAppPermissionsEnvironment": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "envIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsPipeline:UserGroupPermissionsAppPermissionsPipeline": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "envIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsProvisioner:UserGroupPermissionsAppPermissionsProvisioner": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "provisionerIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsService:UserGroupPermissionsAppPermissionsService": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsTemplate:UserGroupPermissionsAppPermissionsTemplate": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "templateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsWorkflow:UserGroupPermissionsAppPermissionsWorkflow": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupSamlSettings:UserGroupSamlSettings": {
            "properties": {
                "groupName": {
                    "type": "string",
                    "description": "The group name of the SAML user group.\n"
                },
                "ssoProviderId": {
                    "type": "string",
                    "description": "The ID of the SSO provider.\n"
                }
            },
            "type": "object"
        },
        "harness:index/getEncryptedTextUsageScope:getEncryptedTextUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/getEnvironmentVariableOverride:getEnvironmentVariableOverride": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the service\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the service variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "serviceName",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:index/getGitConnectorCommitDetail:getGitConnectorCommitDetail": {
            "properties": {
                "authorEmailId": {
                    "type": "string"
                },
                "authorName": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authorEmailId",
                "authorName",
                "message"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:index/getSecretManagerUsageScope:getSecretManagerUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/getSshCredentialUsageScope:getSshCredentialUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/getTriggerCondition:getTriggerCondition": {
            "properties": {
                "onWebhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/getTriggerConditionOnWebhook:getTriggerConditionOnWebhook"
                    }
                },
                "triggerConditionType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "onWebhooks",
                "triggerConditionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:index/getTriggerConditionOnWebhook:getTriggerConditionOnWebhook": {
            "properties": {
                "webhookDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/getTriggerConditionOnWebhookWebhookDetail:getTriggerConditionOnWebhookWebhookDetail"
                    }
                }
            },
            "type": "object",
            "required": [
                "webhookDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:index/getTriggerConditionOnWebhookWebhookDetail:getTriggerConditionOnWebhookWebhookDetail": {
            "properties": {
                "header": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "webhookToken": {
                    "type": "string"
                },
                "webhookUrl": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "header",
                "method",
                "payload",
                "webhookToken",
                "webhookUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id used for connecting to App Dynamics.\n"
                },
                "clientSecretRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the App Dynamics client secret. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecretRef"
            ]
        },
        "harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username"
            ]
        },
        "harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "The external id of the role to use for cross-account access. This is a random unique value to provide additional secure authentication.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the role to use for cross-account access.\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "roleArn"
            ]
        },
        "harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target AWS account.\n"
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/AwsConnectorIrsa:AwsConnectorIrsa": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/AwsConnectorManual:AwsConnectorManual": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS access key.\n"
                },
                "accessKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the aws access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only use delegates with these tags.\n"
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the aws secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "secretKeyRef"
            ]
        },
        "harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials": {
            "properties": {
                "assumeRole": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentialsAssumeRole:AwsKmsConnectorCredentialsAssumeRole",
                    "description": "Connect using STS assume role.\n"
                },
                "inheritFromDelegate": {
                    "type": "boolean",
                    "description": "Inherit the credentials from from the delegate.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentialsManual:AwsKmsConnectorCredentialsManual",
                    "description": "Specify the AWS key and secret used for authenticating.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AwsKmsConnectorCredentialsAssumeRole:AwsKmsConnectorCredentialsAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "externalId": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "roleArn"
            ]
        },
        "harness:platform/AwsKmsConnectorCredentialsManual:AwsKmsConnectorCredentialsManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string"
                },
                "secretKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ]
        },
        "harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials": {
            "properties": {
                "assumeRole": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentialsAssumeRole:AwsSecretManagerConnectorCredentialsAssumeRole",
                    "description": "Connect using STS assume role.\n"
                },
                "inheritFromDelegate": {
                    "type": "boolean",
                    "description": "Inherit the credentials from from the delegate.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentialsManual:AwsSecretManagerConnectorCredentialsManual",
                    "description": "Specify the AWS key and secret used for authenticating.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AwsSecretManagerConnectorCredentialsAssumeRole:AwsSecretManagerConnectorCredentialsAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "externalId": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "roleArn"
            ]
        },
        "harness:platform/AwsSecretManagerConnectorCredentialsManual:AwsSecretManagerConnectorCredentialsManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string"
                },
                "secretKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ]
        },
        "harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the BitBucket api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for connecting to the api.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the username. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentialsHttp:BitbucketConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentialsSsh:BitbucketConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/BitbucketConnectorCredentialsHttp:BitbucketConnectorCredentialsHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/BitbucketConnectorCredentialsSsh:BitbucketConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/CcmFiltersFilterProperties:CcmFiltersFilterProperties": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Type of CCM filters.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType"
            ]
        },
        "harness:platform/ConnectorAzureCloudCostBillingExportSpec:ConnectorAzureCloudCostBillingExportSpec": {
            "properties": {
                "containerName": {
                    "type": "string",
                    "description": "Name of the container.\n"
                },
                "directoryName": {
                    "type": "string",
                    "description": "Name of the directory.\n"
                },
                "reportName": {
                    "type": "string",
                    "description": "Name of the report.\n"
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Name of the storage account.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subsription Id.\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "directoryName",
                "reportName",
                "storageAccountName",
                "subscriptionId"
            ]
        },
        "harness:platform/ConnectorAzureCloudProviderCredentials:ConnectorAzureCloudProviderCredentials": {
            "properties": {
                "azureInheritFromDelegateDetails": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetails:ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetails",
                    "description": "Authenticate to Azure Cloud Provider using details inheriting from delegate.\n"
                },
                "azureManualDetails": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudProviderCredentialsAzureManualDetails:ConnectorAzureCloudProviderCredentialsAzureManualDetails",
                    "description": "Authenticate to Azure Cloud Provider using manual details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type can either be InheritFromDelegate or ManualConfig.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "harness:platform/ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetails:ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetails": {
            "properties": {
                "auth": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuth:ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuth"
                }
            },
            "type": "object"
        },
        "harness:platform/ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuth:ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuth": {
            "properties": {
                "azureMsiAuthUa": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUa:ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUa"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "harness:platform/ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUa:ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUa": {
            "properties": {
                "clientId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/ConnectorAzureCloudProviderCredentialsAzureManualDetails:ConnectorAzureCloudProviderCredentialsAzureManualDetails": {
            "properties": {
                "applicationId": {
                    "type": "string"
                },
                "auth": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuth:ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuth"
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuth:ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuth": {
            "properties": {
                "azureClientKeyCert": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientKeyCert:ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientKeyCert"
                },
                "azureClientSecretKey": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientSecretKey:ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientSecretKey"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientKeyCert:ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientKeyCert": {
            "properties": {
                "certificateRef": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientSecretKey:ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientSecretKey": {
            "properties": {
                "secretRef": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/ConnectorGcpCloudCostBillingExportSpec:ConnectorGcpCloudCostBillingExportSpec": {
            "properties": {
                "dataSetId": {
                    "type": "string",
                    "description": "Data Set Id.\n"
                },
                "tableId": {
                    "type": "string",
                    "description": "Table Id.\n"
                }
            },
            "type": "object",
            "required": [
                "dataSetId",
                "tableId"
            ]
        },
        "harness:platform/ConnectorJenkinsAuth:ConnectorJenkinsAuth": {
            "properties": {
                "jenkinsBearerToken": {
                    "$ref": "#/types/harness:platform/ConnectorJenkinsAuthJenkinsBearerToken:ConnectorJenkinsAuthJenkinsBearerToken",
                    "description": "Authenticate to App Dynamics using bearer token.\n"
                },
                "jenkinsUserNamePassword": {
                    "$ref": "#/types/harness:platform/ConnectorJenkinsAuthJenkinsUserNamePassword:ConnectorJenkinsAuthJenkinsUserNamePassword",
                    "description": "Authenticate to App Dynamics using user name and password.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be one of UsernamePassword, Anonymous, Bearer Token(HTTP Header)\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "harness:platform/ConnectorJenkinsAuthJenkinsBearerToken:ConnectorJenkinsAuthJenkinsBearerToken": {
            "properties": {
                "tokenRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/ConnectorJenkinsAuthJenkinsUserNamePassword:ConnectorJenkinsAuthJenkinsUserNamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/ConnectorOciHelmCredentials:ConnectorOciHelmCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/ConnectorServiceNowAuth:ConnectorServiceNowAuth": {
            "properties": {
                "adfs": {
                    "$ref": "#/types/harness:platform/ConnectorServiceNowAuthAdfs:ConnectorServiceNowAuthAdfs",
                    "description": "Authenticate using adfs client credentials with certificate.\n"
                },
                "authType": {
                    "type": "string",
                    "description": "Authentication types for Jira connector\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/ConnectorServiceNowAuthUsernamePassword:ConnectorServiceNowAuthUsernamePassword",
                    "description": "Authenticate using username password.\n"
                }
            },
            "type": "object",
            "required": [
                "authType"
            ]
        },
        "harness:platform/ConnectorServiceNowAuthAdfs:ConnectorServiceNowAuthAdfs": {
            "properties": {
                "adfsUrl": {
                    "type": "string"
                },
                "certificateRef": {
                    "type": "string"
                },
                "clientIdRef": {
                    "type": "string"
                },
                "privateKeyRef": {
                    "type": "string"
                },
                "resourceIdRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "adfsUrl",
                "certificateRef",
                "clientIdRef",
                "privateKeyRef",
                "resourceIdRef"
            ]
        },
        "harness:platform/ConnectorServiceNowAuthUsernamePassword:ConnectorServiceNowAuthUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/ConnectorSpotPermanentToken:ConnectorSpotPermanentToken": {
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only using delegates with these tags.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "spotAccountId": {
                    "type": "string",
                    "description": "Spot account id.\n"
                },
                "spotAccountIdRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "apiTokenRef"
            ]
        },
        "harness:platform/ConnectorTasCredentials:ConnectorTasCredentials": {
            "properties": {
                "tasManualDetails": {
                    "$ref": "#/types/harness:platform/ConnectorTasCredentialsTasManualDetails:ConnectorTasCredentialsTasManualDetails",
                    "description": "Authenticate to Tas using manual details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type can be ManualConfig.\n"
                }
            },
            "type": "object",
            "required": [
                "tasManualDetails",
                "type"
            ]
        },
        "harness:platform/ConnectorTasCredentialsTasManualDetails:ConnectorTasCredentialsTasManualDetails": {
            "properties": {
                "endpointUrl": {
                    "type": "string"
                },
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endpointUrl",
                "passwordRef"
            ]
        },
        "harness:platform/ConnectorTerraformCloudCredentials:ConnectorTerraformCloudCredentials": {
            "properties": {
                "apiToken": {
                    "$ref": "#/types/harness:platform/ConnectorTerraformCloudCredentialsApiToken:ConnectorTerraformCloudCredentialsApiToken",
                    "description": "API token credentials to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken"
            ]
        },
        "harness:platform/ConnectorTerraformCloudCredentialsApiToken:ConnectorTerraformCloudCredentialsApiToken": {
            "properties": {
                "apiTokenRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenRef"
            ]
        },
        "harness:platform/DockerConnectorCredentials:DockerConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the password to use for the docker registry. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for the docker registry.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the username to use for the docker registry. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/EnvironmentClustersMappingCluster:EnvironmentClustersMappingCluster": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "account Identifier of the account\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the cluster\n"
                },
                "scope": {
                    "type": "string",
                    "description": "scope at which the cluster exists in harness gitops, project vs org vs account\n"
                }
            },
            "type": "object"
        },
        "harness:platform/FeatureFlagGitDetails:FeatureFlagGitDetails": {
            "properties": {
                "commitMsg": {
                    "type": "string",
                    "description": "The commit message to use as part of a gitsync operation\n"
                }
            },
            "type": "object",
            "required": [
                "commitMsg"
            ]
        },
        "harness:platform/FeatureFlagVariation:FeatureFlagVariation": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the variation\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the variation\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user friendly name of the variation\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variation\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "identifier",
                "name",
                "value"
            ]
        },
        "harness:platform/FiltersFilterProperties:FiltersFilterProperties": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Corresponding Entity of the filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType"
            ]
        },
        "harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/GcpConnectorManual:GcpConnectorManual": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to connect with.\n"
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors",
                "secretKeyRef"
            ]
        },
        "harness:platform/GitConnectorCredentials:GitConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentialsHttp:GitConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentialsSsh:GitConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitConnectorCredentialsHttp:GitConnectorCredentialsHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/GitConnectorCredentialsSsh:GitConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/GitOpsAgentMetadata:GitOpsAgentMetadata": {
            "properties": {
                "highAvailability": {
                    "type": "boolean",
                    "description": "Indicates if the deployment should be deployed using the deploy-ha.yaml\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The k8s namespace that this agent resides in.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterQuery:GitOpsClusterQuery": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterQueryId:GitOpsClusterQueryId"
                    },
                    "description": "Cluster server URL or the cluster name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps cluster.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server of the GitOps cluster.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterQueryId:GitOpsClusterQueryId": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequest:GitOpsClusterRequest": {
            "properties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestCluster:GitOpsClusterRequestCluster"
                    },
                    "description": "GitOps cluster details.\n"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestId:GitOpsClusterRequestId"
                    },
                    "description": "Cluster server URL or the cluster name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the clusters\n"
                },
                "updateMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestUpdateMask:GitOpsClusterRequestUpdateMask"
                    },
                    "description": "Update mask of the GitOps cluster.\n"
                },
                "updatedFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fields which are updated.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps cluster should be updated if existing and inserted if not.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "updatedFields"
                    ]
                }
            }
        },
        "harness:platform/GitOpsClusterRequestCluster:GitOpsClusterRequestCluster": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "clusterResources": {
                    "type": "boolean"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterConfig:GitOpsClusterRequestClusterConfig"
                    }
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterInfo:GitOpsClusterRequestClusterInfo"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "project": {
                    "type": "string"
                },
                "refreshRequestedAts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterRefreshRequestedAt:GitOpsClusterRequestClusterRefreshRequestedAt"
                    }
                },
                "server": {
                    "type": "string"
                },
                "shard": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "configs",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configs",
                        "infos",
                        "namespaces",
                        "project",
                        "server"
                    ]
                }
            }
        },
        "harness:platform/GitOpsClusterRequestClusterConfig:GitOpsClusterRequestClusterConfig": {
            "properties": {
                "awsAuthConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterConfigAwsAuthConfig:GitOpsClusterRequestClusterConfigAwsAuthConfig"
                    }
                },
                "bearerToken": {
                    "type": "string"
                },
                "clusterConnectionType": {
                    "type": "string"
                },
                "execProviderConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterConfigExecProviderConfig:GitOpsClusterRequestClusterConfigExecProviderConfig"
                    }
                },
                "password": {
                    "type": "string"
                },
                "tlsClientConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterConfigTlsClientConfig:GitOpsClusterRequestClusterConfigTlsClientConfig"
                    }
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestClusterConfigAwsAuthConfig:GitOpsClusterRequestClusterConfigAwsAuthConfig": {
            "properties": {
                "clusterName": {
                    "type": "string"
                },
                "roleARN": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestClusterConfigExecProviderConfig:GitOpsClusterRequestClusterConfigExecProviderConfig": {
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "installHint": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "args"
                    ]
                }
            }
        },
        "harness:platform/GitOpsClusterRequestClusterConfigTlsClientConfig:GitOpsClusterRequestClusterConfigTlsClientConfig": {
            "properties": {
                "caData": {
                    "type": "string"
                },
                "certData": {
                    "type": "string"
                },
                "insecure": {
                    "type": "boolean"
                },
                "keyData": {
                    "type": "string"
                },
                "serverName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestClusterInfo:GitOpsClusterRequestClusterInfo": {
            "properties": {
                "apiVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "applicationsCount": {
                    "type": "string"
                },
                "cacheInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterInfoCacheInfo:GitOpsClusterRequestClusterInfoCacheInfo"
                    }
                },
                "connectionStates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterInfoConnectionState:GitOpsClusterRequestClusterInfoConnectionState"
                    }
                },
                "serverVersion": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiVersions",
                        "cacheInfos",
                        "connectionStates",
                        "serverVersion"
                    ]
                }
            }
        },
        "harness:platform/GitOpsClusterRequestClusterInfoCacheInfo:GitOpsClusterRequestClusterInfoCacheInfo": {
            "properties": {
                "apisCount": {
                    "type": "string"
                },
                "lastCacheSyncTime": {
                    "type": "string"
                },
                "resourcesCount": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestClusterInfoConnectionState:GitOpsClusterRequestClusterInfoConnectionState": {
            "properties": {
                "attemptedAts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterInfoConnectionStateAttemptedAt:GitOpsClusterRequestClusterInfoConnectionStateAttemptedAt"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "attemptedAts",
                        "message",
                        "status"
                    ]
                }
            }
        },
        "harness:platform/GitOpsClusterRequestClusterInfoConnectionStateAttemptedAt:GitOpsClusterRequestClusterInfoConnectionStateAttemptedAt": {
            "properties": {
                "nanos": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestClusterRefreshRequestedAt:GitOpsClusterRequestClusterRefreshRequestedAt": {
            "properties": {
                "nanos": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestId:GitOpsClusterRequestId": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestUpdateMask:GitOpsClusterRequestUpdateMask": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsRepositoryRepo:GitOpsRepositoryRepo": {
            "properties": {
                "connectionType": {
                    "type": "string",
                    "description": "Identifies the authentication method used to connect to the repository.\n"
                },
                "enableLfs": {
                    "type": "boolean",
                    "description": "Indicates if git-lfs support must be enabled for this repo. This is valid only for Git repositories.\n"
                },
                "enableOci": {
                    "type": "boolean",
                    "description": "Indicates if helm-oci support must be enabled for this repo.\n"
                },
                "githubAppEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "Base URL of GitHub Enterprise installation. If left empty, this defaults to https://api.github.com.\n"
                },
                "githubAppId": {
                    "type": "string",
                    "description": "Id of the GitHub app used to access the repo.\n"
                },
                "githubAppInstallationId": {
                    "type": "string",
                    "description": "Installation id of the GitHub app used to access the repo.\n"
                },
                "githubAppPrivateKey": {
                    "type": "string",
                    "description": "GitHub app private key PEM data.\n"
                },
                "inheritedCreds": {
                    "type": "boolean",
                    "description": "Indicates if the credentials were inherited from a credential set.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Indicates if the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.\n"
                },
                "insecureIgnoreHostKey": {
                    "type": "boolean",
                    "description": "Indicates if InsecureIgnoreHostKey should be used. Insecure is favored used only for git repos.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name to be used for this repo. Only used with Helm repos.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password or PAT used for authenticating at the remote repository.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "The HTTP/HTTPS proxy used to access the repo.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "URL to the remote repository.\n"
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "PEM data for authenticating at the repo server. Only used with Git repos.\n"
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "Certificate in PEM format for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "Private key in PEM format for authenticating at the repo server.\n"
                },
                "type_": {
                    "type": "string",
                    "description": "Type specifies the type of the repo. Can be either \"git\" or \"helm. \"git\" is assumed if empty or absent.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username used for authenticating at the remote repository.\n"
                }
            },
            "type": "object",
            "required": [
                "connectionType",
                "repo"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "connectionType",
                        "project",
                        "repo",
                        "type_"
                    ]
                }
            }
        },
        "harness:platform/GitOpsRepositoryUpdateMask:GitOpsRepositoryUpdateMask": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of field mask paths.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication": {
            "properties": {
                "githubApp": {
                    "$ref": "#/types/harness:platform/GithubConnectorApiAuthenticationGithubApp:GithubConnectorApiAuthenticationGithubApp",
                    "description": "Configuration for using the github app for interacting with the github api.\n"
                },
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the github api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GithubConnectorApiAuthenticationGithubApp:GithubConnectorApiAuthenticationGithubApp": {
            "properties": {
                "applicationId": {
                    "type": "string"
                },
                "applicationIdRef": {
                    "type": "string"
                },
                "installationId": {
                    "type": "string"
                },
                "installationIdRef": {
                    "type": "string"
                },
                "privateKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "privateKeyRef"
            ]
        },
        "harness:platform/GithubConnectorCredentials:GithubConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentialsHttp:GithubConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentialsSsh:GithubConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GithubConnectorCredentialsHttp:GithubConnectorCredentialsHttp": {
            "properties": {
                "tokenRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/GithubConnectorCredentialsSsh:GithubConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the gitlab api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentialsHttp:GitlabConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentialsSsh:GitlabConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitlabConnectorCredentialsHttp:GitlabConnectorCredentialsHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "tokenRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitlabConnectorCredentialsSsh:GitlabConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/GitopsApplicationsApplication:GitopsApplicationsApplication": {
            "properties": {
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationMetadata:GitopsApplicationsApplicationMetadata"
                    },
                    "description": "Metadata corresponding to the resources. This includes all the objects a user must create.\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpec:GitopsApplicationsApplicationSpec"
                    },
                    "description": "Specifications of the GitOps application. This includes the repository URL, application definition, source, destination and sync policy.\n"
                }
            },
            "type": "object",
            "required": [
                "metadatas"
            ]
        },
        "harness:platform/GitopsApplicationsApplicationMetadata:GitopsApplicationsApplicationMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "clusterName": {
                    "type": "string"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generateName": {
                    "type": "string"
                },
                "generation": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "namespace": {
                    "type": "string"
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationMetadataOwnerReference:GitopsApplicationsApplicationMetadataOwnerReference"
                    }
                },
                "uid": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "finalizers",
                        "generation",
                        "labels",
                        "namespace",
                        "uid"
                    ]
                }
            }
        },
        "harness:platform/GitopsApplicationsApplicationMetadataOwnerReference:GitopsApplicationsApplicationMetadataOwnerReference": {
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "type": "boolean"
                },
                "controller": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the GitOps application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "uid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpec:GitopsApplicationsApplicationSpec": {
            "properties": {
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecDestination:GitopsApplicationsApplicationSpecDestination"
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSource:GitopsApplicationsApplicationSpecSource"
                    }
                },
                "syncPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSyncPolicy:GitopsApplicationsApplicationSpecSyncPolicy"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecDestination:GitopsApplicationsApplicationSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "namespace": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSource:GitopsApplicationsApplicationSpecSource": {
            "properties": {
                "chart": {
                    "type": "string"
                },
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourceDirectory:GitopsApplicationsApplicationSpecSourceDirectory"
                    }
                },
                "helms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourceHelm:GitopsApplicationsApplicationSpecSourceHelm"
                    }
                },
                "ksonnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourceKsonnet:GitopsApplicationsApplicationSpecSourceKsonnet"
                    }
                },
                "kustomizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourceKustomize:GitopsApplicationsApplicationSpecSourceKustomize"
                    }
                },
                "path": {
                    "type": "string"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourcePlugin:GitopsApplicationsApplicationSpecSourcePlugin"
                    }
                },
                "repoUrl": {
                    "type": "string"
                },
                "targetRevision": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "path",
                "repoUrl",
                "targetRevision"
            ]
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourceDirectory:GitopsApplicationsApplicationSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string"
                },
                "include": {
                    "type": "string"
                },
                "jsonnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourceDirectoryJsonnet:GitopsApplicationsApplicationSpecSourceDirectoryJsonnet"
                    }
                },
                "recurse": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourceDirectoryJsonnet:GitopsApplicationsApplicationSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar:GitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar"
                    }
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla:GitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar:GitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla:GitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourceHelm:GitopsApplicationsApplicationSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourceHelmFileParameter:GitopsApplicationsApplicationSpecSourceHelmFileParameter"
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourceHelmParameter:GitopsApplicationsApplicationSpecSourceHelmParameter"
                    }
                },
                "passCredentials": {
                    "type": "boolean"
                },
                "releaseName": {
                    "type": "string"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "values": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourceHelmFileParameter:GitopsApplicationsApplicationSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "path": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourceHelmParameter:GitopsApplicationsApplicationSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourceKsonnet:GitopsApplicationsApplicationSpecSourceKsonnet": {
            "properties": {
                "environment": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourceKsonnetParameter:GitopsApplicationsApplicationSpecSourceKsonnetParameter"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourceKsonnetParameter:GitopsApplicationsApplicationSpecSourceKsonnetParameter": {
            "properties": {
                "component": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourceKustomize:GitopsApplicationsApplicationSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "forceCommonAnnotations": {
                    "type": "boolean"
                },
                "forceCommonLabels": {
                    "type": "boolean"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namePrefix": {
                    "type": "string"
                },
                "nameSuffix": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourcePlugin:GitopsApplicationsApplicationSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSourcePluginEnv:GitopsApplicationsApplicationSpecSourcePluginEnv"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSourcePluginEnv:GitopsApplicationsApplicationSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSyncPolicy:GitopsApplicationsApplicationSpecSyncPolicy": {
            "properties": {
                "automateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSyncPolicyAutomated:GitopsApplicationsApplicationSpecSyncPolicyAutomated"
                    }
                },
                "retries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSyncPolicyRetry:GitopsApplicationsApplicationSpecSyncPolicyRetry"
                    }
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSyncPolicyAutomated:GitopsApplicationsApplicationSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean"
                },
                "prune": {
                    "type": "boolean"
                },
                "selfHeal": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSyncPolicyRetry:GitopsApplicationsApplicationSpecSyncPolicyRetry": {
            "properties": {
                "backoffs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplicationSpecSyncPolicyRetryBackoff:GitopsApplicationsApplicationSpecSyncPolicyRetryBackoff"
                    }
                },
                "limit": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsApplicationsApplicationSpecSyncPolicyRetryBackoff:GitopsApplicationsApplicationSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string"
                },
                "factor": {
                    "type": "string"
                },
                "maxDuration": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsGnupgRequest:GitopsGnupgRequest": {
            "properties": {
                "publickeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsGnupgRequestPublickey:GitopsGnupgRequestPublickey"
                    },
                    "description": "Public key details.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GnuPG Key should be inserted if not present or updated if present.\n"
                }
            },
            "type": "object",
            "required": [
                "upsert"
            ]
        },
        "harness:platform/GitopsGnupgRequestPublickey:GitopsGnupgRequestPublickey": {
            "properties": {
                "fingerprint": {
                    "type": "string"
                },
                "keyData": {
                    "type": "string"
                },
                "keyId": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "subType": {
                    "type": "string"
                },
                "trust": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "keyData"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fingerprint",
                        "keyData",
                        "keyId",
                        "owner",
                        "subType",
                        "trust"
                    ]
                }
            }
        },
        "harness:platform/GitopsRepoCertRequest:GitopsRepoCertRequest": {
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsRepoCertRequestCertificate:GitopsRepoCertRequestCertificate"
                    },
                    "description": "certificates details.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "if the Repository Certificates should be upserted.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certificates"
                    ]
                }
            }
        },
        "harness:platform/GitopsRepoCertRequestCertificate:GitopsRepoCertRequestCertificate": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsRepoCertRequestCertificateItem:GitopsRepoCertRequestCertificateItem"
                    }
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsRepoCertRequestCertificateMetadata:GitopsRepoCertRequestCertificateMetadata"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsRepoCertRequestCertificateItem:GitopsRepoCertRequestCertificateItem": {
            "properties": {
                "certData": {
                    "type": "string"
                },
                "certInfo": {
                    "type": "string"
                },
                "certSubType": {
                    "type": "string"
                },
                "certType": {
                    "type": "string"
                },
                "serverName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsRepoCertRequestCertificateMetadata:GitopsRepoCertRequestCertificateMetadata": {
            "properties": {
                "continue": {
                    "type": "string"
                },
                "remainingItemCount": {
                    "type": "string"
                },
                "resourceVersion": {
                    "type": "string"
                },
                "selfLink": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/GitopsRepoCredCred:GitopsRepoCredCred": {
            "properties": {
                "enableOci": {
                    "type": "boolean",
                    "description": "Specifies whether helm-oci support should be enabled for this repo.\n"
                },
                "githubAppEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "Specifies the GitHub API URL for GitHub app authentication.\n"
                },
                "githubAppId": {
                    "type": "string",
                    "description": "Specifies the Github App ID of the app used to access the repo for GitHub app authentication.\n"
                },
                "githubAppInstallationId": {
                    "type": "string",
                    "description": "Specifies the ID of the installed GitHub App for GitHub app authentication.\n"
                },
                "githubAppPrivateKey": {
                    "type": "string",
                    "description": "github*app*private_key specifies the private key PEM data for authentication via GitHub app.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for authenticating at the repo server.\n"
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "Contains the private key data for authenticating at the repo server using SSH (only Git repos).\n"
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "Specifies the TLS client cert data for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "Specifies the TLS client cert key for authenticating at the repo server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type specifies the type of the repoCreds.Can be either 'git' or 'helm. 'git' is assumed if empty or absent\n"
                },
                "url": {
                    "type": "string",
                    "description": "url representing this object.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for authenticating at the repo server.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/HelmConnectorCredentials:HelmConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/InputSetGitDetails:InputSetGitDetails": {
            "properties": {
                "baseBranch": {
                    "type": "string",
                    "description": "Name of the default branch (this checks out a new branch titled by branch_name).\n"
                },
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message used for the merge commit.\n"
                },
                "connectorRef": {
                    "type": "string",
                    "description": "Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "parentEntityConnectorRef": {
                    "type": "string",
                    "description": "Connector reference for Parent Entity (Pipeline). To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "parentEntityRepoName": {
                    "type": "string",
                    "description": "Repository name for Parent Entity (Pipeline).\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "storeType": {
                    "type": "string",
                    "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseBranch",
                        "lastCommitId",
                        "lastObjectId",
                        "parentEntityConnectorRef",
                        "parentEntityRepoName"
                    ]
                }
            }
        },
        "harness:platform/JiraConnectorAuth:JiraConnectorAuth": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "Authentication types for Jira connector\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/JiraConnectorAuthUsernamePassword:JiraConnectorAuthUsernamePassword",
                    "description": "Authenticate using username password.\n"
                }
            },
            "type": "object",
            "required": [
                "authType"
            ]
        },
        "harness:platform/JiraConnectorAuthUsernamePassword:JiraConnectorAuthUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert": {
            "properties": {
                "caCertRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the CA certificate for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientCertRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client certificate for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientKeyAlgorithm": {
                    "type": "string",
                    "description": "The algorithm used to generate the client key for the connector. Valid values are RSA, EC\n"
                },
                "clientKeyPassphraseRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client key passphrase for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientKeyRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client key for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "clientCertRef",
                "clientKeyAlgorithm",
                "clientKeyRef",
                "masterUrl"
            ]
        },
        "harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect": {
            "properties": {
                "clientIdRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "issuerUrl": {
                    "type": "string",
                    "description": "The URL of the OpenID Connect issuer.\n"
                },
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes to request for the connector.\n"
                },
                "secretRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for the connector.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "clientIdRef",
                "issuerUrl",
                "masterUrl",
                "passwordRef"
            ]
        },
        "harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                },
                "serviceAccountTokenRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the service account token for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "serviceAccountTokenRef"
            ]
        },
        "harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for the connector.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "passwordRef"
            ]
        },
        "harness:platform/ManualFreezeCurrentOrUpcomingWindow:ManualFreezeCurrentOrUpcomingWindow": {
            "properties": {
                "endTime": {
                    "type": "integer",
                    "description": "End time of the freeze\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Start time of the freeze\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endTime",
                        "startTime"
                    ]
                }
            }
        },
        "harness:platform/ManualFreezeFreezeWindow:ManualFreezeFreezeWindow": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration of the freeze\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "End time of the freeze\n"
                },
                "recurrences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ManualFreezeFreezeWindowRecurrence:ManualFreezeFreezeWindowRecurrence"
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time of the freeze\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Timezone\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "duration",
                        "endTime",
                        "recurrences",
                        "startTime",
                        "timeZone"
                    ]
                }
            }
        },
        "harness:platform/ManualFreezeFreezeWindowRecurrence:ManualFreezeFreezeWindowRecurrence": {
            "properties": {
                "recurrenceSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ManualFreezeFreezeWindowRecurrenceRecurrenceSpec:ManualFreezeFreezeWindowRecurrenceRecurrenceSpec"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of freeze\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "recurrenceSpecs",
                        "type"
                    ]
                }
            }
        },
        "harness:platform/ManualFreezeFreezeWindowRecurrenceRecurrenceSpec:ManualFreezeFreezeWindowRecurrenceRecurrenceSpec": {
            "properties": {
                "until": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "until",
                        "value"
                    ]
                }
            }
        },
        "harness:platform/MonitoredServiceRequest:MonitoredServiceRequest": {
            "properties": {
                "changeSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/MonitoredServiceRequestChangeSource:MonitoredServiceRequestChangeSource"
                    },
                    "description": "Set of change sources for the monitored service.\n"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/MonitoredServiceRequestDependency:MonitoredServiceRequestDependency"
                    },
                    "description": "Dependencies of the monitored service.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the monitored service.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the monitored service.\n"
                },
                "environmentRef": {
                    "type": "string",
                    "description": "Environment in which the service is deployed.\n"
                },
                "environmentRefLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environment reference list for the monitored service.\n"
                },
                "healthSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/MonitoredServiceRequestHealthSource:MonitoredServiceRequestHealthSource"
                    },
                    "description": "Set of health sources for the monitored service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the monitored service.\n"
                },
                "notificationRuleRefs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/MonitoredServiceRequestNotificationRuleRef:MonitoredServiceRequestNotificationRuleRef"
                    },
                    "description": "Notification rule references for the monitored service.\n"
                },
                "serviceRef": {
                    "type": "string",
                    "description": "Service reference for the monitored service.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the monitored service. comma-separated key value string pairs.\n"
                },
                "templateRef": {
                    "type": "string",
                    "description": "Template reference for the monitored service.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the monitored service.\n"
                },
                "versionLabel": {
                    "type": "string",
                    "description": "Template version label for the monitored service.\n"
                }
            },
            "type": "object",
            "required": [
                "changeSources",
                "environmentRef",
                "healthSources",
                "name",
                "serviceRef",
                "type"
            ]
        },
        "harness:platform/MonitoredServiceRequestChangeSource:MonitoredServiceRequestChangeSource": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the monitored service.\n"
                },
                "name": {
                    "type": "string"
                },
                "spec": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "category",
                "identifier",
                "name",
                "type"
            ]
        },
        "harness:platform/MonitoredServiceRequestDependency:MonitoredServiceRequestDependency": {
            "properties": {
                "dependencyMetadata": {
                    "type": "string"
                },
                "monitoredServiceIdentifier": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "monitoredServiceIdentifier",
                "type"
            ]
        },
        "harness:platform/MonitoredServiceRequestHealthSource:MonitoredServiceRequestHealthSource": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the monitored service.\n"
                },
                "name": {
                    "type": "string"
                },
                "spec": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "name",
                "spec",
                "type"
            ]
        },
        "harness:platform/MonitoredServiceRequestNotificationRuleRef:MonitoredServiceRequestNotificationRuleRef": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "notificationRuleRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "notificationRuleRef"
            ]
        },
        "harness:platform/NexusConnectorCredentials:NexusConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/PipelineFiltersFilterProperties:PipelineFiltersFilterProperties": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Corresponding Entity of the filters. Currently supported types are {Connector, DelegateProfile, Delegate, PipelineSetup, PipelineExecution, Deployment, Audit, Template, EnvironmentGroup, FileStore, CCMRecommendation, Anomaly, Environment}.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType"
            ]
        },
        "harness:platform/PipelineGitDetails:PipelineGitDetails": {
            "properties": {
                "baseBranch": {
                    "type": "string",
                    "description": "Name of the default branch (this checks out a new branch titled by branch_name).\n"
                },
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message used for the merge commit.\n"
                },
                "connectorRef": {
                    "type": "string",
                    "description": "Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "storeType": {
                    "type": "string",
                    "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseBranch",
                        "lastCommitId",
                        "lastObjectId"
                    ]
                }
            }
        },
        "harness:platform/PolicysetPolicy:PolicysetPolicy": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Organization Identifier\n"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "severity"
            ]
        },
        "harness:platform/PrometheusConnectorHeader:PrometheusConnectorHeader": {
            "properties": {
                "encryptedValueRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the encrypted value. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value.\n"
                },
                "valueEncrypted": {
                    "type": "boolean",
                    "description": "Encrypted value.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "filter": {
                    "type": "string",
                    "description": "Can be one of these 2 EXCLUDING*CHILD*SCOPES or INCLUDING*CHILD*SCOPES\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter": {
            "properties": {
                "includeAllResources": {
                    "type": "boolean",
                    "description": "Include all resource or not\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilterResource:ResourceGroupResourceFilterResource"
                    },
                    "description": "Resources for a resource group\n"
                }
            },
            "type": "object"
        },
        "harness:platform/ResourceGroupResourceFilterResource:ResourceGroupResourceFilterResource": {
            "properties": {
                "attributeFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilterResourceAttributeFilter:ResourceGroupResourceFilterResourceAttributeFilter"
                    }
                },
                "identifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "resourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "resourceType"
            ]
        },
        "harness:platform/ResourceGroupResourceFilterResourceAttributeFilter:ResourceGroupResourceFilterResourceAttributeFilter": {
            "properties": {
                "attributeName": {
                    "type": "string"
                },
                "attributeValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/RoleAssignmentsPrincipal:RoleAssignmentsPrincipal": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier.\n"
                },
                "scopeLevel": {
                    "type": "string",
                    "description": "Scope level.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scopeLevel",
                        "type"
                    ]
                }
            }
        },
        "harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos": {
            "properties": {
                "principal": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication.\n"
                },
                "tgtGenerationMethod": {
                    "type": "string",
                    "description": "Method to generate tgt\n"
                },
                "tgtKeyTabFilePathSpec": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberosTgtKeyTabFilePathSpec:SecretSshkeyKerberosTgtKeyTabFilePathSpec",
                    "description": "Authenticate to App Dynamics using username and password.\n"
                },
                "tgtPasswordSpec": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberosTgtPasswordSpec:SecretSshkeyKerberosTgtPasswordSpec",
                    "description": "Authenticate to App Dynamics using username and password.\n"
                }
            },
            "type": "object",
            "required": [
                "principal",
                "realm"
            ]
        },
        "harness:platform/SecretSshkeyKerberosTgtKeyTabFilePathSpec:SecretSshkeyKerberosTgtKeyTabFilePathSpec": {
            "properties": {
                "keyPath": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/SecretSshkeyKerberosTgtPasswordSpec:SecretSshkeyKerberosTgtPasswordSpec": {
            "properties": {
                "password": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/SecretSshkeySsh:SecretSshkeySsh": {
            "properties": {
                "credentialType": {
                    "type": "string",
                    "description": "This specifies SSH credential type as Password, KeyPath or KeyReference\n"
                },
                "sshPasswordCredential": {
                    "$ref": "#/types/harness:platform/SecretSshkeySshSshPasswordCredential:SecretSshkeySshSshPasswordCredential",
                    "description": "SSH credential of type keyReference\n"
                },
                "sshkeyPathCredential": {
                    "$ref": "#/types/harness:platform/SecretSshkeySshSshkeyPathCredential:SecretSshkeySshSshkeyPathCredential",
                    "description": "SSH credential of type keyPath\n"
                },
                "sshkeyReferenceCredential": {
                    "$ref": "#/types/harness:platform/SecretSshkeySshSshkeyReferenceCredential:SecretSshkeySshSshkeyReferenceCredential",
                    "description": "SSH credential of type keyReference\n"
                }
            },
            "type": "object",
            "required": [
                "credentialType"
            ]
        },
        "harness:platform/SecretSshkeySshSshPasswordCredential:SecretSshkeySshSshPasswordCredential": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "userName"
            ]
        },
        "harness:platform/SecretSshkeySshSshkeyPathCredential:SecretSshkeySshSshkeyPathCredential": {
            "properties": {
                "encryptedPassphrase": {
                    "type": "string"
                },
                "keyPath": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "keyPath",
                "userName"
            ]
        },
        "harness:platform/SecretSshkeySshSshkeyReferenceCredential:SecretSshkeySshSshkeyReferenceCredential": {
            "properties": {
                "encryptedPassphrase": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "userName"
            ]
        },
        "harness:platform/SloRequest:SloRequest": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description for the SLO.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the SLO.\n"
                },
                "notificationRuleRefs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/SloRequestNotificationRuleRef:SloRequestNotificationRuleRef"
                    },
                    "description": "Notification rule references for the SLO.\n"
                },
                "sloTarget": {
                    "$ref": "#/types/harness:platform/SloRequestSloTarget:SloRequestSloTarget",
                    "description": "SLO Target specification.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "Specification of the SLO.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the SLO. comma-separated key value string pairs.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the SLO.\n"
                },
                "userJourneyRefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User journey reference list for the SLO.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "sloTarget",
                "spec",
                "type",
                "userJourneyRefs"
            ]
        },
        "harness:platform/SloRequestNotificationRuleRef:SloRequestNotificationRuleRef": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "notificationRuleRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "notificationRuleRef"
            ]
        },
        "harness:platform/SloRequestSloTarget:SloRequestSloTarget": {
            "properties": {
                "sloTargetPercentage": {
                    "type": "number"
                },
                "spec": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sloTargetPercentage",
                "spec",
                "type"
            ]
        },
        "harness:platform/TemplateFiltersFilterProperties:TemplateFiltersFilterProperties": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Corresponding Entity of the filters. Currently supported types are {TemplateSetup, TemplateExecution, Template}.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType"
            ]
        },
        "harness:platform/TemplateGitDetails:TemplateGitDetails": {
            "properties": {
                "baseBranch": {
                    "type": "string",
                    "description": "Name of the default branch (this checks out a new branch titled by branch_name).\n"
                },
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message used for the merge commit.\n"
                },
                "connectorRef": {
                    "type": "string",
                    "description": "Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "storeType": {
                    "type": "string",
                    "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseBranch",
                        "branchName",
                        "commitMessage",
                        "connectorRef",
                        "filePath",
                        "lastCommitId",
                        "lastObjectId",
                        "repoName",
                        "storeType"
                    ]
                }
            }
        },
        "harness:platform/UserRoleBinding:UserRoleBinding": {
            "properties": {
                "managedRole": {
                    "type": "boolean",
                    "description": "Managed Role of the user.\n"
                },
                "resourceGroupIdentifier": {
                    "type": "string",
                    "description": "Resource Group Identifier of the user.\n"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "Resource Group Name of the user.\n"
                },
                "roleIdentifier": {
                    "type": "string",
                    "description": "Role Identifier of the user.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Role Name Identifier of the user.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig": {
            "properties": {
                "groupEmail": {
                    "type": "string",
                    "description": "Group email.\n"
                },
                "microsoftTeamsWebhookUrl": {
                    "type": "string",
                    "description": "Url of Microsoft teams webhook.\n"
                },
                "pagerDutyKey": {
                    "type": "string",
                    "description": "Pager duty key.\n"
                },
                "sendEmailToAllUsers": {
                    "type": "boolean",
                    "description": "Send email to all the group members.\n"
                },
                "slackWebhookUrl": {
                    "type": "string",
                    "description": "Url of slack webhook.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sendEmailToAllUsers"
                    ]
                }
            }
        },
        "harness:platform/VariablesSpec:VariablesSpec": {
            "properties": {
                "fixedValue": {
                    "type": "string",
                    "description": "FixedValue of the variable\n"
                },
                "valueType": {
                    "type": "string",
                    "description": "Type of Value of the Variable. For now only FIXED is supported\n"
                }
            },
            "type": "object",
            "required": [
                "fixedValue",
                "valueType"
            ]
        },
        "harness:platform/getAppDynamicsConnectorApiToken:getAppDynamicsConnectorApiToken": {
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecretRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecretRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAppDynamicsConnectorUsernamePassword:getAppDynamicsConnectorUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getArtifactoryConnectorCredential:getArtifactoryConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsCCConnectorCrossAccountAccess:getAwsCCConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorCrossAccountAccess:getAwsConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorInheritFromDelegate:getAwsConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorIrsa:getAwsConnectorIrsa": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorManual:getAwsConnectorManual": {
            "properties": {
                "accessKey": {
                    "type": "string"
                },
                "accessKeyRef": {
                    "type": "string"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secretKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "accessKeyRef",
                "delegateSelectors",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsKmsConnectorCredential:getAwsKmsConnectorCredential": {
            "properties": {
                "assumeRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsKmsConnectorCredentialAssumeRole:getAwsKmsConnectorCredentialAssumeRole"
                    }
                },
                "inheritFromDelegate": {
                    "type": "boolean"
                },
                "manuals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsKmsConnectorCredentialManual:getAwsKmsConnectorCredentialManual"
                    }
                }
            },
            "type": "object",
            "required": [
                "assumeRoles",
                "inheritFromDelegate",
                "manuals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsKmsConnectorCredentialAssumeRole:getAwsKmsConnectorCredentialAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "externalId": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsKmsConnectorCredentialManual:getAwsKmsConnectorCredentialManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string"
                },
                "secretKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsSecretManagerConnectorCredential:getAwsSecretManagerConnectorCredential": {
            "properties": {
                "assumeRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsSecretManagerConnectorCredentialAssumeRole:getAwsSecretManagerConnectorCredentialAssumeRole"
                    }
                },
                "inheritFromDelegate": {
                    "type": "boolean"
                },
                "manuals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsSecretManagerConnectorCredentialManual:getAwsSecretManagerConnectorCredentialManual"
                    }
                }
            },
            "type": "object",
            "required": [
                "assumeRoles",
                "inheritFromDelegate",
                "manuals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsSecretManagerConnectorCredentialAssumeRole:getAwsSecretManagerConnectorCredentialAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "externalId": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsSecretManagerConnectorCredentialManual:getAwsSecretManagerConnectorCredentialManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string"
                },
                "secretKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorApiAuthentication:getBitbucketConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tokenRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorCredential:getBitbucketConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getBitbucketConnectorCredentialHttp:getBitbucketConnectorCredentialHttp"
                    }
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getBitbucketConnectorCredentialSsh:getBitbucketConnectorCredentialSsh"
                    }
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorCredentialHttp:getBitbucketConnectorCredentialHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorCredentialSsh:getBitbucketConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getCcmFiltersFilterProperty:getCcmFiltersFilterProperty": {
            "properties": {
                "filterType": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorAzureCloudCostBillingExportSpec:getConnectorAzureCloudCostBillingExportSpec": {
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "directoryName": {
                    "type": "string"
                },
                "reportName": {
                    "type": "string"
                },
                "storageAccountName": {
                    "type": "string"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subsription id.\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "directoryName",
                "reportName",
                "storageAccountName",
                "subscriptionId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorAzureCloudProviderCredential:getConnectorAzureCloudProviderCredential": {
            "properties": {
                "azureInheritFromDelegateDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetail:getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetail"
                    }
                },
                "azureManualDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorAzureCloudProviderCredentialAzureManualDetail:getConnectorAzureCloudProviderCredentialAzureManualDetail"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "azureInheritFromDelegateDetails",
                "azureManualDetails",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetail:getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetail": {
            "properties": {
                "auths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetailAuth:getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetailAuth"
                    }
                }
            },
            "type": "object",
            "required": [
                "auths"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetailAuth:getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetailAuth": {
            "properties": {
                "azureMsiAuthUas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetailAuthAzureMsiAuthUa:getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetailAuthAzureMsiAuthUa"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "azureMsiAuthUas",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetailAuthAzureMsiAuthUa:getConnectorAzureCloudProviderCredentialAzureInheritFromDelegateDetailAuthAzureMsiAuthUa": {
            "properties": {
                "clientId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorAzureCloudProviderCredentialAzureManualDetail:getConnectorAzureCloudProviderCredentialAzureManualDetail": {
            "properties": {
                "applicationId": {
                    "type": "string"
                },
                "auths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorAzureCloudProviderCredentialAzureManualDetailAuth:getConnectorAzureCloudProviderCredentialAzureManualDetailAuth"
                    }
                },
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "auths",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorAzureCloudProviderCredentialAzureManualDetailAuth:getConnectorAzureCloudProviderCredentialAzureManualDetailAuth": {
            "properties": {
                "azureClientKeyCerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorAzureCloudProviderCredentialAzureManualDetailAuthAzureClientKeyCert:getConnectorAzureCloudProviderCredentialAzureManualDetailAuthAzureClientKeyCert"
                    }
                },
                "azureClientSecretKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorAzureCloudProviderCredentialAzureManualDetailAuthAzureClientSecretKey:getConnectorAzureCloudProviderCredentialAzureManualDetailAuthAzureClientSecretKey"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "azureClientKeyCerts",
                "azureClientSecretKeys",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorAzureCloudProviderCredentialAzureManualDetailAuthAzureClientKeyCert:getConnectorAzureCloudProviderCredentialAzureManualDetailAuthAzureClientKeyCert": {
            "properties": {
                "certificateRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "certificateRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorAzureCloudProviderCredentialAzureManualDetailAuthAzureClientSecretKey:getConnectorAzureCloudProviderCredentialAzureManualDetailAuthAzureClientSecretKey": {
            "properties": {
                "secretRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "secretRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorGcpCloudCostBillingExportSpec:getConnectorGcpCloudCostBillingExportSpec": {
            "properties": {
                "dataSetId": {
                    "type": "string"
                },
                "tableId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSetId",
                "tableId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorJenkinsAuth:getConnectorJenkinsAuth": {
            "properties": {
                "jenkinsBearerTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorJenkinsAuthJenkinsBearerToken:getConnectorJenkinsAuthJenkinsBearerToken"
                    }
                },
                "jenkinsUserNamePasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorJenkinsAuthJenkinsUserNamePassword:getConnectorJenkinsAuthJenkinsUserNamePassword"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "jenkinsBearerTokens",
                "jenkinsUserNamePasswords",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorJenkinsAuthJenkinsBearerToken:getConnectorJenkinsAuthJenkinsBearerToken": {
            "properties": {
                "tokenRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorJenkinsAuthJenkinsUserNamePassword:getConnectorJenkinsAuthJenkinsUserNamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorOciHelmCredential:getConnectorOciHelmCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorServiceNowAuth:getConnectorServiceNowAuth": {
            "properties": {
                "adfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorServiceNowAuthAdf:getConnectorServiceNowAuthAdf"
                    }
                },
                "authType": {
                    "type": "string"
                },
                "usernamePasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorServiceNowAuthUsernamePassword:getConnectorServiceNowAuthUsernamePassword"
                    }
                }
            },
            "type": "object",
            "required": [
                "adfs",
                "authType",
                "usernamePasswords"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorServiceNowAuthAdf:getConnectorServiceNowAuthAdf": {
            "properties": {
                "adfsUrl": {
                    "type": "string"
                },
                "certificateRef": {
                    "type": "string"
                },
                "clientIdRef": {
                    "type": "string"
                },
                "privateKeyRef": {
                    "type": "string"
                },
                "resourceIdRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "adfsUrl",
                "certificateRef",
                "clientIdRef",
                "privateKeyRef",
                "resourceIdRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorServiceNowAuthUsernamePassword:getConnectorServiceNowAuthUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorSpotPermanentToken:getConnectorSpotPermanentToken": {
            "properties": {
                "apiTokenRef": {
                    "type": "string"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "executeOnDelegate": {
                    "type": "boolean"
                },
                "spotAccountId": {
                    "type": "string"
                },
                "spotAccountIdRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenRef",
                "delegateSelectors",
                "executeOnDelegate",
                "spotAccountId",
                "spotAccountIdRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorTasCredential:getConnectorTasCredential": {
            "properties": {
                "tasManualDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorTasCredentialTasManualDetail:getConnectorTasCredentialTasManualDetail"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tasManualDetails",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorTasCredentialTasManualDetail:getConnectorTasCredentialTasManualDetail": {
            "properties": {
                "endpointUrl": {
                    "type": "string"
                },
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endpointUrl",
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorTerraformCloudCredential:getConnectorTerraformCloudCredential": {
            "properties": {
                "apiTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getConnectorTerraformCloudCredentialApiToken:getConnectorTerraformCloudCredentialApiToken"
                    }
                }
            },
            "type": "object",
            "required": [
                "apiTokens"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getConnectorTerraformCloudCredentialApiToken:getConnectorTerraformCloudCredentialApiToken": {
            "properties": {
                "apiTokenRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiTokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getDockerConnectorCredential:getDockerConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getFiltersFilterProperty:getFiltersFilterProperty": {
            "properties": {
                "filterType": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGcpConnectorInheritFromDelegate:getGcpConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGcpConnectorManual:getGcpConnectorManual": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secretKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitConnectorCredential:getGitConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitConnectorCredentialHttp:getGitConnectorCredentialHttp"
                    }
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitConnectorCredentialSsh:getGitConnectorCredentialSsh"
                    }
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitConnectorCredentialHttp:getGitConnectorCredentialHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitConnectorCredentialSsh:getGitConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorApiAuthentication:getGithubConnectorApiAuthentication": {
            "properties": {
                "githubApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGithubConnectorApiAuthenticationGithubApp:getGithubConnectorApiAuthenticationGithubApp"
                    }
                },
                "tokenRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "githubApps",
                "tokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorApiAuthenticationGithubApp:getGithubConnectorApiAuthenticationGithubApp": {
            "properties": {
                "applicationId": {
                    "type": "string"
                },
                "applicationIdRef": {
                    "type": "string"
                },
                "installationId": {
                    "type": "string"
                },
                "installationIdRef": {
                    "type": "string"
                },
                "privateKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "applicationIdRef",
                "installationId",
                "installationIdRef",
                "privateKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorCredential:getGithubConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGithubConnectorCredentialHttp:getGithubConnectorCredentialHttp"
                    }
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGithubConnectorCredentialSsh:getGithubConnectorCredentialSsh"
                    }
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorCredentialHttp:getGithubConnectorCredentialHttp": {
            "properties": {
                "tokenRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tokenRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorCredentialSsh:getGithubConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorApiAuthentication:getGitlabConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorCredential:getGitlabConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitlabConnectorCredentialHttp:getGitlabConnectorCredentialHttp"
                    }
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitlabConnectorCredentialSsh:getGitlabConnectorCredentialSsh"
                    }
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorCredentialHttp:getGitlabConnectorCredentialHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "tokenRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "tokenRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorCredentialSsh:getGitlabConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsAgentMetadata:getGitopsAgentMetadata": {
            "properties": {
                "highAvailability": {
                    "type": "boolean"
                },
                "namespace": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "highAvailability",
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsApplicationsApplication:getGitopsApplicationsApplication": {
            "properties": {
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationMetadata:getGitopsApplicationsApplicationMetadata"
                    },
                    "description": "Metadata corresponding to the resources. This includes all the objects a user must create.\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpec:getGitopsApplicationsApplicationSpec"
                    },
                    "description": "Specifications of the GitOps application. This includes the repository URL, application definition, source, destination and sync policy.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationMetadata:getGitopsApplicationsApplicationMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "clusterName": {
                    "type": "string"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generateName": {
                    "type": "string"
                },
                "generation": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "namespace": {
                    "type": "string"
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationMetadataOwnerReference:getGitopsApplicationsApplicationMetadataOwnerReference"
                    }
                },
                "uid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "finalizers",
                "generation",
                "labels",
                "namespace",
                "uid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsApplicationsApplicationMetadataOwnerReference:getGitopsApplicationsApplicationMetadataOwnerReference": {
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "type": "boolean"
                },
                "controller": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the GitOps application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "uid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpec:getGitopsApplicationsApplicationSpec": {
            "properties": {
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecDestination:getGitopsApplicationsApplicationSpecDestination"
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSource:getGitopsApplicationsApplicationSpecSource"
                    }
                },
                "syncPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSyncPolicy:getGitopsApplicationsApplicationSpecSyncPolicy"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecDestination:getGitopsApplicationsApplicationSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "namespace": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSource:getGitopsApplicationsApplicationSpecSource": {
            "properties": {
                "chart": {
                    "type": "string"
                },
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceDirectory:getGitopsApplicationsApplicationSpecSourceDirectory"
                    }
                },
                "helms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceHelm:getGitopsApplicationsApplicationSpecSourceHelm"
                    }
                },
                "ksonnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceKsonnet:getGitopsApplicationsApplicationSpecSourceKsonnet"
                    }
                },
                "kustomizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceKustomize:getGitopsApplicationsApplicationSpecSourceKustomize"
                    }
                },
                "path": {
                    "type": "string"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourcePlugin:getGitopsApplicationsApplicationSpecSourcePlugin"
                    }
                },
                "repoUrl": {
                    "type": "string"
                },
                "targetRevision": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceDirectory:getGitopsApplicationsApplicationSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string"
                },
                "include": {
                    "type": "string"
                },
                "jsonnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnet:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnet"
                    }
                },
                "recurse": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnet:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar"
                    }
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceHelm:getGitopsApplicationsApplicationSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceHelmFileParameter:getGitopsApplicationsApplicationSpecSourceHelmFileParameter"
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceHelmParameter:getGitopsApplicationsApplicationSpecSourceHelmParameter"
                    }
                },
                "passCredentials": {
                    "type": "boolean"
                },
                "releaseName": {
                    "type": "string"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "values": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceHelmFileParameter:getGitopsApplicationsApplicationSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "path": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceHelmParameter:getGitopsApplicationsApplicationSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceKsonnet:getGitopsApplicationsApplicationSpecSourceKsonnet": {
            "properties": {
                "environment": {
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceKsonnetParameter:getGitopsApplicationsApplicationSpecSourceKsonnetParameter"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceKsonnetParameter:getGitopsApplicationsApplicationSpecSourceKsonnetParameter": {
            "properties": {
                "component": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceKustomize:getGitopsApplicationsApplicationSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "forceCommonAnnotations": {
                    "type": "boolean"
                },
                "forceCommonLabels": {
                    "type": "boolean"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namePrefix": {
                    "type": "string"
                },
                "nameSuffix": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourcePlugin:getGitopsApplicationsApplicationSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourcePluginEnv:getGitopsApplicationsApplicationSpecSourcePluginEnv"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourcePluginEnv:getGitopsApplicationsApplicationSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSyncPolicy:getGitopsApplicationsApplicationSpecSyncPolicy": {
            "properties": {
                "automateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyAutomated:getGitopsApplicationsApplicationSpecSyncPolicyAutomated"
                    }
                },
                "retries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyRetry:getGitopsApplicationsApplicationSpecSyncPolicyRetry"
                    }
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyAutomated:getGitopsApplicationsApplicationSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean"
                },
                "prune": {
                    "type": "boolean"
                },
                "selfHeal": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyRetry:getGitopsApplicationsApplicationSpecSyncPolicyRetry": {
            "properties": {
                "backoffs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff:getGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff"
                    }
                },
                "limit": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff:getGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string"
                },
                "factor": {
                    "type": "string"
                },
                "maxDuration": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterQuery:getGitopsClusterQuery": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterQueryId:getGitopsClusterQueryId"
                    },
                    "description": "Cluster server URL or the cluster name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps cluster.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server of the GitOps cluster.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterQueryId:getGitopsClusterQueryId": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequest:getGitopsClusterRequest": {
            "properties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestCluster:getGitopsClusterRequestCluster"
                    }
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestId:getGitopsClusterRequestId"
                    },
                    "description": "The ID of this resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updateMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestUpdateMask:getGitopsClusterRequestUpdateMask"
                    }
                },
                "updatedFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "upsert": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsClusterRequestCluster:getGitopsClusterRequestCluster": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "clusterResources": {
                    "type": "boolean"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterConfig:getGitopsClusterRequestClusterConfig"
                    }
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterInfo:getGitopsClusterRequestClusterInfo"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "project": {
                    "type": "string"
                },
                "refreshRequestedAts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterRefreshRequestedAt:getGitopsClusterRequestClusterRefreshRequestedAt"
                    }
                },
                "server": {
                    "type": "string"
                },
                "shard": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "infos"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsClusterRequestClusterConfig:getGitopsClusterRequestClusterConfig": {
            "properties": {
                "awsAuthConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterConfigAwsAuthConfig:getGitopsClusterRequestClusterConfigAwsAuthConfig"
                    }
                },
                "bearerToken": {
                    "type": "string"
                },
                "clusterConnectionType": {
                    "type": "string"
                },
                "execProviderConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterConfigExecProviderConfig:getGitopsClusterRequestClusterConfigExecProviderConfig"
                    }
                },
                "password": {
                    "type": "string"
                },
                "tlsClientConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterConfigTlsClientConfig:getGitopsClusterRequestClusterConfigTlsClientConfig"
                    }
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterConfigAwsAuthConfig:getGitopsClusterRequestClusterConfigAwsAuthConfig": {
            "properties": {
                "clusterName": {
                    "type": "string"
                },
                "roleARN": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterConfigExecProviderConfig:getGitopsClusterRequestClusterConfigExecProviderConfig": {
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "installHint": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterConfigTlsClientConfig:getGitopsClusterRequestClusterConfigTlsClientConfig": {
            "properties": {
                "caData": {
                    "type": "string"
                },
                "certData": {
                    "type": "string"
                },
                "insecure": {
                    "type": "boolean"
                },
                "keyData": {
                    "type": "string"
                },
                "serverName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterInfo:getGitopsClusterRequestClusterInfo": {
            "properties": {
                "apiVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "applicationsCount": {
                    "type": "string"
                },
                "cacheInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterInfoCacheInfo:getGitopsClusterRequestClusterInfoCacheInfo"
                    }
                },
                "connectionStates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterInfoConnectionState:getGitopsClusterRequestClusterInfoConnectionState"
                    }
                },
                "serverVersion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cacheInfos",
                "connectionStates",
                "serverVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsClusterRequestClusterInfoCacheInfo:getGitopsClusterRequestClusterInfoCacheInfo": {
            "properties": {
                "apisCount": {
                    "type": "string"
                },
                "lastCacheSyncTime": {
                    "type": "string"
                },
                "resourcesCount": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterInfoConnectionState:getGitopsClusterRequestClusterInfoConnectionState": {
            "properties": {
                "attemptedAts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterInfoConnectionStateAttemptedAt:getGitopsClusterRequestClusterInfoConnectionStateAttemptedAt"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "message",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsClusterRequestClusterInfoConnectionStateAttemptedAt:getGitopsClusterRequestClusterInfoConnectionStateAttemptedAt": {
            "properties": {
                "nanos": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterRefreshRequestedAt:getGitopsClusterRequestClusterRefreshRequestedAt": {
            "properties": {
                "nanos": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestId:getGitopsClusterRequestId": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestUpdateMask:getGitopsClusterRequestUpdateMask": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "pulumi.json#/Any"
                        }
                    }
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsGnupgRequest:getGitopsGnupgRequest": {
            "properties": {
                "publickeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsGnupgRequestPublickey:getGitopsGnupgRequestPublickey"
                    },
                    "description": "Public key details.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GnuPG Key should be inserted if not present or updated if present.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsGnupgRequestPublickey:getGitopsGnupgRequestPublickey": {
            "properties": {
                "fingerprint": {
                    "type": "string"
                },
                "keyData": {
                    "type": "string"
                },
                "keyId": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "subType": {
                    "type": "string"
                },
                "trust": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsRepoCredCred:getGitopsRepoCredCred": {
            "properties": {
                "enableOci": {
                    "type": "boolean",
                    "description": "Specifies whether helm-oci support should be enabled for this repo.\n"
                },
                "githubAppEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "Specifies the GitHub API URL for GitHub app authentication.\n"
                },
                "githubAppId": {
                    "type": "string",
                    "description": "Specifies the Github App ID of the app used to access the repo for GitHub app authentication.\n"
                },
                "githubAppInstallationId": {
                    "type": "string",
                    "description": "Specifies the ID of the installed GitHub App for GitHub app authentication.\n"
                },
                "githubAppPrivateKey": {
                    "type": "string",
                    "description": "github*app*private_key specifies the private key PEM data for authentication via GitHub app.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for authenticating at the repo server.\n"
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "Contains the private key data for authenticating at the repo server using SSH (only Git repos).\n"
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "Specifies the TLS client cert data for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "Specifies the TLS client cert key for authenticating at the repo server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type specifies the type of the repoCreds.Can be either 'git' or 'helm. 'git' is assumed if empty or absent\n"
                },
                "url": {
                    "type": "string",
                    "description": "url representing this object.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for authenticating at the repo server.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsRepositoryRepo:getGitopsRepositoryRepo": {
            "properties": {
                "connectionType": {
                    "type": "string"
                },
                "enableLfs": {
                    "type": "boolean"
                },
                "enableOci": {
                    "type": "boolean"
                },
                "githubAppEnterpriseBaseUrl": {
                    "type": "string"
                },
                "githubAppId": {
                    "type": "string"
                },
                "githubAppInstallationId": {
                    "type": "string"
                },
                "githubAppPrivateKey": {
                    "type": "string"
                },
                "inheritedCreds": {
                    "type": "boolean"
                },
                "insecure": {
                    "type": "boolean"
                },
                "insecureIgnoreHostKey": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                },
                "proxy": {
                    "type": "string"
                },
                "repo": {
                    "type": "string",
                    "description": "Repo details holding application configurations.\n"
                },
                "sshPrivateKey": {
                    "type": "string"
                },
                "tlsClientCertData": {
                    "type": "string"
                },
                "tlsClientCertKey": {
                    "type": "string"
                },
                "type_": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "project",
                "type_"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsRepositoryUpdateMask:getGitopsRepositoryUpdateMask": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of field mask paths.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getHelmConnectorCredential:getHelmConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getInputSetGitDetails:getInputSetGitDetails": {
            "properties": {
                "baseBranch": {
                    "type": "string",
                    "description": "Name of the default branch (this checks out a new branch titled by branch_name).\n"
                },
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message used for the merge commit.\n"
                },
                "connectorRef": {
                    "type": "string",
                    "description": "Identifier of the Harness Connector used for CRUD operations on the Entity.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "parentEntityConnectorRef": {
                    "type": "string",
                    "description": "Connector reference for Parent Entity (Pipeline).\n"
                },
                "parentEntityRepoName": {
                    "type": "string",
                    "description": "Repository name for Parent Entity (Pipeline).\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "storeType": {
                    "type": "string",
                    "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                }
            },
            "type": "object",
            "required": [
                "baseBranch",
                "branchName",
                "commitMessage",
                "connectorRef",
                "filePath",
                "lastCommitId",
                "lastObjectId",
                "parentEntityConnectorRef",
                "parentEntityRepoName",
                "repoName",
                "storeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getJiraConnectorAuth:getJiraConnectorAuth": {
            "properties": {
                "authType": {
                    "type": "string"
                },
                "usernamePasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getJiraConnectorAuthUsernamePassword:getJiraConnectorAuthUsernamePassword"
                    }
                }
            },
            "type": "object",
            "required": [
                "authType",
                "usernamePasswords"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getJiraConnectorAuthUsernamePassword:getJiraConnectorAuthUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorClientKeyCert:getKubernetesConnectorClientKeyCert": {
            "properties": {
                "caCertRef": {
                    "type": "string"
                },
                "clientCertRef": {
                    "type": "string"
                },
                "clientKeyAlgorithm": {
                    "type": "string"
                },
                "clientKeyPassphraseRef": {
                    "type": "string"
                },
                "clientKeyRef": {
                    "type": "string"
                },
                "masterUrl": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "caCertRef",
                "clientCertRef",
                "clientKeyAlgorithm",
                "clientKeyPassphraseRef",
                "clientKeyRef",
                "masterUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorInheritFromDelegate:getKubernetesConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorOpenidConnect:getKubernetesConnectorOpenidConnect": {
            "properties": {
                "clientIdRef": {
                    "type": "string"
                },
                "issuerUrl": {
                    "type": "string"
                },
                "masterUrl": {
                    "type": "string"
                },
                "passwordRef": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "secretRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientIdRef",
                "issuerUrl",
                "masterUrl",
                "passwordRef",
                "scopes",
                "secretRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorServiceAccount:getKubernetesConnectorServiceAccount": {
            "properties": {
                "masterUrl": {
                    "type": "string"
                },
                "serviceAccountTokenRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "serviceAccountTokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorUsernamePassword:getKubernetesConnectorUsernamePassword": {
            "properties": {
                "masterUrl": {
                    "type": "string"
                },
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getManualFreezeCurrentOrUpcomingWindow:getManualFreezeCurrentOrUpcomingWindow": {
            "properties": {
                "endTime": {
                    "type": "integer",
                    "description": "End time of the freeze\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Start time of the freeze\n"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "startTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getManualFreezeFreezeWindow:getManualFreezeFreezeWindow": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration of the freeze\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "End time of the freeze\n"
                },
                "recurrences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getManualFreezeFreezeWindowRecurrence:getManualFreezeFreezeWindowRecurrence"
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time of the freeze\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Timezone\n"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "endTime",
                "recurrences",
                "startTime",
                "timeZone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getManualFreezeFreezeWindowRecurrence:getManualFreezeFreezeWindowRecurrence": {
            "properties": {
                "recurrenceSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getManualFreezeFreezeWindowRecurrenceRecurrenceSpec:getManualFreezeFreezeWindowRecurrenceRecurrenceSpec"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of freeze\n"
                }
            },
            "type": "object",
            "required": [
                "recurrenceSpecs",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getManualFreezeFreezeWindowRecurrenceRecurrenceSpec:getManualFreezeFreezeWindowRecurrenceRecurrenceSpec": {
            "properties": {
                "until": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "until",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getNexusConnectorCredential:getNexusConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "usernameRef": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getPermissionsPermission:getPermissionsPermission": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "identifier": {
                    "type": "string"
                },
                "includeInAllRoles": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "allowedScopeLevels",
                "identifier",
                "includeInAllRoles",
                "name",
                "resourceType",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getPipelineFiltersFilterProperty:getPipelineFiltersFilterProperty": {
            "properties": {
                "filterType": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getPipelineGitDetails:getPipelineGitDetails": {
            "properties": {
                "baseBranch": {
                    "type": "string",
                    "description": "Name of the default branch (this checks out a new branch titled by branch_name).\n"
                },
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message used for the merge commit.\n"
                },
                "connectorRef": {
                    "type": "string",
                    "description": "Identifier of the Harness Connector used for CRUD operations on the Entity.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "storeType": {
                    "type": "string",
                    "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                }
            },
            "type": "object",
            "required": [
                "baseBranch",
                "branchName",
                "commitMessage",
                "connectorRef",
                "filePath",
                "lastCommitId",
                "lastObjectId",
                "repoName",
                "storeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getPolicysetPolicy:getPolicysetPolicy": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Organization Identifier\n"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "severity"
            ]
        },
        "harness:platform/getPrometheusConnectorHeader:getPrometheusConnectorHeader": {
            "properties": {
                "encryptedValueRef": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "valueEncrypted": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "encryptedValueRef",
                "key",
                "value",
                "valueEncrypted"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupIncludedScope:getResourceGroupIncludedScope": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "filter": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "filter",
                "orgId",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupResourceFilter:getResourceGroupResourceFilter": {
            "properties": {
                "includeAllResources": {
                    "type": "boolean"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getResourceGroupResourceFilterResource:getResourceGroupResourceFilterResource"
                    }
                }
            },
            "type": "object",
            "required": [
                "includeAllResources",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupResourceFilterResource:getResourceGroupResourceFilterResource": {
            "properties": {
                "attributeFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getResourceGroupResourceFilterResourceAttributeFilter:getResourceGroupResourceFilterResourceAttributeFilter"
                    }
                },
                "identifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "resourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attributeFilters",
                "identifiers",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupResourceFilterResourceAttributeFilter:getResourceGroupResourceFilterResourceAttributeFilter": {
            "properties": {
                "attributeName": {
                    "type": "string"
                },
                "attributeValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValues"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getRoleAssignmentsPrincipal:getRoleAssignmentsPrincipal": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier for role assignment.\n"
                },
                "scopeLevel": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "scopeLevel",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeyKerbero:getSecretSshkeyKerbero": {
            "properties": {
                "principal": {
                    "type": "string"
                },
                "realm": {
                    "type": "string"
                },
                "tgtGenerationMethod": {
                    "type": "string"
                },
                "tgtKeyTabFilePathSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeyKerberoTgtKeyTabFilePathSpec:getSecretSshkeyKerberoTgtKeyTabFilePathSpec"
                    }
                },
                "tgtPasswordSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeyKerberoTgtPasswordSpec:getSecretSshkeyKerberoTgtPasswordSpec"
                    }
                }
            },
            "type": "object",
            "required": [
                "principal",
                "realm",
                "tgtGenerationMethod",
                "tgtKeyTabFilePathSpecs",
                "tgtPasswordSpecs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeyKerberoTgtKeyTabFilePathSpec:getSecretSshkeyKerberoTgtKeyTabFilePathSpec": {
            "properties": {
                "keyPath": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "keyPath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeyKerberoTgtPasswordSpec:getSecretSshkeyKerberoTgtPasswordSpec": {
            "properties": {
                "password": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySsh:getSecretSshkeySsh": {
            "properties": {
                "credentialType": {
                    "type": "string"
                },
                "sshPasswordCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeySshSshPasswordCredential:getSecretSshkeySshSshPasswordCredential"
                    }
                },
                "sshkeyPathCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeySshSshkeyPathCredential:getSecretSshkeySshSshkeyPathCredential"
                    }
                },
                "sshkeyReferenceCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeySshSshkeyReferenceCredential:getSecretSshkeySshSshkeyReferenceCredential"
                    }
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "sshPasswordCredentials",
                "sshkeyPathCredentials",
                "sshkeyReferenceCredentials"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySshSshPasswordCredential:getSecretSshkeySshSshPasswordCredential": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySshSshkeyPathCredential:getSecretSshkeySshSshkeyPathCredential": {
            "properties": {
                "encryptedPassphrase": {
                    "type": "string"
                },
                "keyPath": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptedPassphrase",
                "keyPath",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySshSshkeyReferenceCredential:getSecretSshkeySshSshkeyReferenceCredential": {
            "properties": {
                "encryptedAssphrase": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "encryptedAssphrase",
                "key",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getTemplateFiltersFilterProperty:getTemplateFiltersFilterProperty": {
            "properties": {
                "filterType": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getTemplateGitDetails:getTemplateGitDetails": {
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "fileUrl": {
                    "type": "string",
                    "description": "File url of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "Repo url of the Entity in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "lastCommitId",
                "lastObjectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getUsergroupNotificationConfig:getUsergroupNotificationConfig": {
            "properties": {
                "groupEmail": {
                    "type": "string",
                    "description": "Group email.\n"
                },
                "microsoftTeamsWebhookUrl": {
                    "type": "string",
                    "description": "Url of Microsoft teams webhook.\n"
                },
                "pagerDutyKey": {
                    "type": "string",
                    "description": "Pager duty key.\n"
                },
                "sendEmailToAllUsers": {
                    "type": "boolean",
                    "description": "Send email to all the group members.\n"
                },
                "slackWebhookUrl": {
                    "type": "string",
                    "description": "Url of slack webhook.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS.\n"
                }
            },
            "type": "object",
            "required": [
                "groupEmail",
                "microsoftTeamsWebhookUrl",
                "pagerDutyKey",
                "sendEmailToAllUsers",
                "slackWebhookUrl",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getVariablesSpec:getVariablesSpec": {
            "properties": {
                "fixedValue": {
                    "type": "string"
                },
                "valueType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "fixedValue",
                "valueType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:service/AmiVariable:AmiVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/CodedeployVariable:CodedeployVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/EcsVariable:EcsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/HelmVariable:HelmVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/KubernetesVariable:KubernetesVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/LambdaVariable:LambdaVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/SshVariable:SshVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/TanzuVariable:TanzuVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/WinrmVariable:WinrmVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the harness package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountId": {
                "type": "string",
                "description": "The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.\n"
            },
            "apiKey": {
                "type": "string",
                "description": "The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable. For more information to\ncreate an API key in FirstGen, see https://docs.harness.io/article/smloyragsm-api-keys#create_an_api_key.\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the\n`HARNESS_ENDPOINT` environment variable.\n"
            },
            "platformApiKey": {
                "type": "string",
                "description": "The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment\nvariable. For more information to create an API key in NextGen, see\nhttps://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys.\n"
            }
        },
        "inputProperties": {
            "accountId": {
                "type": "string",
                "description": "The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ACCOUNT_ID"
                    ]
                }
            },
            "apiKey": {
                "type": "string",
                "description": "The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable. For more information to\ncreate an API key in FirstGen, see https://docs.harness.io/article/smloyragsm-api-keys#create_an_api_key.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_API_KEY"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "description": "The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the\n`HARNESS_ENDPOINT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ENDPOINT"
                    ]
                }
            },
            "platformApiKey": {
                "type": "string",
                "description": "The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment\nvariable. For more information to create an API key in NextGen, see\nhttps://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_PLATFORM_API_KEY"
                    ]
                }
            }
        }
    },
    "resources": {
        "harness:cloudprovider/aws:Aws": {
            "description": "Resource for creating an AWS cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst awsAccessKey = new harness.EncryptedText(\"awsAccessKey\", {\n    value: \"\u003cACCESS_KEY_ID\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst awsSecretKey = new harness.EncryptedText(\"awsSecretKey\", {\n    value: \"\u003cSECRET_KEY_ID\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst aws = new harness.cloudprovider.Aws(\"aws\", {\n    accessKeyIdSecretName: awsAccessKey.name,\n    secretAccessKeySecretName: awsSecretKey.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\naws_access_key = harness.EncryptedText(\"awsAccessKey\",\n    value=\"\u003cACCESS_KEY_ID\u003e\",\n    secret_manager_id=default.id)\naws_secret_key = harness.EncryptedText(\"awsSecretKey\",\n    value=\"\u003cSECRET_KEY_ID\u003e\",\n    secret_manager_id=default.id)\naws = harness.cloudprovider.Aws(\"aws\",\n    access_key_id_secret_name=aws_access_key.name,\n    secret_access_key_secret_name=aws_secret_key.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var awsAccessKey = new Harness.EncryptedText(\"awsAccessKey\", new()\n    {\n        Value = \"\u003cACCESS_KEY_ID\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var awsSecretKey = new Harness.EncryptedText(\"awsSecretKey\", new()\n    {\n        Value = \"\u003cSECRET_KEY_ID\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var aws = new Harness.Cloudprovider.Aws(\"aws\", new()\n    {\n        AccessKeyIdSecretName = awsAccessKey.Name,\n        SecretAccessKeySecretName = awsSecretKey.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsAccessKey, err := harness.NewEncryptedText(ctx, \"awsAccessKey\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cACCESS_KEY_ID\u003e\"),\n\t\t\tSecretManagerId: *pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsSecretKey, err := harness.NewEncryptedText(ctx, \"awsSecretKey\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cSECRET_KEY_ID\u003e\"),\n\t\t\tSecretManagerId: *pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewAws(ctx, \"aws\", \u0026cloudprovider.AwsArgs{\n\t\t\tAccessKeyIdSecretName:     awsAccessKey.Name,\n\t\t\tSecretAccessKeySecretName: awsSecretKey.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Aws;\nimport com.pulumi.harness.cloudprovider.AwsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var awsAccessKey = new EncryptedText(\"awsAccessKey\", EncryptedTextArgs.builder()        \n            .value(\"\u003cACCESS_KEY_ID\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var awsSecretKey = new EncryptedText(\"awsSecretKey\", EncryptedTextArgs.builder()        \n            .value(\"\u003cSECRET_KEY_ID\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var aws = new Aws(\"aws\", AwsArgs.builder()        \n            .accessKeyIdSecretName(awsAccessKey.name())\n            .secretAccessKeySecretName(awsSecretKey.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  awsAccessKey:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cACCESS_KEY_ID\u003e\n      secretManagerId: ${default.id}\n  awsSecretKey:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cSECRET_KEY_ID\u003e\n      secretManagerId: ${default.id}\n  aws:\n    type: harness:cloudprovider:Aws\n    properties:\n      accessKeyIdSecretName: ${awsAccessKey.name}\n      secretAccessKeySecretName: ${awsSecretKey.name}\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness aws cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/aws:Aws example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The plain text AWS access key id.\n"
                },
                "accessKeyIdSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS access key id\n"
                },
                "assumeCrossAccountRole": {
                    "$ref": "#/types/harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole",
                    "description": "Configuration for assuming a cross account role.\n"
                },
                "delegateSelector": {
                    "type": "string",
                    "description": "Select the Delegate to use via one of its Selectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "secretAccessKeySecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS secret access key.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/AwsUsageScope:AwsUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "useEc2IamCredentials": {
                    "type": "boolean",
                    "description": "Use the EC2 Instance Profile for Service Accounts.\n"
                },
                "useIrsa": {
                    "type": "boolean",
                    "description": "Use the AWS IAM Role for Service Accounts.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The plain text AWS access key id.\n"
                },
                "accessKeyIdSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS access key id\n"
                },
                "assumeCrossAccountRole": {
                    "$ref": "#/types/harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole",
                    "description": "Configuration for assuming a cross account role.\n"
                },
                "delegateSelector": {
                    "type": "string",
                    "description": "Select the Delegate to use via one of its Selectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "secretAccessKeySecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS secret access key.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/AwsUsageScope:AwsUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "useEc2IamCredentials": {
                    "type": "boolean",
                    "description": "Use the EC2 Instance Profile for Service Accounts.\n"
                },
                "useIrsa": {
                    "type": "boolean",
                    "description": "Use the AWS IAM Role for Service Accounts.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Aws resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The plain text AWS access key id.\n"
                    },
                    "accessKeyIdSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the AWS access key id\n"
                    },
                    "assumeCrossAccountRole": {
                        "$ref": "#/types/harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole",
                        "description": "Configuration for assuming a cross account role.\n"
                    },
                    "delegateSelector": {
                        "type": "string",
                        "description": "Select the Delegate to use via one of its Selectors.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretAccessKeySecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the AWS secret access key.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/AwsUsageScope:AwsUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    },
                    "useEc2IamCredentials": {
                        "type": "boolean",
                        "description": "Use the EC2 Instance Profile for Service Accounts.\n"
                    },
                    "useIrsa": {
                        "type": "boolean",
                        "description": "Use the AWS IAM Role for Service Accounts.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/azure:Azure": {
            "description": "Resource for creating an Azure cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst azureKey = new harness.EncryptedText(\"azureKey\", {\n    value: \"\u003cAZURE_KEY\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst azure = new harness.cloudprovider.Azure(\"azure\", {\n    clientId: \"\u003cAZURE_CLIENT_ID\u003e\",\n    tenantId: \"\u003cAZURE_TENANT_ID\u003e\",\n    key: azureKey.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nazure_key = harness.EncryptedText(\"azureKey\",\n    value=\"\u003cAZURE_KEY\u003e\",\n    secret_manager_id=default.id)\nazure = harness.cloudprovider.Azure(\"azure\",\n    client_id=\"\u003cAZURE_CLIENT_ID\u003e\",\n    tenant_id=\"\u003cAZURE_TENANT_ID\u003e\",\n    key=azure_key.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var azureKey = new Harness.EncryptedText(\"azureKey\", new()\n    {\n        Value = \"\u003cAZURE_KEY\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var azure = new Harness.Cloudprovider.Azure(\"azure\", new()\n    {\n        ClientId = \"\u003cAZURE_CLIENT_ID\u003e\",\n        TenantId = \"\u003cAZURE_TENANT_ID\u003e\",\n        Key = azureKey.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tazureKey, err := harness.NewEncryptedText(ctx, \"azureKey\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cAZURE_KEY\u003e\"),\n\t\t\tSecretManagerId: *pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewAzure(ctx, \"azure\", \u0026cloudprovider.AzureArgs{\n\t\t\tClientId: pulumi.String(\"\u003cAZURE_CLIENT_ID\u003e\"),\n\t\t\tTenantId: pulumi.String(\"\u003cAZURE_TENANT_ID\u003e\"),\n\t\t\tKey:      azureKey.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Azure;\nimport com.pulumi.harness.cloudprovider.AzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var azureKey = new EncryptedText(\"azureKey\", EncryptedTextArgs.builder()        \n            .value(\"\u003cAZURE_KEY\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var azure = new Azure(\"azure\", AzureArgs.builder()        \n            .clientId(\"\u003cAZURE_CLIENT_ID\u003e\")\n            .tenantId(\"\u003cAZURE_TENANT_ID\u003e\")\n            .key(azureKey.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  azureKey:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cAZURE_KEY\u003e\n      secretManagerId: ${default.id}\n  azure:\n    type: harness:cloudprovider:Azure\n    properties:\n      clientId: \u003cAZURE_CLIENT_ID\u003e\n      tenantId: \u003cAZURE_TENANT_ID\u003e\n      key: ${azureKey.name}\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness azure cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/azure:Azure example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id for the Azure application\n"
                },
                "environmentType": {
                    "type": "string",
                    "description": "The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Name of the Harness secret containing the key for the Azure application\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant id for the Azure application\n"
                }
            },
            "required": [
                "clientId",
                "key",
                "name",
                "tenantId"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id for the Azure application\n"
                },
                "environmentType": {
                    "type": "string",
                    "description": "The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Name of the Harness secret containing the key for the Azure application\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant id for the Azure application\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "key",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Azure resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "The client id for the Azure application\n"
                    },
                    "environmentType": {
                        "type": "string",
                        "description": "The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The Name of the Harness secret containing the key for the Azure application\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant id for the Azure application\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/datacenter:Datacenter": {
            "description": "Resource for creating a physical data center cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.cloudprovider.Datacenter(\"example\", {});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.cloudprovider.Datacenter(\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Cloudprovider.Datacenter(\"example\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudprovider.NewDatacenter(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.cloudprovider.Datacenter;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Datacenter(\"example\");\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:cloudprovider:Datacenter\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness datacenter cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/datacenter:Datacenter example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Datacenter resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/gcp:Gcp": {
            "description": "Resource for creating a GCP cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n",
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to use for this provider.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "secretFileId": {
                    "type": "string",
                    "description": "The id of the secret containing the GCP credentials\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of GCP configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/GcpUsageScope:GcpUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to use for this provider.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "secretFileId": {
                    "type": "string",
                    "description": "The id of the secret containing the GCP credentials\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of GCP configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/GcpUsageScope:GcpUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gcp resources.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Delegate selectors to use for this provider.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretFileId": {
                        "type": "string",
                        "description": "The id of the secret containing the GCP credentials\n"
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "Skip validation of GCP configuration.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/GcpUsageScope:GcpUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/kubernetes:Kubernetes": {
            "description": "Resource for creating a Kubernetes cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst username = new harness.EncryptedText(\"username\", {\n    value: \"\u003cUSERNAME\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst password = new harness.EncryptedText(\"password\", {\n    value: \"\u003cPASSWORD\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst example = new harness.cloudprovider.Kubernetes(\"example\", {\n    skipValidation: true,\n    authentication: {\n        usernamePassword: {\n            masterUrl: \"https://localhost.com\",\n            usernameSecretName: username.name,\n            passwordSecretName: password.name,\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nusername = harness.EncryptedText(\"username\",\n    value=\"\u003cUSERNAME\u003e\",\n    secret_manager_id=default.id)\npassword = harness.EncryptedText(\"password\",\n    value=\"\u003cPASSWORD\u003e\",\n    secret_manager_id=default.id)\nexample = harness.cloudprovider.Kubernetes(\"example\",\n    skip_validation=True,\n    authentication=harness.cloudprovider.KubernetesAuthenticationArgs(\n        username_password=harness.cloudprovider.KubernetesAuthenticationUsernamePasswordArgs(\n            master_url=\"https://localhost.com\",\n            username_secret_name=username.name,\n            password_secret_name=password.name,\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var username = new Harness.EncryptedText(\"username\", new()\n    {\n        Value = \"\u003cUSERNAME\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var password = new Harness.EncryptedText(\"password\", new()\n    {\n        Value = \"\u003cPASSWORD\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var example = new Harness.Cloudprovider.Kubernetes(\"example\", new()\n    {\n        SkipValidation = true,\n        Authentication = new Harness.Cloudprovider.Inputs.KubernetesAuthenticationArgs\n        {\n            UsernamePassword = new Harness.Cloudprovider.Inputs.KubernetesAuthenticationUsernamePasswordArgs\n            {\n                MasterUrl = \"https://localhost.com\",\n                UsernameSecretName = username.Name,\n                PasswordSecretName = password.Name,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tusername, err := harness.NewEncryptedText(ctx, \"username\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cUSERNAME\u003e\"),\n\t\t\tSecretManagerId: *pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpassword, err := harness.NewEncryptedText(ctx, \"password\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cPASSWORD\u003e\"),\n\t\t\tSecretManagerId: *pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewKubernetes(ctx, \"example\", \u0026cloudprovider.KubernetesArgs{\n\t\t\tSkipValidation: pulumi.Bool(true),\n\t\t\tAuthentication: \u0026cloudprovider.KubernetesAuthenticationArgs{\n\t\t\t\tUsernamePassword: \u0026cloudprovider.KubernetesAuthenticationUsernamePasswordArgs{\n\t\t\t\t\tMasterUrl:          pulumi.String(\"https://localhost.com\"),\n\t\t\t\t\tUsernameSecretName: username.Name,\n\t\t\t\t\tPasswordSecretName: password.Name,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Kubernetes;\nimport com.pulumi.harness.cloudprovider.KubernetesArgs;\nimport com.pulumi.harness.cloudprovider.inputs.KubernetesAuthenticationArgs;\nimport com.pulumi.harness.cloudprovider.inputs.KubernetesAuthenticationUsernamePasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var username = new EncryptedText(\"username\", EncryptedTextArgs.builder()        \n            .value(\"\u003cUSERNAME\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var password = new EncryptedText(\"password\", EncryptedTextArgs.builder()        \n            .value(\"\u003cPASSWORD\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var example = new Kubernetes(\"example\", KubernetesArgs.builder()        \n            .skipValidation(true)\n            .authentication(KubernetesAuthenticationArgs.builder()\n                .usernamePassword(KubernetesAuthenticationUsernamePasswordArgs.builder()\n                    .masterUrl(\"https://localhost.com\")\n                    .usernameSecretName(username.name())\n                    .passwordSecretName(password.name())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  username:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cUSERNAME\u003e\n      secretManagerId: ${default.id}\n  password:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cPASSWORD\u003e\n      secretManagerId: ${default.id}\n  example:\n    type: harness:cloudprovider:Kubernetes\n    properties:\n      skipValidation: true\n      authentication:\n        usernamePassword:\n          masterUrl: https://localhost.com\n          usernameSecretName: ${username.name}\n          passwordSecretName: ${password.name}\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness kubernetes cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/kubernetes:Kubernetes example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication",
                    "description": "Authentication configuration for the Kubernetes cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Kubernetes configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "authentication",
                "name"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication",
                    "description": "Authentication configuration for the Kubernetes cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Kubernetes configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "requiredInputs": [
                "authentication"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication",
                        "description": "Authentication configuration for the Kubernetes cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "Skip validation of Kubernetes configuration.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/spot:Spot": {
            "description": "Resource for creating a Spot cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst spotToken = new harness.EncryptedText(\"spotToken\", {\n    secretManagerId: _default.then(_default =\u003e _default.id),\n    value: \"\u003cSPOT_TOKEN\u003e\",\n});\nconst example = new harness.cloudprovider.Spot(\"example\", {\n    accountId: \"\u003cSPOT_ACCOUNT_ID\u003e\",\n    tokenSecretName: spotToken.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nspot_token = harness.EncryptedText(\"spotToken\",\n    secret_manager_id=default.id,\n    value=\"\u003cSPOT_TOKEN\u003e\")\nexample = harness.cloudprovider.Spot(\"example\",\n    account_id=\"\u003cSPOT_ACCOUNT_ID\u003e\",\n    token_secret_name=spot_token.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var spotToken = new Harness.EncryptedText(\"spotToken\", new()\n    {\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n        Value = \"\u003cSPOT_TOKEN\u003e\",\n    });\n\n    var example = new Harness.Cloudprovider.Spot(\"example\", new()\n    {\n        AccountId = \"\u003cSPOT_ACCOUNT_ID\u003e\",\n        TokenSecretName = spotToken.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tspotToken, err := harness.NewEncryptedText(ctx, \"spotToken\", \u0026harness.EncryptedTextArgs{\n\t\t\tSecretManagerId: *pulumi.String(_default.Id),\n\t\t\tValue:           pulumi.String(\"\u003cSPOT_TOKEN\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewSpot(ctx, \"example\", \u0026cloudprovider.SpotArgs{\n\t\t\tAccountId:       pulumi.String(\"\u003cSPOT_ACCOUNT_ID\u003e\"),\n\t\t\tTokenSecretName: spotToken.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Spot;\nimport com.pulumi.harness.cloudprovider.SpotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var spotToken = new EncryptedText(\"spotToken\", EncryptedTextArgs.builder()        \n            .secretManagerId(default_.id())\n            .value(\"\u003cSPOT_TOKEN\u003e\")\n            .build());\n\n        var example = new Spot(\"example\", SpotArgs.builder()        \n            .accountId(\"\u003cSPOT_ACCOUNT_ID\u003e\")\n            .tokenSecretName(spotToken.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  spotToken:\n    type: harness:EncryptedText\n    properties:\n      secretManagerId: ${default.id}\n      value: \u003cSPOT_TOKEN\u003e\n  example:\n    type: harness:cloudprovider:Spot\n    properties:\n      accountId: \u003cSPOT_ACCOUNT_ID\u003e\n      tokenSecretName: ${spotToken.name}\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness Spot cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/spot:Spot example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The Spot account ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "tokenSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the spot account token\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "tokenSecretName"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The Spot account ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "tokenSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the spot account token\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "tokenSecretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Spot resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The Spot account ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "tokenSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the spot account token\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/tanzu:Tanzu": {
            "description": "Resource for creating a Tanzu cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst tanzuPassword = new harness.EncryptedText(\"tanzuPassword\", {\n    value: \"\u003cPASSWORD\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst example = new harness.cloudprovider.Tanzu(\"example\", {\n    endpoint: \"https://endpoint.com\",\n    skipValidation: true,\n    username: \"\u003cUSERNAME\u003e\",\n    passwordSecretName: tanzuPassword.name,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\ntanzu_password = harness.EncryptedText(\"tanzuPassword\",\n    value=\"\u003cPASSWORD\u003e\",\n    secret_manager_id=default.id)\nexample = harness.cloudprovider.Tanzu(\"example\",\n    endpoint=\"https://endpoint.com\",\n    skip_validation=True,\n    username=\"\u003cUSERNAME\u003e\",\n    password_secret_name=tanzu_password.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var tanzuPassword = new Harness.EncryptedText(\"tanzuPassword\", new()\n    {\n        Value = \"\u003cPASSWORD\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var example = new Harness.Cloudprovider.Tanzu(\"example\", new()\n    {\n        Endpoint = \"https://endpoint.com\",\n        SkipValidation = true,\n        Username = \"\u003cUSERNAME\u003e\",\n        PasswordSecretName = tanzuPassword.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttanzuPassword, err := harness.NewEncryptedText(ctx, \"tanzuPassword\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cPASSWORD\u003e\"),\n\t\t\tSecretManagerId: *pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewTanzu(ctx, \"example\", \u0026cloudprovider.TanzuArgs{\n\t\t\tEndpoint:           pulumi.String(\"https://endpoint.com\"),\n\t\t\tSkipValidation:     pulumi.Bool(true),\n\t\t\tUsername:           pulumi.String(\"\u003cUSERNAME\u003e\"),\n\t\t\tPasswordSecretName: tanzuPassword.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Tanzu;\nimport com.pulumi.harness.cloudprovider.TanzuArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var tanzuPassword = new EncryptedText(\"tanzuPassword\", EncryptedTextArgs.builder()        \n            .value(\"\u003cPASSWORD\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var example = new Tanzu(\"example\", TanzuArgs.builder()        \n            .endpoint(\"https://endpoint.com\")\n            .skipValidation(true)\n            .username(\"\u003cUSERNAME\u003e\")\n            .passwordSecretName(tanzuPassword.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tanzuPassword:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cPASSWORD\u003e\n      secretManagerId: ${default.id}\n  example:\n    type: harness:cloudprovider:Tanzu\n    properties:\n      endpoint: https://endpoint.com\n      skipValidation: true\n      username: \u003cUSERNAME\u003e\n      passwordSecretName: ${tanzuPassword.name}\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness Tanzu cloud provider id.\n\n```sh\n $ pulumi import harness:cloudprovider/tanzu:Tanzu example \u003cprovider_id\u003e\n```\n\n ",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The url of the Tanzu platform.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "passwordSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the password to use to authenticate to Tanzu.\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Tanzu configuration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use to authenticate to Tanzu.\n"
                },
                "usernameSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the username to authenticate to Tanzu with.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "passwordSecretName"
            ],
            "inputProperties": {
                "endpoint": {
                    "type": "string",
                    "description": "The url of the Tanzu platform.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "passwordSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the password to use to authenticate to Tanzu.\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Tanzu configuration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use to authenticate to Tanzu.\n"
                },
                "usernameSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the username to authenticate to Tanzu with.\n"
                }
            },
            "requiredInputs": [
                "endpoint",
                "passwordSecretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tanzu resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The url of the Tanzu platform.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "passwordSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the password to use to authenticate to Tanzu.\n"
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "Skip validation of Tanzu configuration.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to use to authenticate to Tanzu.\n"
                    },
                    "usernameSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the username to authenticate to Tanzu with.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/addUserToGroup:AddUserToGroup": {
            "description": "Resource for adding a user to a group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst exampleUser = harness.getUser({\n    email: \"testuser@example.com\",\n});\nconst admin = new harness.UserGroup(\"admin\", {});\nconst exampleAddUserToGroups = new harness.AddUserToGroup(\"exampleAddUserToGroups\", {\n    groupId: admin.id,\n    userId: data.harness_user.test.id,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\nexample_user = harness.get_user(email=\"testuser@example.com\")\nadmin = harness.UserGroup(\"admin\")\nexample_add_user_to_groups = harness.AddUserToGroup(\"exampleAddUserToGroups\",\n    group_id=admin.id,\n    user_id=data[\"harness_user\"][\"test\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = Harness.GetUser.Invoke(new()\n    {\n        Email = \"testuser@example.com\",\n    });\n\n    var admin = new Harness.UserGroup(\"admin\");\n\n    var exampleAddUserToGroups = new Harness.AddUserToGroup(\"exampleAddUserToGroups\", new()\n    {\n        GroupId = admin.Id,\n        UserId = data.Harness_user.Test.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.LookupUser(ctx, \u0026harness.LookupUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"testuser@example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tadmin, err := harness.NewUserGroup(ctx, \"admin\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewAddUserToGroup(ctx, \"exampleAddUserToGroups\", \u0026harness.AddUserToGroupArgs{\n\t\t\tGroupId: admin.ID(),\n\t\t\tUserId:  pulumi.Any(data.Harness_user.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetUserArgs;\nimport com.pulumi.harness.UserGroup;\nimport com.pulumi.harness.AddUserToGroup;\nimport com.pulumi.harness.AddUserToGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = HarnessFunctions.getUser(GetUserArgs.builder()\n            .email(\"testuser@example.com\")\n            .build());\n\n        var admin = new UserGroup(\"admin\");\n\n        var exampleAddUserToGroups = new AddUserToGroup(\"exampleAddUserToGroups\", AddUserToGroupArgs.builder()        \n            .groupId(admin.id())\n            .userId(data.harness_user().test().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin:\n    type: harness:UserGroup\n  exampleAddUserToGroups:\n    type: harness:AddUserToGroup\n    properties:\n      groupId: ${admin.id}\n      userId: ${data.harness_user.test.id}\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: harness:getUser\n      Arguments:\n        email: testuser@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness user and user group id\n\n```sh\n $ pulumi import harness:index/addUserToGroup:AddUserToGroup example_admin \u003cuser_id\u003e/\u003cgroup_id\u003e\n```\n\n ",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "Unique identifier of the user.\n"
                }
            },
            "required": [
                "groupId",
                "userId"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "Unique identifier of the user.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AddUserToGroup resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The name of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "Unique identifier of the user.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harness:index/application:Application": {
            "description": "Resource for creating a Harness application\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst myapp = new harness.Application(\"myapp\", {\n    description: \"This is my first Harness application\",\n    tags: [\n        \"mytag:myvalue\",\n        \"team:development\",\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nmyapp = harness.Application(\"myapp\",\n    description=\"This is my first Harness application\",\n    tags=[\n        \"mytag:myvalue\",\n        \"team:development\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Harness.Application(\"myapp\", new()\n    {\n        Description = \"This is my first Harness application\",\n        Tags = new[]\n        {\n            \"mytag:myvalue\",\n            \"team:development\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewApplication(ctx, \"myapp\", \u0026harness.ApplicationArgs{\n\t\t\tDescription: pulumi.String(\"This is my first Harness application\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"mytag:myvalue\"),\n\t\t\t\tpulumi.String(\"team:development\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Application(\"myapp\", ApplicationArgs.builder()        \n            .description(\"This is my first Harness application\")\n            .tags(            \n                \"mytag:myvalue\",\n                \"team:development\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: harness:Application\n    properties:\n      description: This is my first Harness application\n      tags:\n        - mytag:myvalue\n        - team:development\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id\n\n```sh\n $ pulumi import harness:index/application:Application myapp Xyz123\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The application description\n"
                },
                "gitSyncConnectorId": {
                    "type": "string",
                    "description": "The id of the git sync connector\n"
                },
                "gitSyncEnabled": {
                    "type": "boolean",
                    "description": "True if git sync is enabled on this application\n"
                },
                "isManualTriggerAuthorized": {
                    "type": "boolean",
                    "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "gitSyncConnectorId",
                "gitSyncEnabled",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The application description\n"
                },
                "isManualTriggerAuthorized": {
                    "type": "boolean",
                    "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Application resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The application description\n"
                    },
                    "gitSyncConnectorId": {
                        "type": "string",
                        "description": "The id of the git sync connector\n"
                    },
                    "gitSyncEnabled": {
                        "type": "boolean",
                        "description": "True if git sync is enabled on this application\n"
                    },
                    "isManualTriggerAuthorized": {
                        "type": "boolean",
                        "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/applicationGitSync:ApplicationGitSync": {
            "description": "Resource for configuring application git sync.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst githubToken = new harness.EncryptedText(\"githubToken\", {\n    value: \"\u003cTOKEN\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst myrepo = new harness.GitConnector(\"myrepo\", {\n    url: \"https://github.com/someorg/myrepo\",\n    branch: \"main\",\n    generateWebhookUrl: true,\n    username: \"someuser\",\n    passwordSecretId: githubToken.id,\n    urlType: \"REPO\",\n});\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleApplicationGitSync = new harness.ApplicationGitSync(\"exampleApplicationGitSync\", {\n    appId: exampleApplication.id,\n    connectorId: myrepo.id,\n    branch: \"main\",\n    enabled: false,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\ngithub_token = harness.EncryptedText(\"githubToken\",\n    value=\"\u003cTOKEN\u003e\",\n    secret_manager_id=default.id)\nmyrepo = harness.GitConnector(\"myrepo\",\n    url=\"https://github.com/someorg/myrepo\",\n    branch=\"main\",\n    generate_webhook_url=True,\n    username=\"someuser\",\n    password_secret_id=github_token.id,\n    url_type=\"REPO\")\nexample_application = harness.Application(\"exampleApplication\")\nexample_application_git_sync = harness.ApplicationGitSync(\"exampleApplicationGitSync\",\n    app_id=example_application.id,\n    connector_id=myrepo.id,\n    branch=\"main\",\n    enabled=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var githubToken = new Harness.EncryptedText(\"githubToken\", new()\n    {\n        Value = \"\u003cTOKEN\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var myrepo = new Harness.GitConnector(\"myrepo\", new()\n    {\n        Url = \"https://github.com/someorg/myrepo\",\n        Branch = \"main\",\n        GenerateWebhookUrl = true,\n        Username = \"someuser\",\n        PasswordSecretId = githubToken.Id,\n        UrlType = \"REPO\",\n    });\n\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleApplicationGitSync = new Harness.ApplicationGitSync(\"exampleApplicationGitSync\", new()\n    {\n        AppId = exampleApplication.Id,\n        ConnectorId = myrepo.Id,\n        Branch = \"main\",\n        Enabled = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgithubToken, err := harness.NewEncryptedText(ctx, \"githubToken\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"\u003cTOKEN\u003e\"),\n\t\t\tSecretManagerId: *pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyrepo, err := harness.NewGitConnector(ctx, \"myrepo\", \u0026harness.GitConnectorArgs{\n\t\t\tUrl:                pulumi.String(\"https://github.com/someorg/myrepo\"),\n\t\t\tBranch:             pulumi.String(\"main\"),\n\t\t\tGenerateWebhookUrl: pulumi.Bool(true),\n\t\t\tUsername:           pulumi.String(\"someuser\"),\n\t\t\tPasswordSecretId:   githubToken.ID(),\n\t\t\tUrlType:            pulumi.String(\"REPO\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewApplicationGitSync(ctx, \"exampleApplicationGitSync\", \u0026harness.ApplicationGitSyncArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tConnectorId: myrepo.ID(),\n\t\t\tBranch:      pulumi.String(\"main\"),\n\t\t\tEnabled:     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.GitConnector;\nimport com.pulumi.harness.GitConnectorArgs;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationGitSync;\nimport com.pulumi.harness.ApplicationGitSyncArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var githubToken = new EncryptedText(\"githubToken\", EncryptedTextArgs.builder()        \n            .value(\"\u003cTOKEN\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var myrepo = new GitConnector(\"myrepo\", GitConnectorArgs.builder()        \n            .url(\"https://github.com/someorg/myrepo\")\n            .branch(\"main\")\n            .generateWebhookUrl(true)\n            .username(\"someuser\")\n            .passwordSecretId(githubToken.id())\n            .urlType(\"REPO\")\n            .build());\n\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleApplicationGitSync = new ApplicationGitSync(\"exampleApplicationGitSync\", ApplicationGitSyncArgs.builder()        \n            .appId(exampleApplication.id())\n            .connectorId(myrepo.id())\n            .branch(\"main\")\n            .enabled(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  githubToken:\n    type: harness:EncryptedText\n    properties:\n      value: \u003cTOKEN\u003e\n      secretManagerId: ${default.id}\n  myrepo:\n    type: harness:GitConnector\n    properties:\n      url: https://github.com/someorg/myrepo\n      branch: main\n      generateWebhookUrl: true\n      username: someuser\n      passwordSecretId: ${githubToken.id}\n      urlType: REPO\n  exampleApplication:\n    type: harness:Application\n  exampleApplicationGitSync:\n    type: harness:ApplicationGitSync\n    properties:\n      appId: ${exampleApplication.id}\n      connectorId: ${myrepo.id}\n      branch: main\n      enabled: false\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id\n\n```sh\n $ pulumi import harness:index/applicationGitSync:ApplicationGitSync myapp Xyz123\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch of the git repository to sync to.\n"
                },
                "connectorId": {
                    "type": "string",
                    "description": "The id of the git connector to use.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable git sync.\n"
                },
                "repositoryName": {
                    "type": "string",
                    "description": "The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.\n"
                }
            },
            "required": [
                "appId",
                "branch",
                "connectorId"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch of the git repository to sync to.\n"
                },
                "connectorId": {
                    "type": "string",
                    "description": "The id of the git connector to use.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable git sync.\n"
                },
                "repositoryName": {
                    "type": "string",
                    "description": "The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "branch",
                "connectorId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationGitSync resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch of the git repository to sync to.\n"
                    },
                    "connectorId": {
                        "type": "string",
                        "description": "The id of the git connector to use.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not to enable git sync.\n"
                    },
                    "repositoryName": {
                        "type": "string",
                        "description": "The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/delegateApproval:DelegateApproval": {
            "description": "Resource for approving or rejecting delegates.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst testDelegate = harness.getDelegate({\n    name: \"my-delegate\",\n});\nconst testDelegateApproval = new harness.DelegateApproval(\"testDelegateApproval\", {\n    delegateId: testDelegate.then(testDelegate =\u003e testDelegate.id),\n    approve: true,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ntest_delegate = harness.get_delegate(name=\"my-delegate\")\ntest_delegate_approval = harness.DelegateApproval(\"testDelegateApproval\",\n    delegate_id=test_delegate.id,\n    approve=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testDelegate = Harness.GetDelegate.Invoke(new()\n    {\n        Name = \"my-delegate\",\n    });\n\n    var testDelegateApproval = new Harness.DelegateApproval(\"testDelegateApproval\", new()\n    {\n        DelegateId = testDelegate.Apply(getDelegateResult =\u003e getDelegateResult.Id),\n        Approve = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestDelegate, err := harness.GetDelegate(ctx, \u0026harness.GetDelegateArgs{\n\t\t\tName: pulumi.StringRef(\"my-delegate\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewDelegateApproval(ctx, \"testDelegateApproval\", \u0026harness.DelegateApprovalArgs{\n\t\t\tDelegateId: *pulumi.String(testDelegate.Id),\n\t\t\tApprove:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetDelegateArgs;\nimport com.pulumi.harness.DelegateApproval;\nimport com.pulumi.harness.DelegateApprovalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testDelegate = HarnessFunctions.getDelegate(GetDelegateArgs.builder()\n            .name(\"my-delegate\")\n            .build());\n\n        var testDelegateApproval = new DelegateApproval(\"testDelegateApproval\", DelegateApprovalArgs.builder()        \n            .delegateId(testDelegate.applyValue(getDelegateResult -\u003e getDelegateResult.id()))\n            .approve(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testDelegateApproval:\n    type: harness:DelegateApproval\n    properties:\n      delegateId: ${testDelegate.id}\n      approve: true\nvariables:\n  testDelegate:\n    fn::invoke:\n      Function: harness:getDelegate\n      Arguments:\n        name: my-delegate\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport the status of the delegate approval.\n\n```sh\n $ pulumi import harness:index/delegateApproval:DelegateApproval example \u003cdelegate_id\u003e\n```\n\n ",
            "properties": {
                "approve": {
                    "type": "boolean",
                    "description": "Whether or not to approve the delegate.\n"
                },
                "delegateId": {
                    "type": "string",
                    "description": "The id of the delegate.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the delegate.\n"
                }
            },
            "required": [
                "approve",
                "delegateId",
                "status"
            ],
            "inputProperties": {
                "approve": {
                    "type": "boolean",
                    "description": "Whether or not to approve the delegate.\n",
                    "willReplaceOnChanges": true
                },
                "delegateId": {
                    "type": "string",
                    "description": "The id of the delegate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "approve",
                "delegateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DelegateApproval resources.\n",
                "properties": {
                    "approve": {
                        "type": "boolean",
                        "description": "Whether or not to approve the delegate.\n",
                        "willReplaceOnChanges": true
                    },
                    "delegateId": {
                        "type": "string",
                        "description": "The id of the delegate.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/encryptedText:EncryptedText": {
            "description": "Resource for creating an encrypted text secret\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst example = new harness.EncryptedText(\"example\", {\n    value: \"someval\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n    usageScopes: [\n        {\n            environmentFilterType: \"PRODUCTION_ENVIRONMENTS\",\n        },\n        {\n            environmentFilterType: \"NON_PRODUCTION_ENVIRONMENTS\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nexample = harness.EncryptedText(\"example\",\n    value=\"someval\",\n    secret_manager_id=default.id,\n    usage_scopes=[\n        harness.EncryptedTextUsageScopeArgs(\n            environment_filter_type=\"PRODUCTION_ENVIRONMENTS\",\n        ),\n        harness.EncryptedTextUsageScopeArgs(\n            environment_filter_type=\"NON_PRODUCTION_ENVIRONMENTS\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var example = new Harness.EncryptedText(\"example\", new()\n    {\n        Value = \"someval\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n        UsageScopes = new[]\n        {\n            new Harness.Inputs.EncryptedTextUsageScopeArgs\n            {\n                EnvironmentFilterType = \"PRODUCTION_ENVIRONMENTS\",\n            },\n            new Harness.Inputs.EncryptedTextUsageScopeArgs\n            {\n                EnvironmentFilterType = \"NON_PRODUCTION_ENVIRONMENTS\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewEncryptedText(ctx, \"example\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"someval\"),\n\t\t\tSecretManagerId: *pulumi.String(_default.Id),\n\t\t\tUsageScopes: harness.EncryptedTextUsageScopeArray{\n\t\t\t\t\u0026harness.EncryptedTextUsageScopeArgs{\n\t\t\t\t\tEnvironmentFilterType: pulumi.String(\"PRODUCTION_ENVIRONMENTS\"),\n\t\t\t\t},\n\t\t\t\t\u0026harness.EncryptedTextUsageScopeArgs{\n\t\t\t\t\tEnvironmentFilterType: pulumi.String(\"NON_PRODUCTION_ENVIRONMENTS\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.inputs.EncryptedTextUsageScopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var example = new EncryptedText(\"example\", EncryptedTextArgs.builder()        \n            .value(\"someval\")\n            .secretManagerId(default_.id())\n            .usageScopes(            \n                EncryptedTextUsageScopeArgs.builder()\n                    .environmentFilterType(\"PRODUCTION_ENVIRONMENTS\")\n                    .build(),\n                EncryptedTextUsageScopeArgs.builder()\n                    .environmentFilterType(\"NON_PRODUCTION_ENVIRONMENTS\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:EncryptedText\n    properties:\n      value: someval\n      secretManagerId: ${default.id}\n      usageScopes:\n        - environmentFilterType: PRODUCTION_ENVIRONMENTS\n        - environmentFilterType: NON_PRODUCTION_ENVIRONMENTS\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness encrypted text format. NOTEThe secret value cannot be decrypted and imported.\n\n```sh\n $ pulumi import harness:index/encryptedText:EncryptedText example \u003csecret_id\u003e\n```\n\n ",
            "properties": {
                "inheritScopesFromSecretManager": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not to inherit the usage scopes from the secret manager\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "scopedToAccount": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not the secret is scoped to the account\n"
                },
                "secretManagerId": {
                    "type": "string",
                    "description": "The id of the secret manager to associate the secret with. Once set, this field cannot be changed.\n"
                },
                "secretReference": {
                    "type": "string",
                    "description": "Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the secret.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "secretManagerId"
            ],
            "inputProperties": {
                "inheritScopesFromSecretManager": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not to inherit the usage scopes from the secret manager\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "scopedToAccount": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not the secret is scoped to the account\n"
                },
                "secretManagerId": {
                    "type": "string",
                    "description": "The id of the secret manager to associate the secret with. Once set, this field cannot be changed.\n",
                    "willReplaceOnChanges": true
                },
                "secretReference": {
                    "type": "string",
                    "description": "Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the secret.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "secretManagerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EncryptedText resources.\n",
                "properties": {
                    "inheritScopesFromSecretManager": {
                        "type": "boolean",
                        "description": "Boolean that indicates whether or not to inherit the usage scopes from the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the encrypted text secret\n"
                    },
                    "scopedToAccount": {
                        "type": "boolean",
                        "description": "Boolean that indicates whether or not the secret is scoped to the account\n"
                    },
                    "secretManagerId": {
                        "type": "string",
                        "description": "The id of the secret manager to associate the secret with. Once set, this field cannot be changed.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretReference": {
                        "type": "string",
                        "description": "Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the secret.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "harness:index/environment:Environment": {
            "description": "Resource for creating an environment\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst testApplication = new harness.Application(\"testApplication\", {});\nconst testKubernetes = new harness.service.Kubernetes(\"testKubernetes\", {\n    appId: testApplication.id,\n    helmVersion: \"V2\",\n    description: \"description\",\n    variables: [\n        {\n            name: \"test\",\n            value: \"test_value\",\n            type: \"TEXT\",\n        },\n        {\n            name: \"test2\",\n            value: \"test_value2\",\n            type: \"TEXT\",\n        },\n    ],\n});\nconst testEnvironment = new harness.Environment(\"testEnvironment\", {\n    appId: testApplication.id,\n    type: \"%[2]s\",\n    variableOverrides: [\n        {\n            serviceName: testKubernetes.name,\n            name: \"test\",\n            value: \"override\",\n            type: \"TEXT\",\n        },\n        {\n            serviceName: testKubernetes.name,\n            name: \"test2\",\n            value: \"override2\",\n            type: \"TEXT\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest_application = harness.Application(\"testApplication\")\ntest_kubernetes = harness.service.Kubernetes(\"testKubernetes\",\n    app_id=test_application.id,\n    helm_version=\"V2\",\n    description=\"description\",\n    variables=[\n        harness.service.KubernetesVariableArgs(\n            name=\"test\",\n            value=\"test_value\",\n            type=\"TEXT\",\n        ),\n        harness.service.KubernetesVariableArgs(\n            name=\"test2\",\n            value=\"test_value2\",\n            type=\"TEXT\",\n        ),\n    ])\ntest_environment = harness.Environment(\"testEnvironment\",\n    app_id=test_application.id,\n    type=\"%[2]s\",\n    variable_overrides=[\n        harness.EnvironmentVariableOverrideArgs(\n            service_name=test_kubernetes.name,\n            name=\"test\",\n            value=\"override\",\n            type=\"TEXT\",\n        ),\n        harness.EnvironmentVariableOverrideArgs(\n            service_name=test_kubernetes.name,\n            name=\"test2\",\n            value=\"override2\",\n            type=\"TEXT\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testApplication = new Harness.Application(\"testApplication\");\n\n    var testKubernetes = new Harness.Service.Kubernetes(\"testKubernetes\", new()\n    {\n        AppId = testApplication.Id,\n        HelmVersion = \"V2\",\n        Description = \"description\",\n        Variables = new[]\n        {\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test\",\n                Value = \"test_value\",\n                Type = \"TEXT\",\n            },\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test2\",\n                Value = \"test_value2\",\n                Type = \"TEXT\",\n            },\n        },\n    });\n\n    var testEnvironment = new Harness.Environment(\"testEnvironment\", new()\n    {\n        AppId = testApplication.Id,\n        Type = \"%[2]s\",\n        VariableOverrides = new[]\n        {\n            new Harness.Inputs.EnvironmentVariableOverrideArgs\n            {\n                ServiceName = testKubernetes.Name,\n                Name = \"test\",\n                Value = \"override\",\n                Type = \"TEXT\",\n            },\n            new Harness.Inputs.EnvironmentVariableOverrideArgs\n            {\n                ServiceName = testKubernetes.Name,\n                Name = \"test2\",\n                Value = \"override2\",\n                Type = \"TEXT\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestApplication, err := harness.NewApplication(ctx, \"testApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestKubernetes, err := service.NewKubernetes(ctx, \"testKubernetes\", \u0026service.KubernetesArgs{\n\t\t\tAppId:       testApplication.ID(),\n\t\t\tHelmVersion: pulumi.String(\"V2\"),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tVariables: service.KubernetesVariableArray{\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test2\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value2\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewEnvironment(ctx, \"testEnvironment\", \u0026harness.EnvironmentArgs{\n\t\t\tAppId: testApplication.ID(),\n\t\t\tType:  pulumi.String(\"%[2]s\"),\n\t\t\tVariableOverrides: harness.EnvironmentVariableOverrideArray{\n\t\t\t\t\u0026harness.EnvironmentVariableOverrideArgs{\n\t\t\t\t\tServiceName: testKubernetes.Name,\n\t\t\t\t\tName:        pulumi.String(\"test\"),\n\t\t\t\t\tValue:       pulumi.String(\"override\"),\n\t\t\t\t\tType:        pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t\t\u0026harness.EnvironmentVariableOverrideArgs{\n\t\t\t\t\tServiceName: testKubernetes.Name,\n\t\t\t\t\tName:        pulumi.String(\"test2\"),\n\t\t\t\t\tValue:       pulumi.String(\"override2\"),\n\t\t\t\t\tType:        pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Kubernetes;\nimport com.pulumi.harness.service.KubernetesArgs;\nimport com.pulumi.harness.service.inputs.KubernetesVariableArgs;\nimport com.pulumi.harness.Environment;\nimport com.pulumi.harness.EnvironmentArgs;\nimport com.pulumi.harness.inputs.EnvironmentVariableOverrideArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testApplication = new Application(\"testApplication\");\n\n        var testKubernetes = new Kubernetes(\"testKubernetes\", KubernetesArgs.builder()        \n            .appId(testApplication.id())\n            .helmVersion(\"V2\")\n            .description(\"description\")\n            .variables(            \n                KubernetesVariableArgs.builder()\n                    .name(\"test\")\n                    .value(\"test_value\")\n                    .type(\"TEXT\")\n                    .build(),\n                KubernetesVariableArgs.builder()\n                    .name(\"test2\")\n                    .value(\"test_value2\")\n                    .type(\"TEXT\")\n                    .build())\n            .build());\n\n        var testEnvironment = new Environment(\"testEnvironment\", EnvironmentArgs.builder()        \n            .appId(testApplication.id())\n            .type(\"%[2]s\")\n            .variableOverrides(            \n                EnvironmentVariableOverrideArgs.builder()\n                    .serviceName(testKubernetes.name())\n                    .name(\"test\")\n                    .value(\"override\")\n                    .type(\"TEXT\")\n                    .build(),\n                EnvironmentVariableOverrideArgs.builder()\n                    .serviceName(testKubernetes.name())\n                    .name(\"test2\")\n                    .value(\"override2\")\n                    .type(\"TEXT\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testApplication:\n    type: harness:Application\n  testKubernetes:\n    type: harness:service:Kubernetes\n    properties:\n      appId: ${testApplication.id}\n      helmVersion: V2\n      description: description\n      variables:\n        - name: test\n          value: test_value\n          type: TEXT\n        - name: test2\n          value: test_value2\n          type: TEXT\n  testEnvironment:\n    type: harness:Environment\n    properties:\n      appId: ${testApplication.id}\n      type: '%[2]s'\n      variableOverrides:\n        - serviceName: ${testKubernetes.name}\n          name: test\n          value: override\n          type: TEXT\n        - serviceName: ${testKubernetes.name}\n          name: test2\n          value: override2\n          type: TEXT\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and environment id.\n\n```sh\n $ pulumi import harness:index/environment:Environment dev \u003capplication_id\u003e/\u003cenvironment_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                },
                "variableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride"
                    },
                    "description": "Override for a service variable\n"
                }
            },
            "required": [
                "appId",
                "name",
                "type"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                },
                "variableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride"
                    },
                    "description": "Override for a service variable\n"
                }
            },
            "requiredInputs": [
                "appId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                    },
                    "variableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride"
                        },
                        "description": "Override for a service variable\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/gitConnector:GitConnector": {
            "description": "Resource for creating a git connector\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst exampleEncryptedText = new harness.EncryptedText(\"exampleEncryptedText\", {\n    value: \"foo\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst exampleGitConnector = new harness.GitConnector(\"exampleGitConnector\", {\n    url: \"https://github.com/harness/terraform-provider-harness\",\n    branch: \"master\",\n    generateWebhookUrl: true,\n    passwordSecretId: exampleEncryptedText.id,\n    urlType: \"REPO\",\n    username: \"someuser\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nexample_encrypted_text = harness.EncryptedText(\"exampleEncryptedText\",\n    value=\"foo\",\n    secret_manager_id=default.id)\nexample_git_connector = harness.GitConnector(\"exampleGitConnector\",\n    url=\"https://github.com/harness/terraform-provider-harness\",\n    branch=\"master\",\n    generate_webhook_url=True,\n    password_secret_id=example_encrypted_text.id,\n    url_type=\"REPO\",\n    username=\"someuser\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var exampleEncryptedText = new Harness.EncryptedText(\"exampleEncryptedText\", new()\n    {\n        Value = \"foo\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var exampleGitConnector = new Harness.GitConnector(\"exampleGitConnector\", new()\n    {\n        Url = \"https://github.com/harness/terraform-provider-harness\",\n        Branch = \"master\",\n        GenerateWebhookUrl = true,\n        PasswordSecretId = exampleEncryptedText.Id,\n        UrlType = \"REPO\",\n        Username = \"someuser\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEncryptedText, err := harness.NewEncryptedText(ctx, \"exampleEncryptedText\", \u0026harness.EncryptedTextArgs{\n\t\t\tValue:           pulumi.String(\"foo\"),\n\t\t\tSecretManagerId: *pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewGitConnector(ctx, \"exampleGitConnector\", \u0026harness.GitConnectorArgs{\n\t\t\tUrl:                pulumi.String(\"https://github.com/harness/terraform-provider-harness\"),\n\t\t\tBranch:             pulumi.String(\"master\"),\n\t\t\tGenerateWebhookUrl: pulumi.Bool(true),\n\t\t\tPasswordSecretId:   exampleEncryptedText.ID(),\n\t\t\tUrlType:            pulumi.String(\"REPO\"),\n\t\t\tUsername:           pulumi.String(\"someuser\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.GitConnector;\nimport com.pulumi.harness.GitConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var exampleEncryptedText = new EncryptedText(\"exampleEncryptedText\", EncryptedTextArgs.builder()        \n            .value(\"foo\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var exampleGitConnector = new GitConnector(\"exampleGitConnector\", GitConnectorArgs.builder()        \n            .url(\"https://github.com/harness/terraform-provider-harness\")\n            .branch(\"master\")\n            .generateWebhookUrl(true)\n            .passwordSecretId(exampleEncryptedText.id())\n            .urlType(\"REPO\")\n            .username(\"someuser\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleEncryptedText:\n    type: harness:EncryptedText\n    properties:\n      value: foo\n      secretManagerId: ${default.id}\n  exampleGitConnector:\n    type: harness:GitConnector\n    properties:\n      url: https://github.com/harness/terraform-provider-harness\n      branch: master\n      generateWebhookUrl: true\n      passwordSecretId: ${exampleEncryptedText.id}\n      urlType: REPO\n      username: someuser\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness git connector id\n\n```sh\n $ pulumi import harness:index/gitConnector:GitConnector example \u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The branch of the git connector to use\n"
                },
                "commitDetails": {
                    "$ref": "#/types/harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails",
                    "description": "Custom details to use when making commits using this git connector\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The time the git connector was created\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to apply to this git connector.\n"
                },
                "generateWebhookUrl": {
                    "type": "boolean",
                    "description": "Boolean indicating whether or not to generate a webhook url.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the git connector.\n"
                },
                "passwordSecretId": {
                    "type": "string",
                    "description": "The id of the secret for connecting to the git repository.\n"
                },
                "sshSettingId": {
                    "type": "string",
                    "description": "The id of the SSH secret to use\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the git repository or account/organization\n"
                },
                "urlType": {
                    "type": "string",
                    "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO.`\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/GitConnectorUsageScope:GitConnectorUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user used to connect to the git repository\n"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "The generated webhook url\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "url",
                "urlType",
                "webhookUrl"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The branch of the git connector to use\n"
                },
                "commitDetails": {
                    "$ref": "#/types/harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails",
                    "description": "Custom details to use when making commits using this git connector\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to apply to this git connector.\n"
                },
                "generateWebhookUrl": {
                    "type": "boolean",
                    "description": "Boolean indicating whether or not to generate a webhook url.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the git connector.\n"
                },
                "passwordSecretId": {
                    "type": "string",
                    "description": "The id of the secret for connecting to the git repository.\n"
                },
                "sshSettingId": {
                    "type": "string",
                    "description": "The id of the SSH secret to use\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the git repository or account/organization\n"
                },
                "urlType": {
                    "type": "string",
                    "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO.`\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/GitConnectorUsageScope:GitConnectorUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user used to connect to the git repository\n"
                }
            },
            "requiredInputs": [
                "url",
                "urlType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitConnector resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch of the git connector to use\n"
                    },
                    "commitDetails": {
                        "$ref": "#/types/harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails",
                        "description": "Custom details to use when making commits using this git connector\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The time the git connector was created\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Delegate selectors to apply to this git connector.\n"
                    },
                    "generateWebhookUrl": {
                        "type": "boolean",
                        "description": "Boolean indicating whether or not to generate a webhook url.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the git connector.\n"
                    },
                    "passwordSecretId": {
                        "type": "string",
                        "description": "The id of the secret for connecting to the git repository.\n"
                    },
                    "sshSettingId": {
                        "type": "string",
                        "description": "The id of the SSH secret to use\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the git repository or account/organization\n"
                    },
                    "urlType": {
                        "type": "string",
                        "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO.`\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/GitConnectorUsageScope:GitConnectorUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of the user used to connect to the git repository\n"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "The generated webhook url\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/infrastructureDefinition:InfrastructureDefinition": {
            "description": "Resource for creating am infrastructure definition. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Creating a Kubernetes infrastructure definition\nconst devKubernetes = new harness.cloudprovider.Kubernetes(\"devKubernetes\", {authentication: {\n    delegateSelectors: [\"k8s\"],\n}});\nconst example = new harness.Application(\"example\", {});\nconst devEnvironment = new harness.Environment(\"devEnvironment\", {\n    appId: example.id,\n    type: \"NON_PROD\",\n});\n// Creating a infrastructure of type KUBERNETES\nconst k8s = new harness.InfrastructureDefinition(\"k8s\", {\n    appId: example.id,\n    envId: devEnvironment.id,\n    cloudProviderType: \"KUBERNETES_CLUSTER\",\n    deploymentType: \"KUBERNETES\",\n    kubernetes: {\n        cloudProviderName: devKubernetes.name,\n        namespace: \"dev\",\n        releaseName: \"${service.name}\",\n    },\n});\n// Creating a Deployment Template for CUSTOM infrastructure type\nconst exampleYaml = new harness.YamlConfig(\"exampleYaml\", {\n    path: \"Setup/Template Library/Example Folder/deployment_template.yaml\",\n    content: `harnessApiVersion: '1.0'\ntype: CUSTOM_DEPLOYMENT_TYPE\nfetchInstanceScript: |-\n  set -ex\n  curl http://${url}/${file_name} \u003e ${INSTANCE_OUTPUT_PATH}\nhostAttributes:\n  hostname: host\nhostObjectArrayPath: hosts\nvariables:\n- name: url\n- name: file_name\n`,\n});\n// Creating a infrastructure of type CUSTOM\nconst custom = new harness.InfrastructureDefinition(\"custom\", {\n    appId: example.id,\n    envId: devEnvironment.id,\n    cloudProviderType: \"CUSTOM\",\n    deploymentType: \"CUSTOM\",\n    deploymentTemplateUri: pulumi.interpolate`Example Folder/${exampleYaml.name}`,\n    custom: {\n        deploymentTypeTemplateVersion: \"1\",\n        variables: [\n            {\n                name: \"url\",\n                value: \"localhost:8081\",\n            },\n            {\n                name: \"file_name\",\n                value: \"instances.json\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Creating a Kubernetes infrastructure definition\ndev_kubernetes = harness.cloudprovider.Kubernetes(\"devKubernetes\", authentication=harness.cloudprovider.KubernetesAuthenticationArgs(\n    delegate_selectors=[\"k8s\"],\n))\nexample = harness.Application(\"example\")\ndev_environment = harness.Environment(\"devEnvironment\",\n    app_id=example.id,\n    type=\"NON_PROD\")\n# Creating a infrastructure of type KUBERNETES\nk8s = harness.InfrastructureDefinition(\"k8s\",\n    app_id=example.id,\n    env_id=dev_environment.id,\n    cloud_provider_type=\"KUBERNETES_CLUSTER\",\n    deployment_type=\"KUBERNETES\",\n    kubernetes=harness.InfrastructureDefinitionKubernetesArgs(\n        cloud_provider_name=dev_kubernetes.name,\n        namespace=\"dev\",\n        release_name=\"${service.name}\",\n    ))\n# Creating a Deployment Template for CUSTOM infrastructure type\nexample_yaml = harness.YamlConfig(\"exampleYaml\",\n    path=\"Setup/Template Library/Example Folder/deployment_template.yaml\",\n    content=f\"\"\"harnessApiVersion: '1.0'\ntype: CUSTOM_DEPLOYMENT_TYPE\nfetchInstanceScript: |-\n  set -ex\n  curl http://{url}/{file_name} \u003e {instanc_e__outpu_t__path}\nhostAttributes:\n  hostname: host\nhostObjectArrayPath: hosts\nvariables:\n- name: url\n- name: file_name\n\"\"\")\n# Creating a infrastructure of type CUSTOM\ncustom = harness.InfrastructureDefinition(\"custom\",\n    app_id=example.id,\n    env_id=dev_environment.id,\n    cloud_provider_type=\"CUSTOM\",\n    deployment_type=\"CUSTOM\",\n    deployment_template_uri=example_yaml.name.apply(lambda name: f\"Example Folder/{name}\"),\n    custom=harness.InfrastructureDefinitionCustomArgs(\n        deployment_type_template_version=\"1\",\n        variables=[\n            harness.InfrastructureDefinitionCustomVariableArgs(\n                name=\"url\",\n                value=\"localhost:8081\",\n            ),\n            harness.InfrastructureDefinitionCustomVariableArgs(\n                name=\"file_name\",\n                value=\"instances.json\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Creating a Kubernetes infrastructure definition\n    var devKubernetes = new Harness.Cloudprovider.Kubernetes(\"devKubernetes\", new()\n    {\n        Authentication = new Harness.Cloudprovider.Inputs.KubernetesAuthenticationArgs\n        {\n            DelegateSelectors = new[]\n            {\n                \"k8s\",\n            },\n        },\n    });\n\n    var example = new Harness.Application(\"example\");\n\n    var devEnvironment = new Harness.Environment(\"devEnvironment\", new()\n    {\n        AppId = example.Id,\n        Type = \"NON_PROD\",\n    });\n\n    // Creating a infrastructure of type KUBERNETES\n    var k8s = new Harness.InfrastructureDefinition(\"k8s\", new()\n    {\n        AppId = example.Id,\n        EnvId = devEnvironment.Id,\n        CloudProviderType = \"KUBERNETES_CLUSTER\",\n        DeploymentType = \"KUBERNETES\",\n        Kubernetes = new Harness.Inputs.InfrastructureDefinitionKubernetesArgs\n        {\n            CloudProviderName = devKubernetes.Name,\n            Namespace = \"dev\",\n            ReleaseName = \"${service.name}\",\n        },\n    });\n\n    // Creating a Deployment Template for CUSTOM infrastructure type\n    var exampleYaml = new Harness.YamlConfig(\"exampleYaml\", new()\n    {\n        Path = \"Setup/Template Library/Example Folder/deployment_template.yaml\",\n        Content = @$\"harnessApiVersion: '1.0'\ntype: CUSTOM_DEPLOYMENT_TYPE\nfetchInstanceScript: |-\n  set -ex\n  curl http://{url}/{file_name} \u003e {INSTANCE_OUTPUT_PATH}\nhostAttributes:\n  hostname: host\nhostObjectArrayPath: hosts\nvariables:\n- name: url\n- name: file_name\n\",\n    });\n\n    // Creating a infrastructure of type CUSTOM\n    var custom = new Harness.InfrastructureDefinition(\"custom\", new()\n    {\n        AppId = example.Id,\n        EnvId = devEnvironment.Id,\n        CloudProviderType = \"CUSTOM\",\n        DeploymentType = \"CUSTOM\",\n        DeploymentTemplateUri = exampleYaml.Name.Apply(name =\u003e $\"Example Folder/{name}\"),\n        Custom = new Harness.Inputs.InfrastructureDefinitionCustomArgs\n        {\n            DeploymentTypeTemplateVersion = \"1\",\n            Variables = new[]\n            {\n                new Harness.Inputs.InfrastructureDefinitionCustomVariableArgs\n                {\n                    Name = \"url\",\n                    Value = \"localhost:8081\",\n                },\n                new Harness.Inputs.InfrastructureDefinitionCustomVariableArgs\n                {\n                    Name = \"file_name\",\n                    Value = \"instances.json\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdevKubernetes, err := cloudprovider.NewKubernetes(ctx, \"devKubernetes\", \u0026cloudprovider.KubernetesArgs{\n\t\t\tAuthentication: \u0026cloudprovider.KubernetesAuthenticationArgs{\n\t\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"k8s\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := harness.NewApplication(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdevEnvironment, err := harness.NewEnvironment(ctx, \"devEnvironment\", \u0026harness.EnvironmentArgs{\n\t\t\tAppId: example.ID(),\n\t\t\tType:  pulumi.String(\"NON_PROD\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewInfrastructureDefinition(ctx, \"k8s\", \u0026harness.InfrastructureDefinitionArgs{\n\t\t\tAppId:             example.ID(),\n\t\t\tEnvId:             devEnvironment.ID(),\n\t\t\tCloudProviderType: pulumi.String(\"KUBERNETES_CLUSTER\"),\n\t\t\tDeploymentType:    pulumi.String(\"KUBERNETES\"),\n\t\t\tKubernetes: \u0026harness.InfrastructureDefinitionKubernetesArgs{\n\t\t\t\tCloudProviderName: devKubernetes.Name,\n\t\t\t\tNamespace:         pulumi.String(\"dev\"),\n\t\t\t\tReleaseName:       pulumi.String(\"${service.name}\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleYaml, err := harness.NewYamlConfig(ctx, \"exampleYaml\", \u0026harness.YamlConfigArgs{\n\t\t\tPath: pulumi.String(\"Setup/Template Library/Example Folder/deployment_template.yaml\"),\n\t\t\tContent: pulumi.String(fmt.Sprintf(`harnessApiVersion: '1.0'\ntype: CUSTOM_DEPLOYMENT_TYPE\nfetchInstanceScript: |-\n  set -ex\n  curl http://%v/%v \u003e %v\nhostAttributes:\n  hostname: host\nhostObjectArrayPath: hosts\nvariables:\n- name: url\n- name: file_name\n`, url, file_name, INSTANCE_OUTPUT_PATH)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewInfrastructureDefinition(ctx, \"custom\", \u0026harness.InfrastructureDefinitionArgs{\n\t\t\tAppId:             example.ID(),\n\t\t\tEnvId:             devEnvironment.ID(),\n\t\t\tCloudProviderType: pulumi.String(\"CUSTOM\"),\n\t\t\tDeploymentType:    pulumi.String(\"CUSTOM\"),\n\t\t\tDeploymentTemplateUri: exampleYaml.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"Example Folder/%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tCustom: \u0026harness.InfrastructureDefinitionCustomArgs{\n\t\t\t\tDeploymentTypeTemplateVersion: pulumi.String(\"1\"),\n\t\t\t\tVariables: harness.InfrastructureDefinitionCustomVariableArray{\n\t\t\t\t\t\u0026harness.InfrastructureDefinitionCustomVariableArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"url\"),\n\t\t\t\t\t\tValue: pulumi.String(\"localhost:8081\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026harness.InfrastructureDefinitionCustomVariableArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"file_name\"),\n\t\t\t\t\t\tValue: pulumi.String(\"instances.json\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.cloudprovider.Kubernetes;\nimport com.pulumi.harness.cloudprovider.KubernetesArgs;\nimport com.pulumi.harness.cloudprovider.inputs.KubernetesAuthenticationArgs;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.Environment;\nimport com.pulumi.harness.EnvironmentArgs;\nimport com.pulumi.harness.InfrastructureDefinition;\nimport com.pulumi.harness.InfrastructureDefinitionArgs;\nimport com.pulumi.harness.inputs.InfrastructureDefinitionKubernetesArgs;\nimport com.pulumi.harness.YamlConfig;\nimport com.pulumi.harness.YamlConfigArgs;\nimport com.pulumi.harness.inputs.InfrastructureDefinitionCustomArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var devKubernetes = new Kubernetes(\"devKubernetes\", KubernetesArgs.builder()        \n            .authentication(KubernetesAuthenticationArgs.builder()\n                .delegateSelectors(\"k8s\")\n                .build())\n            .build());\n\n        var example = new Application(\"example\");\n\n        var devEnvironment = new Environment(\"devEnvironment\", EnvironmentArgs.builder()        \n            .appId(example.id())\n            .type(\"NON_PROD\")\n            .build());\n\n        var k8s = new InfrastructureDefinition(\"k8s\", InfrastructureDefinitionArgs.builder()        \n            .appId(example.id())\n            .envId(devEnvironment.id())\n            .cloudProviderType(\"KUBERNETES_CLUSTER\")\n            .deploymentType(\"KUBERNETES\")\n            .kubernetes(InfrastructureDefinitionKubernetesArgs.builder()\n                .cloudProviderName(devKubernetes.name())\n                .namespace(\"dev\")\n                .releaseName(\"${service.name}\")\n                .build())\n            .build());\n\n        var exampleYaml = new YamlConfig(\"exampleYaml\", YamlConfigArgs.builder()        \n            .path(\"Setup/Template Library/Example Folder/deployment_template.yaml\")\n            .content(\"\"\"\nharnessApiVersion: '1.0'\ntype: CUSTOM_DEPLOYMENT_TYPE\nfetchInstanceScript: |-\n  set -ex\n  curl http://%s/%s \u003e %s\nhostAttributes:\n  hostname: host\nhostObjectArrayPath: hosts\nvariables:\n- name: url\n- name: file_name\n\", url,file_name,INSTANCE_OUTPUT_PATH))\n            .build());\n\n        var custom = new InfrastructureDefinition(\"custom\", InfrastructureDefinitionArgs.builder()        \n            .appId(example.id())\n            .envId(devEnvironment.id())\n            .cloudProviderType(\"CUSTOM\")\n            .deploymentType(\"CUSTOM\")\n            .deploymentTemplateUri(exampleYaml.name().applyValue(name -\u003e String.format(\"Example Folder/%s\", name)))\n            .custom(InfrastructureDefinitionCustomArgs.builder()\n                .deploymentTypeTemplateVersion(\"1\")\n                .variables(                \n                    InfrastructureDefinitionCustomVariableArgs.builder()\n                        .name(\"url\")\n                        .value(\"localhost:8081\")\n                        .build(),\n                    InfrastructureDefinitionCustomVariableArgs.builder()\n                        .name(\"file_name\")\n                        .value(\"instances.json\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Creating a Kubernetes infrastructure definition\n  devKubernetes:\n    type: harness:cloudprovider:Kubernetes\n    properties:\n      authentication:\n        delegateSelectors:\n          - k8s\n  example:\n    type: harness:Application\n  devEnvironment:\n    type: harness:Environment\n    properties:\n      appId: ${example.id}\n      type: NON_PROD\n  # Creating a infrastructure of type KUBERNETES\n  k8s:\n    type: harness:InfrastructureDefinition\n    properties:\n      appId: ${example.id}\n      envId: ${devEnvironment.id}\n      cloudProviderType: KUBERNETES_CLUSTER\n      deploymentType: KUBERNETES\n      kubernetes:\n        cloudProviderName: ${devKubernetes.name}\n        namespace: dev\n        releaseName: ${service.name}\n  # Creating a Deployment Template for CUSTOM infrastructure type\n  exampleYaml:\n    type: harness:YamlConfig\n    properties:\n      path: Setup/Template Library/Example Folder/deployment_template.yaml\n      content: |\n        harnessApiVersion: '1.0'\n        type: CUSTOM_DEPLOYMENT_TYPE\n        fetchInstanceScript: |-\n          set -ex\n          curl http://${url}/${file_name} \u003e ${INSTANCE_OUTPUT_PATH}\n        hostAttributes:\n          hostname: host\n        hostObjectArrayPath: hosts\n        variables:\n        - name: url\n        - name: file_name\n  # Creating a infrastructure of type CUSTOM\n  custom:\n    type: harness:InfrastructureDefinition\n    properties:\n      appId: ${example.id}\n      envId: ${devEnvironment.id}\n      cloudProviderType: CUSTOM\n      deploymentType: CUSTOM\n      deploymentTemplateUri: Example Folder/${exampleYaml.name}\n      custom:\n        deploymentTypeTemplateVersion: '1'\n        variables:\n          - name: url\n            value: localhost:8081\n          - name: file_name\n            value: instances.json\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id, environment id, and infrastructure definition id\n\n```sh\n $ pulumi import harness:index/infrastructureDefinition:InfrastructureDefinition example \u003capp_id\u003e/\u003cenv_id\u003e/\u003cinfradef_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the infrastructure definition belongs to.\n"
                },
                "awsAmi": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsEcs": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsLambda": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda",
                    "description": "The configuration details for Aws Lambda deployments.\n"
                },
                "awsSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh",
                    "description": "The configuration details for AWS SSH deployments.\n"
                },
                "awsWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm",
                    "description": "The configuration details for AWS WinRM deployments.\n"
                },
                "azureVmss": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss",
                    "description": "The configuration details for Azure VMSS deployments.\n"
                },
                "azureWebapp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp",
                    "description": "The configuration details for Azure WebApp deployments.\n"
                },
                "cloudProviderType": {
                    "type": "string",
                    "description": "The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST\n"
                },
                "custom": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionCustom:InfrastructureDefinitionCustom",
                    "description": "The configuration details for Custom deployments.\n"
                },
                "datacenterSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh",
                    "description": "The configuration details for SSH datacenter deployments.\n"
                },
                "datacenterWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm",
                    "description": "The configuration details for WinRM datacenter deployments.\n"
                },
                "deploymentTemplateUri": {
                    "type": "string",
                    "description": "The URI of the deployment template to use. Only used if deployment_type is `CUSTOM`.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM\n"
                },
                "envId": {
                    "type": "string",
                    "description": "The id of the environment the infrastructure definition belongs to.\n"
                },
                "kubernetes": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes",
                    "description": "The configuration details for Kubernetes deployments.\n"
                },
                "kubernetesGcp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp",
                    "description": "The configuration details for Kubernetes on GCP deployments.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the infrastructure definition\n"
                },
                "provisionerName": {
                    "type": "string",
                    "description": "The name of the infrastructure provisioner to use.\n"
                },
                "scopedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of service names to scope this infrastructure definition to.\n"
                },
                "tanzu": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu",
                    "description": "The configuration details for PCF deployments.\n"
                }
            },
            "required": [
                "appId",
                "cloudProviderType",
                "deploymentType",
                "envId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the infrastructure definition belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "awsAmi": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsEcs": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsLambda": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda",
                    "description": "The configuration details for Aws Lambda deployments.\n"
                },
                "awsSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh",
                    "description": "The configuration details for AWS SSH deployments.\n"
                },
                "awsWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm",
                    "description": "The configuration details for AWS WinRM deployments.\n"
                },
                "azureVmss": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss",
                    "description": "The configuration details for Azure VMSS deployments.\n"
                },
                "azureWebapp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp",
                    "description": "The configuration details for Azure WebApp deployments.\n"
                },
                "cloudProviderType": {
                    "type": "string",
                    "description": "The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST\n"
                },
                "custom": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionCustom:InfrastructureDefinitionCustom",
                    "description": "The configuration details for Custom deployments.\n"
                },
                "datacenterSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh",
                    "description": "The configuration details for SSH datacenter deployments.\n"
                },
                "datacenterWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm",
                    "description": "The configuration details for WinRM datacenter deployments.\n"
                },
                "deploymentTemplateUri": {
                    "type": "string",
                    "description": "The URI of the deployment template to use. Only used if deployment_type is `CUSTOM`.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM\n"
                },
                "envId": {
                    "type": "string",
                    "description": "The id of the environment the infrastructure definition belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "kubernetes": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes",
                    "description": "The configuration details for Kubernetes deployments.\n"
                },
                "kubernetesGcp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp",
                    "description": "The configuration details for Kubernetes on GCP deployments.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the infrastructure definition\n",
                    "willReplaceOnChanges": true
                },
                "provisionerName": {
                    "type": "string",
                    "description": "The name of the infrastructure provisioner to use.\n"
                },
                "scopedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of service names to scope this infrastructure definition to.\n"
                },
                "tanzu": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu",
                    "description": "The configuration details for PCF deployments.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "cloudProviderType",
                "deploymentType",
                "envId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InfrastructureDefinition resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the infrastructure definition belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "awsAmi": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi",
                        "description": "The configuration details for Aws AMI deployments.\n"
                    },
                    "awsEcs": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs",
                        "description": "The configuration details for Aws AMI deployments.\n"
                    },
                    "awsLambda": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda",
                        "description": "The configuration details for Aws Lambda deployments.\n"
                    },
                    "awsSsh": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh",
                        "description": "The configuration details for AWS SSH deployments.\n"
                    },
                    "awsWinrm": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm",
                        "description": "The configuration details for AWS WinRM deployments.\n"
                    },
                    "azureVmss": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss",
                        "description": "The configuration details for Azure VMSS deployments.\n"
                    },
                    "azureWebapp": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp",
                        "description": "The configuration details for Azure WebApp deployments.\n"
                    },
                    "cloudProviderType": {
                        "type": "string",
                        "description": "The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST\n"
                    },
                    "custom": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionCustom:InfrastructureDefinitionCustom",
                        "description": "The configuration details for Custom deployments.\n"
                    },
                    "datacenterSsh": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh",
                        "description": "The configuration details for SSH datacenter deployments.\n"
                    },
                    "datacenterWinrm": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm",
                        "description": "The configuration details for WinRM datacenter deployments.\n"
                    },
                    "deploymentTemplateUri": {
                        "type": "string",
                        "description": "The URI of the deployment template to use. Only used if deployment_type is `CUSTOM`.\n"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM\n"
                    },
                    "envId": {
                        "type": "string",
                        "description": "The id of the environment the infrastructure definition belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "kubernetes": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes",
                        "description": "The configuration details for Kubernetes deployments.\n"
                    },
                    "kubernetesGcp": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp",
                        "description": "The configuration details for Kubernetes on GCP deployments.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the infrastructure definition\n",
                        "willReplaceOnChanges": true
                    },
                    "provisionerName": {
                        "type": "string",
                        "description": "The name of the infrastructure provisioner to use.\n"
                    },
                    "scopedServices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of service names to scope this infrastructure definition to.\n"
                    },
                    "tanzu": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu",
                        "description": "The configuration details for PCF deployments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/sshCredential:SshCredential": {
            "description": "Resource for creating an encrypted text secret\n\n\n## Import\n\nImport using the Harness ssh credential id\n\n```sh\n $ pulumi import harness:index/sshCredential:SshCredential example \u003ccredential_id\u003e\n```\n\n ",
            "properties": {
                "kerberosAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication",
                    "description": "Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "sshAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication",
                    "description": "Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inline_ssh`, `server_password`, or `ssh_key_file` should be set\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/SshCredentialUsageScope:SshCredentialUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "kerberosAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication",
                    "description": "Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "sshAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication",
                    "description": "Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inline_ssh`, `server_password`, or `ssh_key_file` should be set\n",
                    "willReplaceOnChanges": true
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/SshCredentialUsageScope:SshCredentialUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshCredential resources.\n",
                "properties": {
                    "kerberosAuthentication": {
                        "$ref": "#/types/harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication",
                        "description": "Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the encrypted text secret\n"
                    },
                    "sshAuthentication": {
                        "$ref": "#/types/harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication",
                        "description": "Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inline_ssh`, `server_password`, or `ssh_key_file` should be set\n",
                        "willReplaceOnChanges": true
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/SshCredentialUsageScope:SshCredentialUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/user:User": {
            "description": "Resource for creating a Harness user\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst johnDoe = new harness.User(\"johnDoe\", {email: \"john.doe@example.com\"});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\njohn_doe = harness.User(\"johnDoe\", email=\"john.doe@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var johnDoe = new Harness.User(\"johnDoe\", new()\n    {\n        Email = \"john.doe@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewUser(ctx, \"johnDoe\", \u0026harness.UserArgs{\n\t\t\tEmail: pulumi.String(\"john.doe@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.User;\nimport com.pulumi.harness.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var johnDoe = new User(\"johnDoe\", UserArgs.builder()        \n            .email(\"john.doe@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  johnDoe:\n    type: harness:User\n    properties:\n      email: john.doe@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the email address of the user\n\n```sh\n $ pulumi import harness:index/user:User john_doe john.doe@example.com\n```\n\n ",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [\"group_ids\"] }`.\n"
                },
                "isEmailVerified": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the users email has been verified.\n"
                },
                "isImportedFromIdentityProvider": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the user was imported from an identity provider.\n"
                },
                "isPasswordExpired": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the users password has expired.\n"
                },
                "isTwoFactorAuthEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not two-factor authentication is enabled for the user.\n"
                },
                "isUserLocked": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the user is locked out.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "required": [
                "email",
                "isEmailVerified",
                "isImportedFromIdentityProvider",
                "isPasswordExpired",
                "isTwoFactorAuthEnabled",
                "isUserLocked",
                "name"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n",
                    "willReplaceOnChanges": true
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [\"group_ids\"] }`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [\"group_ids\"] }`.\n"
                    },
                    "isEmailVerified": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the users email has been verified.\n"
                    },
                    "isImportedFromIdentityProvider": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the user was imported from an identity provider.\n"
                    },
                    "isPasswordExpired": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the users password has expired.\n"
                    },
                    "isTwoFactorAuthEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not two-factor authentication is enabled for the user.\n"
                    },
                    "isUserLocked": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the user is locked out.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/userGroup:UserGroup": {
            "description": "Resource for creating a Harness user group\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.UserGroup;\nimport com.pulumi.harness.UserGroupArgs;\nimport com.pulumi.harness.inputs.UserGroupPermissionsArgs;\nimport com.pulumi.harness.inputs.UserGroupPermissionsAppPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new UserGroup(\"example\", UserGroupArgs.builder()        \n            .description(\"This group demonstrates account level and resource level permissions.\")\n            .permissions(UserGroupPermissionsArgs.builder()\n                .accountPermissions(                \n                    \"ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\",\n                    \"MANAGE_API_KEYS\")\n                .appPermissions(UserGroupPermissionsAppPermissionsArgs.builder()\n                    .all(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .deployment(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .environment(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .pipeline(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .provisioner(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .service(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .template(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .workflow(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:UserGroup\n    properties:\n      description: This group demonstrates account level and resource level permissions.\n      permissions:\n        accountPermissions:\n          - ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\n          - MANAGE_API_KEYS\n        appPermissions:\n          all:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n          deployment:\n            - actions:\n                - READ\n                - ROLLBACK_WORKFLOW\n                - EXECUTE_PIPELINE\n                - EXECUTE_WORKFLOW\n              filters:\n                - NON_PRODUCTION_ENVIRONMENTS\n            - actions:\n                - READ\n              filters:\n                - PRODUCTION_ENVIRONMENTS\n          environment:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n              filters:\n                - NON_PRODUCTION_ENVIRONMENTS\n            - actions:\n                - READ\n              filters:\n                - PRODUCTION_ENVIRONMENTS\n          pipeline:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n              filters:\n                - NON_PRODUCTION_PIPELINES\n            - actions:\n                - READ\n              filters:\n                - PRODUCTION_PIPELINES\n          provisioner:\n            - actions:\n                - UPDATE\n                - DELETE\n            - actions:\n                - CREATE\n                - READ\n          service:\n            - actions:\n                - UPDATE\n                - DELETE\n            - actions:\n                - UPDATE\n                - DELETE\n          template:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n          workflow:\n            - actions:\n                - UPDATE\n                - DELETE\n              filters:\n                - NON_PRODUCTION_WORKFLOWS\n            - actions:\n                - CREATE\n                - READ\n              filters:\n                - PRODUCTION_WORKFLOWS\n                - WORKFLOW_TEMPLATES\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the id of the user group\n\n```sh\n $ pulumi import harness:index/userGroup:UserGroup example \u003cUSER_GROUP_ID\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the user group.\n"
                },
                "importedByScim": {
                    "type": "boolean",
                    "description": "Indicates whether the user group was imported by SCIM.\n"
                },
                "isSsoLinked": {
                    "type": "boolean",
                    "description": "Indicates whether the user group is linked to an SSO provider.\n"
                },
                "ldapSettings": {
                    "$ref": "#/types/harness:index/UserGroupLdapSettings:UserGroupLdapSettings",
                    "description": "The LDAP settings for the user group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group.\n"
                },
                "notificationSettings": {
                    "$ref": "#/types/harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings",
                    "description": "The notification settings of the user group.\n"
                },
                "permissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissions:UserGroupPermissions",
                    "description": "The permissions of the user group.\n"
                },
                "samlSettings": {
                    "$ref": "#/types/harness:index/UserGroupSamlSettings:UserGroupSamlSettings",
                    "description": "The SAML settings for the user group.\n"
                }
            },
            "required": [
                "importedByScim",
                "isSsoLinked",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the user group.\n",
                    "willReplaceOnChanges": true
                },
                "ldapSettings": {
                    "$ref": "#/types/harness:index/UserGroupLdapSettings:UserGroupLdapSettings",
                    "description": "The LDAP settings for the user group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group.\n",
                    "willReplaceOnChanges": true
                },
                "notificationSettings": {
                    "$ref": "#/types/harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings",
                    "description": "The notification settings of the user group.\n"
                },
                "permissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissions:UserGroupPermissions",
                    "description": "The permissions of the user group.\n"
                },
                "samlSettings": {
                    "$ref": "#/types/harness:index/UserGroupSamlSettings:UserGroupSamlSettings",
                    "description": "The SAML settings for the user group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the user group.\n",
                        "willReplaceOnChanges": true
                    },
                    "importedByScim": {
                        "type": "boolean",
                        "description": "Indicates whether the user group was imported by SCIM.\n"
                    },
                    "isSsoLinked": {
                        "type": "boolean",
                        "description": "Indicates whether the user group is linked to an SSO provider.\n"
                    },
                    "ldapSettings": {
                        "$ref": "#/types/harness:index/UserGroupLdapSettings:UserGroupLdapSettings",
                        "description": "The LDAP settings for the user group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n",
                        "willReplaceOnChanges": true
                    },
                    "notificationSettings": {
                        "$ref": "#/types/harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings",
                        "description": "The notification settings of the user group.\n"
                    },
                    "permissions": {
                        "$ref": "#/types/harness:index/UserGroupPermissions:UserGroupPermissions",
                        "description": "The permissions of the user group.\n"
                    },
                    "samlSettings": {
                        "$ref": "#/types/harness:index/UserGroupSamlSettings:UserGroupSamlSettings",
                        "description": "The SAML settings for the user group.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/userGroupPermissions:UserGroupPermissions": {
            "description": "Resource for adding permissions to an existing Harness user group.\n",
            "properties": {
                "accountPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                },
                "appPermissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                    "description": "Application specific permissions\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "Unique identifier of the user group.\n"
                }
            },
            "required": [
                "userGroupId"
            ],
            "inputProperties": {
                "accountPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                },
                "appPermissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                    "description": "Application specific permissions\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "Unique identifier of the user group.\n"
                }
            },
            "requiredInputs": [
                "userGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroupPermissions resources.\n",
                "properties": {
                    "accountPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                    },
                    "appPermissions": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                        "description": "Application specific permissions\n"
                    },
                    "userGroupId": {
                        "type": "string",
                        "description": "Unique identifier of the user group.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/yamlConfig:YamlConfig": {
            "description": "Resource for creating a raw YAML configuration in Harness. Note: This works for all objects EXCEPT application objects. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.YamlConfig(\"test\", {\n    content: `harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n\n`,\n    path: \"Setup/Cloud Providers/Kubernetes.yaml\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.YamlConfig(\"test\",\n    content=\"\"\"harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n\n\"\"\",\n    path=\"Setup/Cloud Providers/Kubernetes.yaml\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.YamlConfig(\"test\", new()\n    {\n        Content = @\"harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n\n\",\n        Path = \"Setup/Cloud Providers/Kubernetes.yaml\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewYamlConfig(ctx, \"test\", \u0026harness.YamlConfigArgs{\n\t\t\tContent: pulumi.String(\"harnessApiVersion: '1.0'\\ntype: KUBERNETES_CLUSTER\\ndelegateSelectors:\\n- k8s\\nskipValidation: true\\nuseKubernetesDelegate: true\\n\\n\"),\n\t\t\tPath:    pulumi.String(\"Setup/Cloud Providers/Kubernetes.yaml\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.YamlConfig;\nimport com.pulumi.harness.YamlConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new YamlConfig(\"test\", YamlConfigArgs.builder()        \n            .content(\"\"\"\nharnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n\n            \"\"\")\n            .path(\"Setup/Cloud Providers/Kubernetes.yaml\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:YamlConfig\n    properties:\n      content: |+\n        harnessApiVersion: '1.0'\n        type: KUBERNETES_CLUSTER\n        delegateSelectors:\n        - k8s\n        skipValidation: true\n        useKubernetesDelegate: true\n\n      path: Setup/Cloud Providers/Kubernetes.yaml\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImporting a global config only using the yaml path\n\n```sh\n $ pulumi import harness:index/yamlConfig:YamlConfig k8s_cloudprovider \"Setup/Cloud Providers/kubernetes.yaml\"\n```\n\n Importing a service which requires both the application id and the yaml path.\n\n```sh\n $ pulumi import harness:index/yamlConfig:YamlConfig k8s_cloudprovider \"Setup/Applications/MyApp/Services/MyService/Index.yaml:\u003cAPPLICATION_ID\u003e\"\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application. This is required for all resources except global ones.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The raw YAML configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the resource.\n"
                }
            },
            "required": [
                "content",
                "name",
                "path"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application. This is required for all resources except global ones.\n",
                    "willReplaceOnChanges": true
                },
                "content": {
                    "type": "string",
                    "description": "The raw YAML configuration.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "content",
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering YamlConfig resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application. This is required for all resources except global ones.\n",
                        "willReplaceOnChanges": true
                    },
                    "content": {
                        "type": "string",
                        "description": "The raw YAML configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the resource.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/apiKey:ApiKey": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity\n"
                },
                "apikeyType": {
                    "type": "string",
                    "description": "Type of the API Key\n"
                },
                "defaultTimeToExpireToken": {
                    "type": "integer",
                    "description": "Default expiration time of the Token within API Key\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the API Key\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the API Key\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the API Key\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "Parent Entity Identifier of the API Key\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags for the API Key\n"
                }
            },
            "required": [
                "accountId",
                "apikeyType",
                "identifier",
                "name",
                "parentId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity\n"
                },
                "apikeyType": {
                    "type": "string",
                    "description": "Type of the API Key\n"
                },
                "defaultTimeToExpireToken": {
                    "type": "integer",
                    "description": "Default expiration time of the Token within API Key\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the API Key\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the API Key\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the API Key\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "Parent Entity Identifier of the API Key\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags for the API Key\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "apikeyType",
                "identifier",
                "parentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiKey resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the Entity\n"
                    },
                    "apikeyType": {
                        "type": "string",
                        "description": "Type of the API Key\n"
                    },
                    "defaultTimeToExpireToken": {
                        "type": "integer",
                        "description": "Default expiration time of the Token within API Key\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the API Key\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the API Key\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the API Key\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "Parent Entity Identifier of the API Key\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the API Key\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/appDynamicsConnector:AppDynamicsConnector": {
            "description": "Resource for creating an App Dynamics connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Authentication mechanism as api token\nconst token = new harness.platform.AppDynamicsConnector(\"token\", {\n    accountName: \"myaccount\",\n    apiToken: {\n        clientId: \"client_id\",\n        clientSecretRef: \"account.secret_id\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://appdynamics.com/\",\n});\n// Authentication mechanism as username and password\nconst test = new harness.platform.AppDynamicsConnector(\"test\", {\n    accountName: \"myaccount\",\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://appdynamics.com/\",\n    usernamePassword: {\n        passwordRef: \"account.secret_id\",\n        username: \"username\",\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Authentication mechanism as api token\ntoken = harness.platform.AppDynamicsConnector(\"token\",\n    account_name=\"myaccount\",\n    api_token=harness.platform.AppDynamicsConnectorApiTokenArgs(\n        client_id=\"client_id\",\n        client_secret_ref=\"account.secret_id\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://appdynamics.com/\")\n# Authentication mechanism as username and password\ntest = harness.platform.AppDynamicsConnector(\"test\",\n    account_name=\"myaccount\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://appdynamics.com/\",\n    username_password=harness.platform.AppDynamicsConnectorUsernamePasswordArgs(\n        password_ref=\"account.secret_id\",\n        username=\"username\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Authentication mechanism as api token\n    var token = new Harness.Platform.AppDynamicsConnector(\"token\", new()\n    {\n        AccountName = \"myaccount\",\n        ApiToken = new Harness.Platform.Inputs.AppDynamicsConnectorApiTokenArgs\n        {\n            ClientId = \"client_id\",\n            ClientSecretRef = \"account.secret_id\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://appdynamics.com/\",\n    });\n\n    // Authentication mechanism as username and password\n    var test = new Harness.Platform.AppDynamicsConnector(\"test\", new()\n    {\n        AccountName = \"myaccount\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://appdynamics.com/\",\n        UsernamePassword = new Harness.Platform.Inputs.AppDynamicsConnectorUsernamePasswordArgs\n        {\n            PasswordRef = \"account.secret_id\",\n            Username = \"username\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewAppDynamicsConnector(ctx, \"token\", \u0026platform.AppDynamicsConnectorArgs{\n\t\t\tAccountName: pulumi.String(\"myaccount\"),\n\t\t\tApiToken: \u0026platform.AppDynamicsConnectorApiTokenArgs{\n\t\t\t\tClientId:        pulumi.String(\"client_id\"),\n\t\t\t\tClientSecretRef: pulumi.String(\"account.secret_id\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://appdynamics.com/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewAppDynamicsConnector(ctx, \"test\", \u0026platform.AppDynamicsConnectorArgs{\n\t\t\tAccountName: pulumi.String(\"myaccount\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://appdynamics.com/\"),\n\t\t\tUsernamePassword: \u0026platform.AppDynamicsConnectorUsernamePasswordArgs{\n\t\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t\t\tUsername:    pulumi.String(\"username\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.AppDynamicsConnector;\nimport com.pulumi.harness.platform.AppDynamicsConnectorArgs;\nimport com.pulumi.harness.platform.inputs.AppDynamicsConnectorApiTokenArgs;\nimport com.pulumi.harness.platform.inputs.AppDynamicsConnectorUsernamePasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var token = new AppDynamicsConnector(\"token\", AppDynamicsConnectorArgs.builder()        \n            .accountName(\"myaccount\")\n            .apiToken(AppDynamicsConnectorApiTokenArgs.builder()\n                .clientId(\"client_id\")\n                .clientSecretRef(\"account.secret_id\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://appdynamics.com/\")\n            .build());\n\n        var test = new AppDynamicsConnector(\"test\", AppDynamicsConnectorArgs.builder()        \n            .accountName(\"myaccount\")\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://appdynamics.com/\")\n            .usernamePassword(AppDynamicsConnectorUsernamePasswordArgs.builder()\n                .passwordRef(\"account.secret_id\")\n                .username(\"username\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Authentication mechanism as api token\n  token:\n    type: harness:platform:AppDynamicsConnector\n    properties:\n      accountName: myaccount\n      apiToken:\n        clientId: client_id\n        clientSecretRef: account.secret_id\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://appdynamics.com/\n  # Authentication mechanism as username and password\n  test:\n    type: harness:platform:AppDynamicsConnector\n    properties:\n      accountName: myaccount\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://appdynamics.com/\n      usernamePassword:\n        passwordRef: account.secret_id\n        username: username\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level appdynamics connector\n\n\n\n```sh\n $ pulumi import harness:platform/appDynamicsConnector:AppDynamicsConnector example \u003cconnector_id\u003e\n```\n\n Import org level appdynamics connector\n\n\n\n```sh\n $ pulumi import harness:platform/appDynamicsConnector:AppDynamicsConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level appdynamics connector\n\n\n\n```sh\n $ pulumi import harness:platform/appDynamicsConnector:AppDynamicsConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The App Dynamics account name.\n"
                },
                "apiToken": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken",
                    "description": "Authenticate to App Dynamics using api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the App Dynamics controller.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword",
                    "description": "Authenticate to App Dynamics using username and password.\n"
                }
            },
            "required": [
                "accountName",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "The App Dynamics account name.\n"
                },
                "apiToken": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken",
                    "description": "Authenticate to App Dynamics using api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the App Dynamics controller.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword",
                    "description": "Authenticate to App Dynamics using username and password.\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppDynamicsConnector resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The App Dynamics account name.\n"
                    },
                    "apiToken": {
                        "$ref": "#/types/harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken",
                        "description": "Authenticate to App Dynamics using api token.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the App Dynamics controller.\n"
                    },
                    "usernamePassword": {
                        "$ref": "#/types/harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword",
                        "description": "Authenticate to App Dynamics using username and password.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/artifactoryConnector:ArtifactoryConnector": {
            "description": "Resource for creating an Artifactory connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Authentication mechanism as username and password\nconst example = new harness.platform.ArtifactoryConnector(\"example\", {\n    identifier: \"identifier\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    orgId: harness_platform_project.test.org_id,\n    projectId: harness_platform_project.test.id,\n    url: \"https://artifactory.example.com\",\n    delegateSelectors: [\"harness-delegate\"],\n    credentials: {\n        username: \"admin\",\n        passwordRef: \"account.secret_id\",\n    },\n});\n// Authentication mechanism as anonymous\nconst test = new harness.platform.ArtifactoryConnector(\"test\", {\n    identifier: \"identifier\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    orgId: harness_platform_project.test.org_id,\n    projectId: harness_platform_project.test.id,\n    url: \"https://artifactory.example.com\",\n    delegateSelectors: [\"harness-delegate\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Authentication mechanism as username and password\nexample = harness.platform.ArtifactoryConnector(\"example\",\n    identifier=\"identifier\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    org_id=harness_platform_project[\"test\"][\"org_id\"],\n    project_id=harness_platform_project[\"test\"][\"id\"],\n    url=\"https://artifactory.example.com\",\n    delegate_selectors=[\"harness-delegate\"],\n    credentials=harness.platform.ArtifactoryConnectorCredentialsArgs(\n        username=\"admin\",\n        password_ref=\"account.secret_id\",\n    ))\n# Authentication mechanism as anonymous\ntest = harness.platform.ArtifactoryConnector(\"test\",\n    identifier=\"identifier\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    org_id=harness_platform_project[\"test\"][\"org_id\"],\n    project_id=harness_platform_project[\"test\"][\"id\"],\n    url=\"https://artifactory.example.com\",\n    delegate_selectors=[\"harness-delegate\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Authentication mechanism as username and password\n    var example = new Harness.Platform.ArtifactoryConnector(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        OrgId = harness_platform_project.Test.Org_id,\n        ProjectId = harness_platform_project.Test.Id,\n        Url = \"https://artifactory.example.com\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Credentials = new Harness.Platform.Inputs.ArtifactoryConnectorCredentialsArgs\n        {\n            Username = \"admin\",\n            PasswordRef = \"account.secret_id\",\n        },\n    });\n\n    // Authentication mechanism as anonymous\n    var test = new Harness.Platform.ArtifactoryConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        OrgId = harness_platform_project.Test.Org_id,\n        ProjectId = harness_platform_project.Test.Id,\n        Url = \"https://artifactory.example.com\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewArtifactoryConnector(ctx, \"example\", \u0026platform.ArtifactoryConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tOrgId:     pulumi.Any(harness_platform_project.Test.Org_id),\n\t\t\tProjectId: pulumi.Any(harness_platform_project.Test.Id),\n\t\t\tUrl:       pulumi.String(\"https://artifactory.example.com\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tCredentials: \u0026platform.ArtifactoryConnectorCredentialsArgs{\n\t\t\t\tUsername:    pulumi.String(\"admin\"),\n\t\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewArtifactoryConnector(ctx, \"test\", \u0026platform.ArtifactoryConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tOrgId:     pulumi.Any(harness_platform_project.Test.Org_id),\n\t\t\tProjectId: pulumi.Any(harness_platform_project.Test.Id),\n\t\t\tUrl:       pulumi.String(\"https://artifactory.example.com\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ArtifactoryConnector;\nimport com.pulumi.harness.platform.ArtifactoryConnectorArgs;\nimport com.pulumi.harness.platform.inputs.ArtifactoryConnectorCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ArtifactoryConnector(\"example\", ArtifactoryConnectorArgs.builder()        \n            .identifier(\"identifier\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .orgId(harness_platform_project.test().org_id())\n            .projectId(harness_platform_project.test().id())\n            .url(\"https://artifactory.example.com\")\n            .delegateSelectors(\"harness-delegate\")\n            .credentials(ArtifactoryConnectorCredentialsArgs.builder()\n                .username(\"admin\")\n                .passwordRef(\"account.secret_id\")\n                .build())\n            .build());\n\n        var test = new ArtifactoryConnector(\"test\", ArtifactoryConnectorArgs.builder()        \n            .identifier(\"identifier\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .orgId(harness_platform_project.test().org_id())\n            .projectId(harness_platform_project.test().id())\n            .url(\"https://artifactory.example.com\")\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Authentication mechanism as username and password\n  example:\n    type: harness:platform:ArtifactoryConnector\n    properties:\n      identifier: identifier\n      description: test\n      tags:\n        - foo:bar\n      orgId: ${harness_platform_project.test.org_id}\n      projectId: ${harness_platform_project.test.id}\n      url: https://artifactory.example.com\n      delegateSelectors:\n        - harness-delegate\n      credentials:\n        username: admin\n        passwordRef: account.secret_id\n  # Authentication mechanism as anonymous\n  test:\n    type: harness:platform:ArtifactoryConnector\n    properties:\n      identifier: identifier\n      description: test\n      tags:\n        - foo:bar\n      orgId: ${harness_platform_project.test.org_id}\n      projectId: ${harness_platform_project.test.id}\n      url: https://artifactory.example.com\n      delegateSelectors:\n        - harness-delegate\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level artifactory connector\n\n\n\n```sh\n $ pulumi import harness:platform/artifactoryConnector:ArtifactoryConnector example \u003cconnector_id\u003e\n```\n\n Import org level artifactory connector\n\n\n\n```sh\n $ pulumi import harness:platform/artifactoryConnector:ArtifactoryConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level artifactory connector\n\n\n\n```sh\n $ pulumi import harness:platform/artifactoryConnector:ArtifactoryConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ArtifactoryConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsCCConnector:AwsCCConnector": {
            "description": "Resource for creating an AWS Cloud Cost connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.AwsCCConnector(\"test\", {\n    accountId: \"account_id\",\n    crossAccountAccess: {\n        externalId: \"external_id\",\n        roleArn: \"role_arn\",\n    },\n    description: \"test\",\n    featuresEnableds: [\n        \"OPTIMIZATION\",\n        \"VISIBILITY\",\n        \"BILLING\",\n    ],\n    identifier: \"identifier\",\n    reportName: \"report_name\",\n    s3Bucket: \"s3bucket\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.AwsCCConnector(\"test\",\n    account_id=\"account_id\",\n    cross_account_access=harness.platform.AwsCCConnectorCrossAccountAccessArgs(\n        external_id=\"external_id\",\n        role_arn=\"role_arn\",\n    ),\n    description=\"test\",\n    features_enableds=[\n        \"OPTIMIZATION\",\n        \"VISIBILITY\",\n        \"BILLING\",\n    ],\n    identifier=\"identifier\",\n    report_name=\"report_name\",\n    s3_bucket=\"s3bucket\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.AwsCCConnector(\"test\", new()\n    {\n        AccountId = \"account_id\",\n        CrossAccountAccess = new Harness.Platform.Inputs.AwsCCConnectorCrossAccountAccessArgs\n        {\n            ExternalId = \"external_id\",\n            RoleArn = \"role_arn\",\n        },\n        Description = \"test\",\n        FeaturesEnableds = new[]\n        {\n            \"OPTIMIZATION\",\n            \"VISIBILITY\",\n            \"BILLING\",\n        },\n        Identifier = \"identifier\",\n        ReportName = \"report_name\",\n        S3Bucket = \"s3bucket\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewAwsCCConnector(ctx, \"test\", \u0026platform.AwsCCConnectorArgs{\n\t\t\tAccountId: pulumi.String(\"account_id\"),\n\t\t\tCrossAccountAccess: \u0026platform.AwsCCConnectorCrossAccountAccessArgs{\n\t\t\t\tExternalId: pulumi.String(\"external_id\"),\n\t\t\t\tRoleArn:    pulumi.String(\"role_arn\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tFeaturesEnableds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"OPTIMIZATION\"),\n\t\t\t\tpulumi.String(\"VISIBILITY\"),\n\t\t\t\tpulumi.String(\"BILLING\"),\n\t\t\t},\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tReportName: pulumi.String(\"report_name\"),\n\t\t\tS3Bucket:   pulumi.String(\"s3bucket\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.AwsCCConnector;\nimport com.pulumi.harness.platform.AwsCCConnectorArgs;\nimport com.pulumi.harness.platform.inputs.AwsCCConnectorCrossAccountAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new AwsCCConnector(\"test\", AwsCCConnectorArgs.builder()        \n            .accountId(\"account_id\")\n            .crossAccountAccess(AwsCCConnectorCrossAccountAccessArgs.builder()\n                .externalId(\"external_id\")\n                .roleArn(\"role_arn\")\n                .build())\n            .description(\"test\")\n            .featuresEnableds(            \n                \"OPTIMIZATION\",\n                \"VISIBILITY\",\n                \"BILLING\")\n            .identifier(\"identifier\")\n            .reportName(\"report_name\")\n            .s3Bucket(\"s3bucket\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:AwsCCConnector\n    properties:\n      accountId: account_id\n      crossAccountAccess:\n        externalId: external_id\n        roleArn: role_arn\n      description: test\n      featuresEnableds:\n        - OPTIMIZATION\n        - VISIBILITY\n        - BILLING\n      identifier: identifier\n      reportName: report_name\n      s3Bucket: s3bucket\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level aws cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/awsCCConnector:AwsCCConnector example \u003cconnector_id\u003e\n```\n\n Import org level aws cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/awsCCConnector:AwsCCConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level aws cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/awsCCConnector:AwsCCConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The AWS account id.\n"
                },
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess",
                    "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "reportName": {
                    "type": "string",
                    "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                },
                "s3Bucket": {
                    "type": "string",
                    "description": "The name of s3 bucket.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "accountId",
                "crossAccountAccess",
                "featuresEnableds",
                "identifier",
                "name",
                "reportName",
                "s3Bucket"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The AWS account id.\n"
                },
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess",
                    "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "reportName": {
                    "type": "string",
                    "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                },
                "s3Bucket": {
                    "type": "string",
                    "description": "The name of s3 bucket.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "crossAccountAccess",
                "featuresEnableds",
                "identifier",
                "reportName",
                "s3Bucket"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsCCConnector resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The AWS account id.\n"
                    },
                    "crossAccountAccess": {
                        "$ref": "#/types/harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess",
                        "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "reportName": {
                        "type": "string",
                        "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                    },
                    "s3Bucket": {
                        "type": "string",
                        "description": "The name of s3 bucket.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsConnector:AwsConnector": {
            "description": "Resource for creating an AWS connector.\n",
            "properties": {
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess",
                    "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate",
                    "description": "Inherit credentials from the delegate.\n"
                },
                "irsa": {
                    "$ref": "#/types/harness:platform/AwsConnectorIrsa:AwsConnectorIrsa",
                    "description": "Use IAM role for service accounts.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsConnectorManual:AwsConnectorManual",
                    "description": "Use IAM role for service accounts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess",
                    "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate",
                    "description": "Inherit credentials from the delegate.\n"
                },
                "irsa": {
                    "$ref": "#/types/harness:platform/AwsConnectorIrsa:AwsConnectorIrsa",
                    "description": "Use IAM role for service accounts.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsConnectorManual:AwsConnectorManual",
                    "description": "Use IAM role for service accounts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsConnector resources.\n",
                "properties": {
                    "crossAccountAccess": {
                        "$ref": "#/types/harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess",
                        "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "inheritFromDelegate": {
                        "$ref": "#/types/harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate",
                        "description": "Inherit credentials from the delegate.\n"
                    },
                    "irsa": {
                        "$ref": "#/types/harness:platform/AwsConnectorIrsa:AwsConnectorIrsa",
                        "description": "Use IAM role for service accounts.\n"
                    },
                    "manual": {
                        "$ref": "#/types/harness:platform/AwsConnectorManual:AwsConnectorManual",
                        "description": "Use IAM role for service accounts.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsKmsConnector:AwsKmsConnector": {
            "description": "Resource for creating an AWS KMS connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Credentials inherit_from_delegate\nconst test = new harness.platform.AwsKmsConnector(\"test\", {\n    arnRef: \"account.secret_id\",\n    credentials: {\n        inheritFromDelegate: true,\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifer\",\n    region: \"us-east-1\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Credentials inherit_from_delegate\ntest = harness.platform.AwsKmsConnector(\"test\",\n    arn_ref=\"account.secret_id\",\n    credentials=harness.platform.AwsKmsConnectorCredentialsArgs(\n        inherit_from_delegate=True,\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifer\",\n    region=\"us-east-1\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Credentials inherit_from_delegate\n    var test = new Harness.Platform.AwsKmsConnector(\"test\", new()\n    {\n        ArnRef = \"account.secret_id\",\n        Credentials = new Harness.Platform.Inputs.AwsKmsConnectorCredentialsArgs\n        {\n            InheritFromDelegate = true,\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifer\",\n        Region = \"us-east-1\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewAwsKmsConnector(ctx, \"test\", \u0026platform.AwsKmsConnectorArgs{\n\t\t\tArnRef: pulumi.String(\"account.secret_id\"),\n\t\t\tCredentials: \u0026platform.AwsKmsConnectorCredentialsArgs{\n\t\t\t\tInheritFromDelegate: pulumi.Bool(true),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifer\"),\n\t\t\tRegion:      pulumi.String(\"us-east-1\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.AwsKmsConnector;\nimport com.pulumi.harness.platform.AwsKmsConnectorArgs;\nimport com.pulumi.harness.platform.inputs.AwsKmsConnectorCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new AwsKmsConnector(\"test\", AwsKmsConnectorArgs.builder()        \n            .arnRef(\"account.secret_id\")\n            .credentials(AwsKmsConnectorCredentialsArgs.builder()\n                .inheritFromDelegate(true)\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifer\")\n            .region(\"us-east-1\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Credentials inherit_from_delegate\n  test:\n    type: harness:platform:AwsKmsConnector\n    properties:\n      arnRef: account.secret_id\n      credentials:\n        inheritFromDelegate: true\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifer\n      region: us-east-1\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level awskms connector\n\n\n\n```sh\n $ pulumi import harness:platform/awsKmsConnector:AwsKmsConnector example \u003cconnector_id\u003e\n```\n\n Import org level awskms connector\n\n\n\n```sh\n $ pulumi import harness:platform/awsKmsConnector:AwsKmsConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level awskms connector\n\n\n\n```sh\n $ pulumi import harness:platform/awsKmsConnector:AwsKmsConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "arnRef": {
                    "type": "string",
                    "description": "A reference to the Harness secret containing the ARN of the AWS KMS. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials",
                    "description": "Credentials to connect to AWS.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "arnRef",
                "credentials",
                "identifier",
                "name",
                "region"
            ],
            "inputProperties": {
                "arnRef": {
                    "type": "string",
                    "description": "A reference to the Harness secret containing the ARN of the AWS KMS. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials",
                    "description": "Credentials to connect to AWS.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "arnRef",
                "credentials",
                "identifier",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsKmsConnector resources.\n",
                "properties": {
                    "arnRef": {
                        "type": "string",
                        "description": "A reference to the Harness secret containing the ARN of the AWS KMS. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials",
                        "description": "Credentials to connect to AWS.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region where the AWS Secret Manager is.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsSecretManagerConnector:AwsSecretManagerConnector": {
            "description": "Resource for creating an AWS Secret Manager connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Credentials assume_role\nconst test = new harness.platform.AwsSecretManagerConnector(\"test\", {\n    credentials: {\n        assumeRole: {\n            duration: 900,\n            externalId: \"externalid\",\n            roleArn: \"somerolearn\",\n        },\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    region: \"us-east-1\",\n    secretNamePrefix: \"test\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Credentials assume_role\ntest = harness.platform.AwsSecretManagerConnector(\"test\",\n    credentials=harness.platform.AwsSecretManagerConnectorCredentialsArgs(\n        assume_role=harness.platform.AwsSecretManagerConnectorCredentialsAssumeRoleArgs(\n            duration=900,\n            external_id=\"externalid\",\n            role_arn=\"somerolearn\",\n        ),\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    region=\"us-east-1\",\n    secret_name_prefix=\"test\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Credentials assume_role\n    var test = new Harness.Platform.AwsSecretManagerConnector(\"test\", new()\n    {\n        Credentials = new Harness.Platform.Inputs.AwsSecretManagerConnectorCredentialsArgs\n        {\n            AssumeRole = new Harness.Platform.Inputs.AwsSecretManagerConnectorCredentialsAssumeRoleArgs\n            {\n                Duration = 900,\n                ExternalId = \"externalid\",\n                RoleArn = \"somerolearn\",\n            },\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Region = \"us-east-1\",\n        SecretNamePrefix = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewAwsSecretManagerConnector(ctx, \"test\", \u0026platform.AwsSecretManagerConnectorArgs{\n\t\t\tCredentials: \u0026platform.AwsSecretManagerConnectorCredentialsArgs{\n\t\t\t\tAssumeRole: \u0026platform.AwsSecretManagerConnectorCredentialsAssumeRoleArgs{\n\t\t\t\t\tDuration:   pulumi.Int(900),\n\t\t\t\t\tExternalId: pulumi.String(\"externalid\"),\n\t\t\t\t\tRoleArn:    pulumi.String(\"somerolearn\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription:      pulumi.String(\"test\"),\n\t\t\tIdentifier:       pulumi.String(\"identifier\"),\n\t\t\tRegion:           pulumi.String(\"us-east-1\"),\n\t\t\tSecretNamePrefix: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.AwsSecretManagerConnector;\nimport com.pulumi.harness.platform.AwsSecretManagerConnectorArgs;\nimport com.pulumi.harness.platform.inputs.AwsSecretManagerConnectorCredentialsArgs;\nimport com.pulumi.harness.platform.inputs.AwsSecretManagerConnectorCredentialsAssumeRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new AwsSecretManagerConnector(\"test\", AwsSecretManagerConnectorArgs.builder()        \n            .credentials(AwsSecretManagerConnectorCredentialsArgs.builder()\n                .assumeRole(AwsSecretManagerConnectorCredentialsAssumeRoleArgs.builder()\n                    .duration(900)\n                    .externalId(\"externalid\")\n                    .roleArn(\"somerolearn\")\n                    .build())\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .region(\"us-east-1\")\n            .secretNamePrefix(\"test\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Credentials assume_role\n  test:\n    type: harness:platform:AwsSecretManagerConnector\n    properties:\n      credentials:\n        assumeRole:\n          duration: 900\n          externalId: externalid\n          roleArn: somerolearn\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      region: us-east-1\n      secretNamePrefix: test\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level aws secret manager connector\n\n\n\n```sh\n $ pulumi import harness:platform/awsSecretManagerConnector:AwsSecretManagerConnector example \u003cconnector_id\u003e\n```\n\n Import org level aws secret manager connector\n\n\n\n```sh\n $ pulumi import harness:platform/awsSecretManagerConnector:AwsSecretManagerConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level aws secret manager connector\n\n\n\n```sh\n $ pulumi import harness:platform/awsSecretManagerConnector:AwsSecretManagerConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials",
                    "description": "Credentials to connect to AWS.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "secretNamePrefix": {
                    "type": "string",
                    "description": "A prefix to be added to all secrets.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "credentials",
                "identifier",
                "name",
                "region"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials",
                    "description": "Credentials to connect to AWS.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "secretNamePrefix": {
                    "type": "string",
                    "description": "A prefix to be added to all secrets.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "credentials",
                "identifier",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsSecretManagerConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials",
                        "description": "Credentials to connect to AWS.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region where the AWS Secret Manager is.\n"
                    },
                    "secretNamePrefix": {
                        "type": "string",
                        "description": "A prefix to be added to all secrets.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/bitbucketConnector:BitbucketConnector": {
            "description": "Resource for creating a Bitbucket connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Credentials ssh\nconst test = new harness.platform.BitbucketConnector(\"test\", {\n    connectionType: \"Account\",\n    credentials: {\n        ssh: {\n            sshKeyRef: \"account.secret_id\",\n        },\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://bitbucket.com/account\",\n    validationRepo: \"some_repo\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Credentials ssh\ntest = harness.platform.BitbucketConnector(\"test\",\n    connection_type=\"Account\",\n    credentials=harness.platform.BitbucketConnectorCredentialsArgs(\n        ssh=harness.platform.BitbucketConnectorCredentialsSshArgs(\n            ssh_key_ref=\"account.secret_id\",\n        ),\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://bitbucket.com/account\",\n    validation_repo=\"some_repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Credentials ssh\n    var test = new Harness.Platform.BitbucketConnector(\"test\", new()\n    {\n        ConnectionType = \"Account\",\n        Credentials = new Harness.Platform.Inputs.BitbucketConnectorCredentialsArgs\n        {\n            Ssh = new Harness.Platform.Inputs.BitbucketConnectorCredentialsSshArgs\n            {\n                SshKeyRef = \"account.secret_id\",\n            },\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://bitbucket.com/account\",\n        ValidationRepo = \"some_repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewBitbucketConnector(ctx, \"test\", \u0026platform.BitbucketConnectorArgs{\n\t\t\tConnectionType: pulumi.String(\"Account\"),\n\t\t\tCredentials: \u0026platform.BitbucketConnectorCredentialsArgs{\n\t\t\t\tSsh: \u0026platform.BitbucketConnectorCredentialsSshArgs{\n\t\t\t\t\tSshKeyRef: pulumi.String(\"account.secret_id\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl:            pulumi.String(\"https://bitbucket.com/account\"),\n\t\t\tValidationRepo: pulumi.String(\"some_repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.BitbucketConnector;\nimport com.pulumi.harness.platform.BitbucketConnectorArgs;\nimport com.pulumi.harness.platform.inputs.BitbucketConnectorCredentialsArgs;\nimport com.pulumi.harness.platform.inputs.BitbucketConnectorCredentialsSshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new BitbucketConnector(\"test\", BitbucketConnectorArgs.builder()        \n            .connectionType(\"Account\")\n            .credentials(BitbucketConnectorCredentialsArgs.builder()\n                .ssh(BitbucketConnectorCredentialsSshArgs.builder()\n                    .sshKeyRef(\"account.secret_id\")\n                    .build())\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://bitbucket.com/account\")\n            .validationRepo(\"some_repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Credentials ssh\n  test:\n    type: harness:platform:BitbucketConnector\n    properties:\n      connectionType: Account\n      credentials:\n        ssh:\n          sshKeyRef: account.secret_id\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://bitbucket.com/account\n      validationRepo: some_repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level bitbucket connector\n\n\n\n```sh\n $ pulumi import harness:platform/bitbucketConnector:BitbucketConnector example \u003cconnector_id\u003e\n```\n\n Import org level bitbucket connector\n\n\n\n```sh\n $ pulumi import harness:platform/bitbucketConnector:BitbucketConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level bitbucket connector\n\n\n\n```sh\n $ pulumi import harness:platform/bitbucketConnector:BitbucketConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication",
                    "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the BitBucket repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication",
                    "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the BitBucket repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BitbucketConnector resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "$ref": "#/types/harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication",
                        "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the BitBucket repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/ccmFilters:CcmFilters": {
            "description": "Resource for creating a Harness CCM Filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.CcmFilters(\"test\", {\n    filterProperties: {\n        filterType: \"CCMRecommendation\",\n        tags: [\"foo:bar\"],\n    },\n    filterVisibility: \"EveryOne\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"CCMRecommendation\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.CcmFilters(\"test\",\n    filter_properties=harness.platform.CcmFiltersFilterPropertiesArgs(\n        filter_type=\"CCMRecommendation\",\n        tags=[\"foo:bar\"],\n    ),\n    filter_visibility=\"EveryOne\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"CCMRecommendation\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.CcmFilters(\"test\", new()\n    {\n        FilterProperties = new Harness.Platform.Inputs.CcmFiltersFilterPropertiesArgs\n        {\n            FilterType = \"CCMRecommendation\",\n            Tags = new[]\n            {\n                \"foo:bar\",\n            },\n        },\n        FilterVisibility = \"EveryOne\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"CCMRecommendation\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewCcmFilters(ctx, \"test\", \u0026platform.CcmFiltersArgs{\n\t\t\tFilterProperties: \u0026platform.CcmFiltersFilterPropertiesArgs{\n\t\t\t\tFilterType: pulumi.String(\"CCMRecommendation\"),\n\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilterVisibility: pulumi.String(\"EveryOne\"),\n\t\t\tIdentifier:       pulumi.String(\"identifier\"),\n\t\t\tOrgId:            pulumi.String(\"org_id\"),\n\t\t\tProjectId:        pulumi.String(\"project_id\"),\n\t\t\tType:             pulumi.String(\"CCMRecommendation\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.CcmFilters;\nimport com.pulumi.harness.platform.CcmFiltersArgs;\nimport com.pulumi.harness.platform.inputs.CcmFiltersFilterPropertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new CcmFilters(\"test\", CcmFiltersArgs.builder()        \n            .filterProperties(CcmFiltersFilterPropertiesArgs.builder()\n                .filterType(\"CCMRecommendation\")\n                .tags(\"foo:bar\")\n                .build())\n            .filterVisibility(\"EveryOne\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"CCMRecommendation\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:CcmFilters\n    properties:\n      filterProperties:\n        filterType: CCMRecommendation\n        tags:\n          - foo:bar\n      filterVisibility: EveryOne\n      identifier: identifier\n      orgId: org_id\n      projectId: project_id\n      type: CCMRecommendation\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level ccm filter\n\n```sh\n $ pulumi import harness:platform/ccmFilters:CcmFilters example \u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n Import org level ccm filter\n\n```sh\n $ pulumi import harness:platform/ccmFilters:CcmFilters example \u003cord_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n Import project level ccm filter\n\n```sh\n $ pulumi import harness:platform/ccmFilters:CcmFilters example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n ",
            "properties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/CcmFiltersFilterProperties:CcmFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter..\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the ccm filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of ccm filters.\n"
                }
            },
            "required": [
                "filterProperties",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/CcmFiltersFilterProperties:CcmFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter..\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the ccm filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of ccm filters.\n"
                }
            },
            "requiredInputs": [
                "filterProperties",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CcmFilters resources.\n",
                "properties": {
                    "filterProperties": {
                        "$ref": "#/types/harness:platform/CcmFiltersFilterProperties:CcmFiltersFilterProperties",
                        "description": "Properties of the filters entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filters. By default, everyone can view this filter..\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the ccm filters.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of ccm filters.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorAzureCloudCost:ConnectorAzureCloudCost": {
            "description": "Resource for creating an Azure Cloud Cost connector in Harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.ConnectorAzureCloudCost(\"example\", {\n    billingExportSpec: {\n        containerName: \"container_name\",\n        directoryName: \"directory_name\",\n        reportName: \"report_name\",\n        storageAccountName: \"storage_account_name\",\n        subscriptionId: \"subscription_id\",\n    },\n    description: \"example\",\n    featuresEnableds: [\n        \"BILLING\",\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    identifier: \"identifier\",\n    subscriptionId: \"subscription_id\",\n    tags: [\"foo:bar\"],\n    tenantId: \"tenant_id\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.ConnectorAzureCloudCost(\"example\",\n    billing_export_spec=harness.platform.ConnectorAzureCloudCostBillingExportSpecArgs(\n        container_name=\"container_name\",\n        directory_name=\"directory_name\",\n        report_name=\"report_name\",\n        storage_account_name=\"storage_account_name\",\n        subscription_id=\"subscription_id\",\n    ),\n    description=\"example\",\n    features_enableds=[\n        \"BILLING\",\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    identifier=\"identifier\",\n    subscription_id=\"subscription_id\",\n    tags=[\"foo:bar\"],\n    tenant_id=\"tenant_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.ConnectorAzureCloudCost(\"example\", new()\n    {\n        BillingExportSpec = new Harness.Platform.Inputs.ConnectorAzureCloudCostBillingExportSpecArgs\n        {\n            ContainerName = \"container_name\",\n            DirectoryName = \"directory_name\",\n            ReportName = \"report_name\",\n            StorageAccountName = \"storage_account_name\",\n            SubscriptionId = \"subscription_id\",\n        },\n        Description = \"example\",\n        FeaturesEnableds = new[]\n        {\n            \"BILLING\",\n            \"VISIBILITY\",\n            \"OPTIMIZATION\",\n        },\n        Identifier = \"identifier\",\n        SubscriptionId = \"subscription_id\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        TenantId = \"tenant_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorAzureCloudCost(ctx, \"example\", \u0026platform.ConnectorAzureCloudCostArgs{\n\t\t\tBillingExportSpec: \u0026platform.ConnectorAzureCloudCostBillingExportSpecArgs{\n\t\t\t\tContainerName:      pulumi.String(\"container_name\"),\n\t\t\t\tDirectoryName:      pulumi.String(\"directory_name\"),\n\t\t\t\tReportName:         pulumi.String(\"report_name\"),\n\t\t\t\tStorageAccountName: pulumi.String(\"storage_account_name\"),\n\t\t\t\tSubscriptionId:     pulumi.String(\"subscription_id\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tFeaturesEnableds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"BILLING\"),\n\t\t\t\tpulumi.String(\"VISIBILITY\"),\n\t\t\t\tpulumi.String(\"OPTIMIZATION\"),\n\t\t\t},\n\t\t\tIdentifier:     pulumi.String(\"identifier\"),\n\t\t\tSubscriptionId: pulumi.String(\"subscription_id\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tTenantId: pulumi.String(\"tenant_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorAzureCloudCost;\nimport com.pulumi.harness.platform.ConnectorAzureCloudCostArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorAzureCloudCostBillingExportSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ConnectorAzureCloudCost(\"example\", ConnectorAzureCloudCostArgs.builder()        \n            .billingExportSpec(ConnectorAzureCloudCostBillingExportSpecArgs.builder()\n                .containerName(\"container_name\")\n                .directoryName(\"directory_name\")\n                .reportName(\"report_name\")\n                .storageAccountName(\"storage_account_name\")\n                .subscriptionId(\"subscription_id\")\n                .build())\n            .description(\"example\")\n            .featuresEnableds(            \n                \"BILLING\",\n                \"VISIBILITY\",\n                \"OPTIMIZATION\")\n            .identifier(\"identifier\")\n            .subscriptionId(\"subscription_id\")\n            .tags(\"foo:bar\")\n            .tenantId(\"tenant_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:ConnectorAzureCloudCost\n    properties:\n      billingExportSpec:\n        containerName: container_name\n        directoryName: directory_name\n        reportName: report_name\n        storageAccountName: storage_account_name\n        subscriptionId: subscription_id\n      description: example\n      featuresEnableds:\n        - BILLING\n        - VISIBILITY\n        - OPTIMIZATION\n      identifier: identifier\n      subscriptionId: subscription_id\n      tags:\n        - foo:bar\n      tenantId: tenant_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level azure cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorAzureCloudCost:ConnectorAzureCloudCost example \u003cconnector_id\u003e\n```\n\n Import org level azure cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorAzureCloudCost:ConnectorAzureCloudCost example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level azure cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorAzureCloudCost:ConnectorAzureCloudCost example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "billingExportSpec": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudCostBillingExportSpec:ConnectorAzureCloudCostBillingExportSpec",
                    "description": "Returns billing details for the Azure account.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subsription id.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant id.\n"
                }
            },
            "required": [
                "featuresEnableds",
                "identifier",
                "name",
                "subscriptionId",
                "tenantId"
            ],
            "inputProperties": {
                "billingExportSpec": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudCostBillingExportSpec:ConnectorAzureCloudCostBillingExportSpec",
                    "description": "Returns billing details for the Azure account.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subsription id.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant id.\n"
                }
            },
            "requiredInputs": [
                "featuresEnableds",
                "identifier",
                "subscriptionId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorAzureCloudCost resources.\n",
                "properties": {
                    "billingExportSpec": {
                        "$ref": "#/types/harness:platform/ConnectorAzureCloudCostBillingExportSpec:ConnectorAzureCloudCostBillingExportSpec",
                        "description": "Returns billing details for the Azure account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Subsription id.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Tenant id.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorAzureCloudProvider:ConnectorAzureCloudProvider": {
            "description": "Resource for creating an Azure Cloud Provider in Harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst manualConfigSecret = new harness.platform.ConnectorAzureCloudProvider(\"manualConfigSecret\", {\n    azureEnvironmentType: \"AZURE\",\n    credentials: {\n        azureManualDetails: {\n            applicationId: \"application_id\",\n            auth: {\n                azureClientSecretKey: {\n                    secretRef: `account.${harness_platform_secret_text.test.id}`,\n                },\n                type: \"Secret\",\n            },\n            tenantId: \"tenant_id\",\n        },\n        type: \"ManualConfig\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"example\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\nconst manualConfigCertificate = new harness.platform.ConnectorAzureCloudProvider(\"manualConfigCertificate\", {\n    azureEnvironmentType: \"AZURE\",\n    credentials: {\n        azureManualDetails: {\n            applicationId: \"application_id\",\n            auth: {\n                azureClientKeyCert: {\n                    certificateRef: `account.${harness_platform_secret_text.test.id}`,\n                },\n                type: \"Certificate\",\n            },\n            tenantId: \"tenant_id\",\n        },\n        type: \"ManualConfig\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"example\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\nconst inheritFromDelegateUserAssignedManagedIdentity = new harness.platform.ConnectorAzureCloudProvider(\"inheritFromDelegateUserAssignedManagedIdentity\", {\n    azureEnvironmentType: \"AZURE\",\n    credentials: {\n        azureInheritFromDelegateDetails: {\n            auth: {\n                azureMsiAuthUa: {\n                    clientId: \"client_id\",\n                },\n                type: \"UserAssignedManagedIdentity\",\n            },\n        },\n        type: \"InheritFromDelegate\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"example\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\nconst inheritFromDelegateSystemAssignedManagedIdentity = new harness.platform.ConnectorAzureCloudProvider(\"inheritFromDelegateSystemAssignedManagedIdentity\", {\n    azureEnvironmentType: \"AZURE\",\n    credentials: {\n        azureInheritFromDelegateDetails: {\n            auth: {\n                type: \"SystemAssignedManagedIdentity\",\n            },\n        },\n        type: \"InheritFromDelegate\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"example\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nmanual_config_secret = harness.platform.ConnectorAzureCloudProvider(\"manualConfigSecret\",\n    azure_environment_type=\"AZURE\",\n    credentials=harness.platform.ConnectorAzureCloudProviderCredentialsArgs(\n        azure_manual_details=harness.platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsArgs(\n            application_id=\"application_id\",\n            auth=harness.platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthArgs(\n                azure_client_secret_key=harness.platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs(\n                    secret_ref=f\"account.{harness_platform_secret_text['test']['id']}\",\n                ),\n                type=\"Secret\",\n            ),\n            tenant_id=\"tenant_id\",\n        ),\n        type=\"ManualConfig\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"example\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\nmanual_config_certificate = harness.platform.ConnectorAzureCloudProvider(\"manualConfigCertificate\",\n    azure_environment_type=\"AZURE\",\n    credentials=harness.platform.ConnectorAzureCloudProviderCredentialsArgs(\n        azure_manual_details=harness.platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsArgs(\n            application_id=\"application_id\",\n            auth=harness.platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthArgs(\n                azure_client_key_cert=harness.platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs(\n                    certificate_ref=f\"account.{harness_platform_secret_text['test']['id']}\",\n                ),\n                type=\"Certificate\",\n            ),\n            tenant_id=\"tenant_id\",\n        ),\n        type=\"ManualConfig\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"example\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\ninherit_from_delegate_user_assigned_managed_identity = harness.platform.ConnectorAzureCloudProvider(\"inheritFromDelegateUserAssignedManagedIdentity\",\n    azure_environment_type=\"AZURE\",\n    credentials=harness.platform.ConnectorAzureCloudProviderCredentialsArgs(\n        azure_inherit_from_delegate_details=harness.platform.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsArgs(\n            auth=harness.platform.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthArgs(\n                azure_msi_auth_ua=harness.platform.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs(\n                    client_id=\"client_id\",\n                ),\n                type=\"UserAssignedManagedIdentity\",\n            ),\n        ),\n        type=\"InheritFromDelegate\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"example\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\ninherit_from_delegate_system_assigned_managed_identity = harness.platform.ConnectorAzureCloudProvider(\"inheritFromDelegateSystemAssignedManagedIdentity\",\n    azure_environment_type=\"AZURE\",\n    credentials=harness.platform.ConnectorAzureCloudProviderCredentialsArgs(\n        azure_inherit_from_delegate_details=harness.platform.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsArgs(\n            auth=harness.platform.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthArgs(\n                type=\"SystemAssignedManagedIdentity\",\n            ),\n        ),\n        type=\"InheritFromDelegate\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"example\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var manualConfigSecret = new Harness.Platform.ConnectorAzureCloudProvider(\"manualConfigSecret\", new()\n    {\n        AzureEnvironmentType = \"AZURE\",\n        Credentials = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsArgs\n        {\n            AzureManualDetails = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureManualDetailsArgs\n            {\n                ApplicationId = \"application_id\",\n                Auth = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthArgs\n                {\n                    AzureClientSecretKey = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs\n                    {\n                        SecretRef = $\"account.{harness_platform_secret_text.Test.Id}\",\n                    },\n                    Type = \"Secret\",\n                },\n                TenantId = \"tenant_id\",\n            },\n            Type = \"ManualConfig\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"example\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var manualConfigCertificate = new Harness.Platform.ConnectorAzureCloudProvider(\"manualConfigCertificate\", new()\n    {\n        AzureEnvironmentType = \"AZURE\",\n        Credentials = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsArgs\n        {\n            AzureManualDetails = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureManualDetailsArgs\n            {\n                ApplicationId = \"application_id\",\n                Auth = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthArgs\n                {\n                    AzureClientKeyCert = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs\n                    {\n                        CertificateRef = $\"account.{harness_platform_secret_text.Test.Id}\",\n                    },\n                    Type = \"Certificate\",\n                },\n                TenantId = \"tenant_id\",\n            },\n            Type = \"ManualConfig\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"example\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var inheritFromDelegateUserAssignedManagedIdentity = new Harness.Platform.ConnectorAzureCloudProvider(\"inheritFromDelegateUserAssignedManagedIdentity\", new()\n    {\n        AzureEnvironmentType = \"AZURE\",\n        Credentials = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsArgs\n        {\n            AzureInheritFromDelegateDetails = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsArgs\n            {\n                Auth = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthArgs\n                {\n                    AzureMsiAuthUa = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs\n                    {\n                        ClientId = \"client_id\",\n                    },\n                    Type = \"UserAssignedManagedIdentity\",\n                },\n            },\n            Type = \"InheritFromDelegate\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"example\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var inheritFromDelegateSystemAssignedManagedIdentity = new Harness.Platform.ConnectorAzureCloudProvider(\"inheritFromDelegateSystemAssignedManagedIdentity\", new()\n    {\n        AzureEnvironmentType = \"AZURE\",\n        Credentials = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsArgs\n        {\n            AzureInheritFromDelegateDetails = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsArgs\n            {\n                Auth = new Harness.Platform.Inputs.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthArgs\n                {\n                    Type = \"SystemAssignedManagedIdentity\",\n                },\n            },\n            Type = \"InheritFromDelegate\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"example\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorAzureCloudProvider(ctx, \"manualConfigSecret\", \u0026platform.ConnectorAzureCloudProviderArgs{\n\t\t\tAzureEnvironmentType: pulumi.String(\"AZURE\"),\n\t\t\tCredentials: \u0026platform.ConnectorAzureCloudProviderCredentialsArgs{\n\t\t\t\tAzureManualDetails: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsArgs{\n\t\t\t\t\tApplicationId: pulumi.String(\"application_id\"),\n\t\t\t\t\tAuth: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthArgs{\n\t\t\t\t\t\tAzureClientSecretKey: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs{\n\t\t\t\t\t\t\tSecretRef: pulumi.String(fmt.Sprintf(\"account.%v\", harness_platform_secret_text.Test.Id)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tType: pulumi.String(\"Secret\"),\n\t\t\t\t\t},\n\t\t\t\t\tTenantId: pulumi.String(\"tenant_id\"),\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"ManualConfig\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewConnectorAzureCloudProvider(ctx, \"manualConfigCertificate\", \u0026platform.ConnectorAzureCloudProviderArgs{\n\t\t\tAzureEnvironmentType: pulumi.String(\"AZURE\"),\n\t\t\tCredentials: \u0026platform.ConnectorAzureCloudProviderCredentialsArgs{\n\t\t\t\tAzureManualDetails: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsArgs{\n\t\t\t\t\tApplicationId: pulumi.String(\"application_id\"),\n\t\t\t\t\tAuth: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthArgs{\n\t\t\t\t\t\tAzureClientKeyCert: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs{\n\t\t\t\t\t\t\tCertificateRef: pulumi.String(fmt.Sprintf(\"account.%v\", harness_platform_secret_text.Test.Id)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tType: pulumi.String(\"Certificate\"),\n\t\t\t\t\t},\n\t\t\t\t\tTenantId: pulumi.String(\"tenant_id\"),\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"ManualConfig\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewConnectorAzureCloudProvider(ctx, \"inheritFromDelegateUserAssignedManagedIdentity\", \u0026platform.ConnectorAzureCloudProviderArgs{\n\t\t\tAzureEnvironmentType: pulumi.String(\"AZURE\"),\n\t\t\tCredentials: \u0026platform.ConnectorAzureCloudProviderCredentialsArgs{\n\t\t\t\tAzureInheritFromDelegateDetails: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsArgs{\n\t\t\t\t\tAuth: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthArgs{\n\t\t\t\t\t\tAzureMsiAuthUa: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs{\n\t\t\t\t\t\t\tClientId: pulumi.String(\"client_id\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tType: pulumi.String(\"UserAssignedManagedIdentity\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"InheritFromDelegate\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewConnectorAzureCloudProvider(ctx, \"inheritFromDelegateSystemAssignedManagedIdentity\", \u0026platform.ConnectorAzureCloudProviderArgs{\n\t\t\tAzureEnvironmentType: pulumi.String(\"AZURE\"),\n\t\t\tCredentials: \u0026platform.ConnectorAzureCloudProviderCredentialsArgs{\n\t\t\t\tAzureInheritFromDelegateDetails: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsArgs{\n\t\t\t\t\tAuth: \u0026platform.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthArgs{\n\t\t\t\t\t\tType: pulumi.String(\"SystemAssignedManagedIdentity\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"InheritFromDelegate\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorAzureCloudProvider;\nimport com.pulumi.harness.platform.ConnectorAzureCloudProviderArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorAzureCloudProviderCredentialsArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorAzureCloudProviderCredentialsAzureManualDetailsArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var manualConfigSecret = new ConnectorAzureCloudProvider(\"manualConfigSecret\", ConnectorAzureCloudProviderArgs.builder()        \n            .azureEnvironmentType(\"AZURE\")\n            .credentials(ConnectorAzureCloudProviderCredentialsArgs.builder()\n                .azureManualDetails(ConnectorAzureCloudProviderCredentialsAzureManualDetailsArgs.builder()\n                    .applicationId(\"application_id\")\n                    .auth(ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthArgs.builder()\n                        .azureClientSecretKey(ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs.builder()\n                            .secretRef(String.format(\"account.%s\", harness_platform_secret_text.test().id()))\n                            .build())\n                        .type(\"Secret\")\n                        .build())\n                    .tenantId(\"tenant_id\")\n                    .build())\n                .type(\"ManualConfig\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"example\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n        var manualConfigCertificate = new ConnectorAzureCloudProvider(\"manualConfigCertificate\", ConnectorAzureCloudProviderArgs.builder()        \n            .azureEnvironmentType(\"AZURE\")\n            .credentials(ConnectorAzureCloudProviderCredentialsArgs.builder()\n                .azureManualDetails(ConnectorAzureCloudProviderCredentialsAzureManualDetailsArgs.builder()\n                    .applicationId(\"application_id\")\n                    .auth(ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthArgs.builder()\n                        .azureClientKeyCert(ConnectorAzureCloudProviderCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs.builder()\n                            .certificateRef(String.format(\"account.%s\", harness_platform_secret_text.test().id()))\n                            .build())\n                        .type(\"Certificate\")\n                        .build())\n                    .tenantId(\"tenant_id\")\n                    .build())\n                .type(\"ManualConfig\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"example\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n        var inheritFromDelegateUserAssignedManagedIdentity = new ConnectorAzureCloudProvider(\"inheritFromDelegateUserAssignedManagedIdentity\", ConnectorAzureCloudProviderArgs.builder()        \n            .azureEnvironmentType(\"AZURE\")\n            .credentials(ConnectorAzureCloudProviderCredentialsArgs.builder()\n                .azureInheritFromDelegateDetails(ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsArgs.builder()\n                    .auth(ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthArgs.builder()\n                        .azureMsiAuthUa(ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs.builder()\n                            .clientId(\"client_id\")\n                            .build())\n                        .type(\"UserAssignedManagedIdentity\")\n                        .build())\n                    .build())\n                .type(\"InheritFromDelegate\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"example\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n        var inheritFromDelegateSystemAssignedManagedIdentity = new ConnectorAzureCloudProvider(\"inheritFromDelegateSystemAssignedManagedIdentity\", ConnectorAzureCloudProviderArgs.builder()        \n            .azureEnvironmentType(\"AZURE\")\n            .credentials(ConnectorAzureCloudProviderCredentialsArgs.builder()\n                .azureInheritFromDelegateDetails(ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsArgs.builder()\n                    .auth(ConnectorAzureCloudProviderCredentialsAzureInheritFromDelegateDetailsAuthArgs.builder()\n                        .type(\"SystemAssignedManagedIdentity\")\n                        .build())\n                    .build())\n                .type(\"InheritFromDelegate\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"example\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  manualConfigSecret:\n    type: harness:platform:ConnectorAzureCloudProvider\n    properties:\n      azureEnvironmentType: AZURE\n      credentials:\n        azureManualDetails:\n          applicationId: application_id\n          auth:\n            azureClientSecretKey:\n              secretRef: account.${harness_platform_secret_text.test.id}\n            type: Secret\n          tenantId: tenant_id\n        type: ManualConfig\n      delegateSelectors:\n        - harness-delegate\n      description: example\n      identifier: identifier\n      tags:\n        - foo:bar\n  manualConfigCertificate:\n    type: harness:platform:ConnectorAzureCloudProvider\n    properties:\n      azureEnvironmentType: AZURE\n      credentials:\n        azureManualDetails:\n          applicationId: application_id\n          auth:\n            azureClientKeyCert:\n              certificateRef: account.${harness_platform_secret_text.test.id}\n            type: Certificate\n          tenantId: tenant_id\n        type: ManualConfig\n      delegateSelectors:\n        - harness-delegate\n      description: example\n      identifier: identifier\n      tags:\n        - foo:bar\n  inheritFromDelegateUserAssignedManagedIdentity:\n    type: harness:platform:ConnectorAzureCloudProvider\n    properties:\n      azureEnvironmentType: AZURE\n      credentials:\n        azureInheritFromDelegateDetails:\n          auth:\n            azureMsiAuthUa:\n              clientId: client_id\n            type: UserAssignedManagedIdentity\n        type: InheritFromDelegate\n      delegateSelectors:\n        - harness-delegate\n      description: example\n      identifier: identifier\n      tags:\n        - foo:bar\n  inheritFromDelegateSystemAssignedManagedIdentity:\n    type: harness:platform:ConnectorAzureCloudProvider\n    properties:\n      azureEnvironmentType: AZURE\n      credentials:\n        azureInheritFromDelegateDetails:\n          auth:\n            type: SystemAssignedManagedIdentity\n        type: InheritFromDelegate\n      delegateSelectors:\n        - harness-delegate\n      description: example\n      identifier: identifier\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level azure cloud provider connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorAzureCloudProvider:ConnectorAzureCloudProvider example \u003cconnector_id\u003e\n```\n\n Import org level azure cloud provider connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorAzureCloudProvider:ConnectorAzureCloudProvider example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level azure cloud provider connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorAzureCloudProvider:ConnectorAzureCloudProvider example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "azureEnvironmentType": {
                    "type": "string",
                    "description": "Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudProviderCredentials:ConnectorAzureCloudProviderCredentials",
                    "description": "Contains Azure connector credentials.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "azureEnvironmentType",
                "credentials",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "azureEnvironmentType": {
                    "type": "string",
                    "description": "Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/ConnectorAzureCloudProviderCredentials:ConnectorAzureCloudProviderCredentials",
                    "description": "Contains Azure connector credentials.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "credentials",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorAzureCloudProvider resources.\n",
                "properties": {
                    "azureEnvironmentType": {
                        "type": "string",
                        "description": "Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/ConnectorAzureCloudProviderCredentials:ConnectorAzureCloudProviderCredentials",
                        "description": "Contains Azure connector credentials.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "executeOnDelegate": {
                        "type": "boolean",
                        "description": "Execute on delegate or not.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorAzureKeyVault:ConnectorAzureKeyVault": {
            "description": "Resource for creating an Azure key vault in Harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.ConnectorAzureKeyVault(\"example\", {\n    azureEnvironmentType: \"AZURE\",\n    clientId: \"client_id\",\n    description: \"example\",\n    identifier: \"identifier\",\n    isDefault: false,\n    secretKey: \"account.secret_key\",\n    subscription: \"subscription\",\n    tags: [\"foo:bar\"],\n    tenantId: \"tenant_id\",\n    vaultName: \"vault_name\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.ConnectorAzureKeyVault(\"example\",\n    azure_environment_type=\"AZURE\",\n    client_id=\"client_id\",\n    description=\"example\",\n    identifier=\"identifier\",\n    is_default=False,\n    secret_key=\"account.secret_key\",\n    subscription=\"subscription\",\n    tags=[\"foo:bar\"],\n    tenant_id=\"tenant_id\",\n    vault_name=\"vault_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.ConnectorAzureKeyVault(\"example\", new()\n    {\n        AzureEnvironmentType = \"AZURE\",\n        ClientId = \"client_id\",\n        Description = \"example\",\n        Identifier = \"identifier\",\n        IsDefault = false,\n        SecretKey = \"account.secret_key\",\n        Subscription = \"subscription\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        TenantId = \"tenant_id\",\n        VaultName = \"vault_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorAzureKeyVault(ctx, \"example\", \u0026platform.ConnectorAzureKeyVaultArgs{\n\t\t\tAzureEnvironmentType: pulumi.String(\"AZURE\"),\n\t\t\tClientId:             pulumi.String(\"client_id\"),\n\t\t\tDescription:          pulumi.String(\"example\"),\n\t\t\tIdentifier:           pulumi.String(\"identifier\"),\n\t\t\tIsDefault:            pulumi.Bool(false),\n\t\t\tSecretKey:            pulumi.String(\"account.secret_key\"),\n\t\t\tSubscription:         pulumi.String(\"subscription\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tTenantId:  pulumi.String(\"tenant_id\"),\n\t\t\tVaultName: pulumi.String(\"vault_name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorAzureKeyVault;\nimport com.pulumi.harness.platform.ConnectorAzureKeyVaultArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ConnectorAzureKeyVault(\"example\", ConnectorAzureKeyVaultArgs.builder()        \n            .azureEnvironmentType(\"AZURE\")\n            .clientId(\"client_id\")\n            .description(\"example\")\n            .identifier(\"identifier\")\n            .isDefault(false)\n            .secretKey(\"account.secret_key\")\n            .subscription(\"subscription\")\n            .tags(\"foo:bar\")\n            .tenantId(\"tenant_id\")\n            .vaultName(\"vault_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:ConnectorAzureKeyVault\n    properties:\n      azureEnvironmentType: AZURE\n      clientId: client_id\n      description: example\n      identifier: identifier\n      isDefault: false\n      secretKey: account.secret_key\n      subscription: subscription\n      tags:\n        - foo:bar\n      tenantId: tenant_id\n      vaultName: vault_name\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level azure key vault connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorAzureKeyVault:ConnectorAzureKeyVault example \u003cconnector_id\u003e\n```\n\n Import org level azure key vault connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorAzureKeyVault:ConnectorAzureKeyVault example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level azure key vault connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorAzureKeyVault:ConnectorAzureKeyVault example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "azureEnvironmentType": {
                    "type": "string",
                    "description": "Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Application ID of the Azure App.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Specifies whether or not is the default value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The Harness text secret with the Azure authentication key as its value.\n"
                },
                "subscription": {
                    "type": "string",
                    "description": "Azure subscription ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure Active Directory (Azure AD) directory ID where you created your application.\n"
                },
                "vaultName": {
                    "type": "string",
                    "description": "Name of the vault.\n"
                }
            },
            "required": [
                "azureEnvironmentType",
                "clientId",
                "identifier",
                "name",
                "secretKey",
                "subscription",
                "tenantId",
                "vaultName"
            ],
            "inputProperties": {
                "azureEnvironmentType": {
                    "type": "string",
                    "description": "Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Application ID of the Azure App.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Specifies whether or not is the default value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The Harness text secret with the Azure authentication key as its value.\n"
                },
                "subscription": {
                    "type": "string",
                    "description": "Azure subscription ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure Active Directory (Azure AD) directory ID where you created your application.\n"
                },
                "vaultName": {
                    "type": "string",
                    "description": "Name of the vault.\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "identifier",
                "secretKey",
                "subscription",
                "tenantId",
                "vaultName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorAzureKeyVault resources.\n",
                "properties": {
                    "azureEnvironmentType": {
                        "type": "string",
                        "description": "Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Application ID of the Azure App.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Specifies whether or not is the default value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The Harness text secret with the Azure authentication key as its value.\n"
                    },
                    "subscription": {
                        "type": "string",
                        "description": "Azure subscription ID.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The Azure Active Directory (Azure AD) directory ID where you created your application.\n"
                    },
                    "vaultName": {
                        "type": "string",
                        "description": "Name of the vault.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorGcpCloudCost:ConnectorGcpCloudCost": {
            "description": "Resource for creating a GCP Cloud Cost connector in Harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.ConnectorGcpCloudCost(\"test\", {\n    billingExportSpec: {\n        dataSetId: \"data_set_id\",\n        tableId: \"table_id\",\n    },\n    description: \"test\",\n    featuresEnableds: [\n        \"BILLING\",\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    gcpProjectId: \"gcp_project_id\",\n    identifier: \"identifier\",\n    serviceAccountEmail: \"service_account_email\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.ConnectorGcpCloudCost(\"test\",\n    billing_export_spec=harness.platform.ConnectorGcpCloudCostBillingExportSpecArgs(\n        data_set_id=\"data_set_id\",\n        table_id=\"table_id\",\n    ),\n    description=\"test\",\n    features_enableds=[\n        \"BILLING\",\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    gcp_project_id=\"gcp_project_id\",\n    identifier=\"identifier\",\n    service_account_email=\"service_account_email\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.ConnectorGcpCloudCost(\"test\", new()\n    {\n        BillingExportSpec = new Harness.Platform.Inputs.ConnectorGcpCloudCostBillingExportSpecArgs\n        {\n            DataSetId = \"data_set_id\",\n            TableId = \"table_id\",\n        },\n        Description = \"test\",\n        FeaturesEnableds = new[]\n        {\n            \"BILLING\",\n            \"VISIBILITY\",\n            \"OPTIMIZATION\",\n        },\n        GcpProjectId = \"gcp_project_id\",\n        Identifier = \"identifier\",\n        ServiceAccountEmail = \"service_account_email\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorGcpCloudCost(ctx, \"test\", \u0026platform.ConnectorGcpCloudCostArgs{\n\t\t\tBillingExportSpec: \u0026platform.ConnectorGcpCloudCostBillingExportSpecArgs{\n\t\t\t\tDataSetId: pulumi.String(\"data_set_id\"),\n\t\t\t\tTableId:   pulumi.String(\"table_id\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tFeaturesEnableds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"BILLING\"),\n\t\t\t\tpulumi.String(\"VISIBILITY\"),\n\t\t\t\tpulumi.String(\"OPTIMIZATION\"),\n\t\t\t},\n\t\t\tGcpProjectId:        pulumi.String(\"gcp_project_id\"),\n\t\t\tIdentifier:          pulumi.String(\"identifier\"),\n\t\t\tServiceAccountEmail: pulumi.String(\"service_account_email\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorGcpCloudCost;\nimport com.pulumi.harness.platform.ConnectorGcpCloudCostArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorGcpCloudCostBillingExportSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ConnectorGcpCloudCost(\"test\", ConnectorGcpCloudCostArgs.builder()        \n            .billingExportSpec(ConnectorGcpCloudCostBillingExportSpecArgs.builder()\n                .dataSetId(\"data_set_id\")\n                .tableId(\"table_id\")\n                .build())\n            .description(\"test\")\n            .featuresEnableds(            \n                \"BILLING\",\n                \"VISIBILITY\",\n                \"OPTIMIZATION\")\n            .gcpProjectId(\"gcp_project_id\")\n            .identifier(\"identifier\")\n            .serviceAccountEmail(\"service_account_email\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:ConnectorGcpCloudCost\n    properties:\n      billingExportSpec:\n        dataSetId: data_set_id\n        tableId: table_id\n      description: test\n      featuresEnableds:\n        - BILLING\n        - VISIBILITY\n        - OPTIMIZATION\n      gcpProjectId: gcp_project_id\n      identifier: identifier\n      serviceAccountEmail: service_account_email\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level gcp cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorGcpCloudCost:ConnectorGcpCloudCost example \u003cconnector_id\u003e\n```\n\n Import org level gcp cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorGcpCloudCost:ConnectorGcpCloudCost example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level gcp cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorGcpCloudCost:ConnectorGcpCloudCost example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "billingExportSpec": {
                    "$ref": "#/types/harness:platform/ConnectorGcpCloudCostBillingExportSpec:ConnectorGcpCloudCostBillingExportSpec",
                    "description": "Returns billing details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which features to enable among Billing, Optimization, and Visibility.\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP Project Id.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "Email corresponding to the Service Account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "featuresEnableds",
                "gcpProjectId",
                "identifier",
                "name",
                "serviceAccountEmail"
            ],
            "inputProperties": {
                "billingExportSpec": {
                    "$ref": "#/types/harness:platform/ConnectorGcpCloudCostBillingExportSpec:ConnectorGcpCloudCostBillingExportSpec",
                    "description": "Returns billing details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which features to enable among Billing, Optimization, and Visibility.\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP Project Id.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "Email corresponding to the Service Account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "featuresEnableds",
                "gcpProjectId",
                "identifier",
                "serviceAccountEmail"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorGcpCloudCost resources.\n",
                "properties": {
                    "billingExportSpec": {
                        "$ref": "#/types/harness:platform/ConnectorGcpCloudCostBillingExportSpec:ConnectorGcpCloudCostBillingExportSpec",
                        "description": "Returns billing details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates which features to enable among Billing, Optimization, and Visibility.\n"
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "GCP Project Id.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "Email corresponding to the Service Account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorGcpSecretManager:ConnectorGcpSecretManager": {
            "description": "Resource for creating a GCP Secret Manager connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst gcpSm = new harness.platform.ConnectorGcpSecretManager(\"gcpSm\", {\n    credentialsRef: `account.${harness_platform_secret_text.test.id}`,\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ngcp_sm = harness.platform.ConnectorGcpSecretManager(\"gcpSm\",\n    credentials_ref=f\"account.{harness_platform_secret_text['test']['id']}\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gcpSm = new Harness.Platform.ConnectorGcpSecretManager(\"gcpSm\", new()\n    {\n        CredentialsRef = $\"account.{harness_platform_secret_text.Test.Id}\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorGcpSecretManager(ctx, \"gcpSm\", \u0026platform.ConnectorGcpSecretManagerArgs{\n\t\t\tCredentialsRef: pulumi.String(fmt.Sprintf(\"account.%v\", harness_platform_secret_text.Test.Id)),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorGcpSecretManager;\nimport com.pulumi.harness.platform.ConnectorGcpSecretManagerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var gcpSm = new ConnectorGcpSecretManager(\"gcpSm\", ConnectorGcpSecretManagerArgs.builder()        \n            .credentialsRef(String.format(\"account.%s\", harness_platform_secret_text.test().id()))\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  gcpSm:\n    type: harness:platform:ConnectorGcpSecretManager\n    properties:\n      credentialsRef: account.${harness_platform_secret_text.test.id}\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level gcp secret manager connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorGcpSecretManager:ConnectorGcpSecretManager example \u003cconnector_id\u003e\n```\n\n Import org level gcp secret manager connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorGcpSecretManager:ConnectorGcpSecretManager example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level gcp secret manager connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorGcpSecretManager:ConnectorGcpSecretManager example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "credentialsRef": {
                    "type": "string",
                    "description": "Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Indicative if this is default Secret manager for secrets.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "credentialsRef",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "credentialsRef": {
                    "type": "string",
                    "description": "Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Indicative if this is default Secret manager for secrets.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "credentialsRef",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorGcpSecretManager resources.\n",
                "properties": {
                    "credentialsRef": {
                        "type": "string",
                        "description": "Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Indicative if this is default Secret manager for secrets.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorJenkins:ConnectorJenkins": {
            "description": "Resource for creating a Jenkins connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Auth mechanism bearer token\nconst test = new harness.platform.ConnectorJenkins(\"test\", {\n    auth: {\n        jenkinsBearerToken: {\n            tokenRef: `account.${harness_platform_secret_text.test.id}`,\n        },\n        type: \"Bearer Token(HTTP Header)\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    jenkinsUrl: \"https://jenkinss.com/\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Auth mechanism bearer token\ntest = harness.platform.ConnectorJenkins(\"test\",\n    auth=harness.platform.ConnectorJenkinsAuthArgs(\n        jenkins_bearer_token=harness.platform.ConnectorJenkinsAuthJenkinsBearerTokenArgs(\n            token_ref=f\"account.{harness_platform_secret_text['test']['id']}\",\n        ),\n        type=\"Bearer Token(HTTP Header)\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    jenkins_url=\"https://jenkinss.com/\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Auth mechanism bearer token\n    var test = new Harness.Platform.ConnectorJenkins(\"test\", new()\n    {\n        Auth = new Harness.Platform.Inputs.ConnectorJenkinsAuthArgs\n        {\n            JenkinsBearerToken = new Harness.Platform.Inputs.ConnectorJenkinsAuthJenkinsBearerTokenArgs\n            {\n                TokenRef = $\"account.{harness_platform_secret_text.Test.Id}\",\n            },\n            Type = \"Bearer Token(HTTP Header)\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        JenkinsUrl = \"https://jenkinss.com/\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorJenkins(ctx, \"test\", \u0026platform.ConnectorJenkinsArgs{\n\t\t\tAuth: \u0026platform.ConnectorJenkinsAuthArgs{\n\t\t\t\tJenkinsBearerToken: \u0026platform.ConnectorJenkinsAuthJenkinsBearerTokenArgs{\n\t\t\t\t\tTokenRef: pulumi.String(fmt.Sprintf(\"account.%v\", harness_platform_secret_text.Test.Id)),\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"Bearer Token(HTTP Header)\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tJenkinsUrl:  pulumi.String(\"https://jenkinss.com/\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorJenkins;\nimport com.pulumi.harness.platform.ConnectorJenkinsArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorJenkinsAuthArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorJenkinsAuthJenkinsBearerTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ConnectorJenkins(\"test\", ConnectorJenkinsArgs.builder()        \n            .auth(ConnectorJenkinsAuthArgs.builder()\n                .jenkinsBearerToken(ConnectorJenkinsAuthJenkinsBearerTokenArgs.builder()\n                    .tokenRef(String.format(\"account.%s\", harness_platform_secret_text.test().id()))\n                    .build())\n                .type(\"Bearer Token(HTTP Header)\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .jenkinsUrl(\"https://jenkinss.com/\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Auth mechanism bearer token\n  test:\n    type: harness:platform:ConnectorJenkins\n    properties:\n      auth:\n        jenkinsBearerToken:\n          tokenRef: account.${harness_platform_secret_text.test.id}\n        type: Bearer Token(HTTP Header)\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      jenkinsUrl: https://jenkinss.com/\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level jenkins connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorJenkins:ConnectorJenkins example \u003cconnector_id\u003e\n```\n\n Import org level jenkins connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorJenkins:ConnectorJenkins example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level jenkins connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorJenkins:ConnectorJenkins example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "auth": {
                    "$ref": "#/types/harness:platform/ConnectorJenkinsAuth:ConnectorJenkinsAuth",
                    "description": "This entity contains the details for Jenkins Authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "jenkinsUrl": {
                    "type": "string",
                    "description": "Jenkins Url.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "jenkinsUrl",
                "name"
            ],
            "inputProperties": {
                "auth": {
                    "$ref": "#/types/harness:platform/ConnectorJenkinsAuth:ConnectorJenkinsAuth",
                    "description": "This entity contains the details for Jenkins Authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "jenkinsUrl": {
                    "type": "string",
                    "description": "Jenkins Url.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "jenkinsUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorJenkins resources.\n",
                "properties": {
                    "auth": {
                        "$ref": "#/types/harness:platform/ConnectorJenkinsAuth:ConnectorJenkinsAuth",
                        "description": "This entity contains the details for Jenkins Authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "jenkinsUrl": {
                        "type": "string",
                        "description": "Jenkins Url.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorKubernetesCloudCost:ConnectorKubernetesCloudCost": {
            "description": "Resource for creating a Kubernetes Cloud Cost connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.ConnectorKubernetesCloudCost(\"example\", {\n    connectorRef: \"connector_ref\",\n    description: \"example\",\n    featuresEnableds: [\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.ConnectorKubernetesCloudCost(\"example\",\n    connector_ref=\"connector_ref\",\n    description=\"example\",\n    features_enableds=[\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.ConnectorKubernetesCloudCost(\"example\", new()\n    {\n        ConnectorRef = \"connector_ref\",\n        Description = \"example\",\n        FeaturesEnableds = new[]\n        {\n            \"VISIBILITY\",\n            \"OPTIMIZATION\",\n        },\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorKubernetesCloudCost(ctx, \"example\", \u0026platform.ConnectorKubernetesCloudCostArgs{\n\t\t\tConnectorRef: pulumi.String(\"connector_ref\"),\n\t\t\tDescription:  pulumi.String(\"example\"),\n\t\t\tFeaturesEnableds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"VISIBILITY\"),\n\t\t\t\tpulumi.String(\"OPTIMIZATION\"),\n\t\t\t},\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorKubernetesCloudCost;\nimport com.pulumi.harness.platform.ConnectorKubernetesCloudCostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ConnectorKubernetesCloudCost(\"example\", ConnectorKubernetesCloudCostArgs.builder()        \n            .connectorRef(\"connector_ref\")\n            .description(\"example\")\n            .featuresEnableds(            \n                \"VISIBILITY\",\n                \"OPTIMIZATION\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:ConnectorKubernetesCloudCost\n    properties:\n      connectorRef: connector_ref\n      description: example\n      featuresEnableds:\n        - VISIBILITY\n        - OPTIMIZATION\n      identifier: identifier\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level kubernetes cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorKubernetesCloudCost:ConnectorKubernetesCloudCost example \u003cconnector_id\u003e\n```\n\n Import org level kubernetes cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorKubernetesCloudCost:ConnectorKubernetesCloudCost example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level kubernetes cloud cost connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorKubernetesCloudCost:ConnectorKubernetesCloudCost example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "connectorRef": {
                    "type": "string",
                    "description": "Reference of the Connector. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "connectorRef",
                "featuresEnableds",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "connectorRef": {
                    "type": "string",
                    "description": "Reference of the Connector. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "connectorRef",
                "featuresEnableds",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorKubernetesCloudCost resources.\n",
                "properties": {
                    "connectorRef": {
                        "type": "string",
                        "description": "Reference of the Connector. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorOciHelm:ConnectorOciHelm": {
            "description": "Resource for creating a OCI Helm connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Credential type anonymous\nconst test = new harness.platform.ConnectorOciHelm(\"test\", {\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"admin.azurecr.io\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Credential type anonymous\ntest = harness.platform.ConnectorOciHelm(\"test\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"admin.azurecr.io\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Credential type anonymous\n    var test = new Harness.Platform.ConnectorOciHelm(\"test\", new()\n    {\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"admin.azurecr.io\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorOciHelm(ctx, \"test\", \u0026platform.ConnectorOciHelmArgs{\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"admin.azurecr.io\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorOciHelm;\nimport com.pulumi.harness.platform.ConnectorOciHelmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ConnectorOciHelm(\"test\", ConnectorOciHelmArgs.builder()        \n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"admin.azurecr.io\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Credential type anonymous\n  test:\n    type: harness:platform:ConnectorOciHelm\n    properties:\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: admin.azurecr.io\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level helm connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorOciHelm:ConnectorOciHelm example \u003cconnector_id\u003e\n```\n\n Import org level helm connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorOciHelm:ConnectorOciHelm example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level helm connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorOciHelm:ConnectorOciHelm example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ConnectorOciHelmCredentials:ConnectorOciHelmCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm server.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ConnectorOciHelmCredentials:ConnectorOciHelmCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm server.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorOciHelm resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/ConnectorOciHelmCredentials:ConnectorOciHelmCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the helm server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorServiceNow:ConnectorServiceNow": {
            "description": "Resource for creating a Service Now connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Credential type AdfsClientCredentialsWithCertificate\nconst test = new harness.platform.ConnectorServiceNow(\"test\", {\n    auth: {\n        adfs: {\n            adfsUrl: \"https://adfs_url.com\",\n            certificateRef: \"account.certificate_ref\",\n            clientIdRef: \"account.client_id_ref\",\n            privateKeyRef: \"account.private_key_ref}\",\n            resourceIdRef: \"account.resource_id_ref\",\n        },\n        authType: \"AdfsClientCredentialsWithCertificate\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    serviceNowUrl: \"https://servicenow.com\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Credential type AdfsClientCredentialsWithCertificate\ntest = harness.platform.ConnectorServiceNow(\"test\",\n    auth=harness.platform.ConnectorServiceNowAuthArgs(\n        adfs=harness.platform.ConnectorServiceNowAuthAdfsArgs(\n            adfs_url=\"https://adfs_url.com\",\n            certificate_ref=\"account.certificate_ref\",\n            client_id_ref=\"account.client_id_ref\",\n            private_key_ref=\"account.private_key_ref}\",\n            resource_id_ref=\"account.resource_id_ref\",\n        ),\n        auth_type=\"AdfsClientCredentialsWithCertificate\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    service_now_url=\"https://servicenow.com\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Credential type AdfsClientCredentialsWithCertificate\n    var test = new Harness.Platform.ConnectorServiceNow(\"test\", new()\n    {\n        Auth = new Harness.Platform.Inputs.ConnectorServiceNowAuthArgs\n        {\n            Adfs = new Harness.Platform.Inputs.ConnectorServiceNowAuthAdfsArgs\n            {\n                AdfsUrl = \"https://adfs_url.com\",\n                CertificateRef = \"account.certificate_ref\",\n                ClientIdRef = \"account.client_id_ref\",\n                PrivateKeyRef = \"account.private_key_ref}\",\n                ResourceIdRef = \"account.resource_id_ref\",\n            },\n            AuthType = \"AdfsClientCredentialsWithCertificate\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        ServiceNowUrl = \"https://servicenow.com\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorServiceNow(ctx, \"test\", \u0026platform.ConnectorServiceNowArgs{\n\t\t\tAuth: \u0026platform.ConnectorServiceNowAuthArgs{\n\t\t\t\tAdfs: \u0026platform.ConnectorServiceNowAuthAdfsArgs{\n\t\t\t\t\tAdfsUrl:        pulumi.String(\"https://adfs_url.com\"),\n\t\t\t\t\tCertificateRef: pulumi.String(\"account.certificate_ref\"),\n\t\t\t\t\tClientIdRef:    pulumi.String(\"account.client_id_ref\"),\n\t\t\t\t\tPrivateKeyRef:  pulumi.String(\"account.private_key_ref}\"),\n\t\t\t\t\tResourceIdRef:  pulumi.String(\"account.resource_id_ref\"),\n\t\t\t\t},\n\t\t\t\tAuthType: pulumi.String(\"AdfsClientCredentialsWithCertificate\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription:   pulumi.String(\"test\"),\n\t\t\tIdentifier:    pulumi.String(\"identifier\"),\n\t\t\tServiceNowUrl: pulumi.String(\"https://servicenow.com\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorServiceNow;\nimport com.pulumi.harness.platform.ConnectorServiceNowArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorServiceNowAuthArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorServiceNowAuthAdfsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ConnectorServiceNow(\"test\", ConnectorServiceNowArgs.builder()        \n            .auth(ConnectorServiceNowAuthArgs.builder()\n                .adfs(ConnectorServiceNowAuthAdfsArgs.builder()\n                    .adfsUrl(\"https://adfs_url.com\")\n                    .certificateRef(\"account.certificate_ref\")\n                    .clientIdRef(\"account.client_id_ref\")\n                    .privateKeyRef(\"account.private_key_ref}\")\n                    .resourceIdRef(\"account.resource_id_ref\")\n                    .build())\n                .authType(\"AdfsClientCredentialsWithCertificate\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .serviceNowUrl(\"https://servicenow.com\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Credential type AdfsClientCredentialsWithCertificate\n  test:\n    type: harness:platform:ConnectorServiceNow\n    properties:\n      auth:\n        adfs:\n          adfsUrl: https://adfs_url.com\n          certificateRef: account.certificate_ref\n          clientIdRef: account.client_id_ref\n          privateKeyRef: account.private_key_ref}\n          resourceIdRef: account.resource_id_ref\n        authType: AdfsClientCredentialsWithCertificate\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      serviceNowUrl: https://servicenow.com\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level service now connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorServiceNow:ConnectorServiceNow example \u003cconnector_id\u003e\n```\n\n Import org level service now connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorServiceNow:ConnectorServiceNow example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level service now connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorServiceNow:ConnectorServiceNow example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "auth": {
                    "$ref": "#/types/harness:platform/ConnectorServiceNowAuth:ConnectorServiceNowAuth",
                    "description": "The credentials to use for the service now authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceNowUrl": {
                    "type": "string",
                    "description": "URL of service now.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "required": [
                "auth",
                "identifier",
                "name",
                "passwordRef",
                "serviceNowUrl",
                "username",
                "usernameRef"
            ],
            "inputProperties": {
                "auth": {
                    "$ref": "#/types/harness:platform/ConnectorServiceNowAuth:ConnectorServiceNowAuth",
                    "description": "The credentials to use for the service now authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceNowUrl": {
                    "type": "string",
                    "description": "URL of service now.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "requiredInputs": [
                "auth",
                "identifier",
                "serviceNowUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorServiceNow resources.\n",
                "properties": {
                    "auth": {
                        "$ref": "#/types/harness:platform/ConnectorServiceNowAuth:ConnectorServiceNowAuth",
                        "description": "The credentials to use for the service now authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceNowUrl": {
                        "type": "string",
                        "description": "URL of service now.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use for authentication.\n"
                    },
                    "usernameRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorSpot:ConnectorSpot": {
            "description": "Resource for creating a Spot connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst spot = new harness.platform.ConnectorSpot(\"spot\", {\n    description: \"description of spot connector\",\n    identifier: \"example_spot_cloud_provider\",\n    permanentToken: {\n        apiTokenRef: \"account.TEST_spot_api_token\",\n        delegateSelectors: [\"harness-delegate\"],\n        executeOnDelegate: false,\n        spotAccountId: \"\u003cmy-account-id\u003e\",\n    },\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nspot = harness.platform.ConnectorSpot(\"spot\",\n    description=\"description of spot connector\",\n    identifier=\"example_spot_cloud_provider\",\n    permanent_token=harness.platform.ConnectorSpotPermanentTokenArgs(\n        api_token_ref=\"account.TEST_spot_api_token\",\n        delegate_selectors=[\"harness-delegate\"],\n        execute_on_delegate=False,\n        spot_account_id=\"\u003cmy-account-id\u003e\",\n    ),\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var spot = new Harness.Platform.ConnectorSpot(\"spot\", new()\n    {\n        Description = \"description of spot connector\",\n        Identifier = \"example_spot_cloud_provider\",\n        PermanentToken = new Harness.Platform.Inputs.ConnectorSpotPermanentTokenArgs\n        {\n            ApiTokenRef = \"account.TEST_spot_api_token\",\n            DelegateSelectors = new[]\n            {\n                \"harness-delegate\",\n            },\n            ExecuteOnDelegate = false,\n            SpotAccountId = \"\u003cmy-account-id\u003e\",\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorSpot(ctx, \"spot\", \u0026platform.ConnectorSpotArgs{\n\t\t\tDescription: pulumi.String(\"description of spot connector\"),\n\t\t\tIdentifier:  pulumi.String(\"example_spot_cloud_provider\"),\n\t\t\tPermanentToken: \u0026platform.ConnectorSpotPermanentTokenArgs{\n\t\t\t\tApiTokenRef: pulumi.String(\"account.TEST_spot_api_token\"),\n\t\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t\t},\n\t\t\t\tExecuteOnDelegate: pulumi.Bool(false),\n\t\t\t\tSpotAccountId:     pulumi.String(\"\u003cmy-account-id\u003e\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorSpot;\nimport com.pulumi.harness.platform.ConnectorSpotArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorSpotPermanentTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var spot = new ConnectorSpot(\"spot\", ConnectorSpotArgs.builder()        \n            .description(\"description of spot connector\")\n            .identifier(\"example_spot_cloud_provider\")\n            .permanentToken(ConnectorSpotPermanentTokenArgs.builder()\n                .apiTokenRef(\"account.TEST_spot_api_token\")\n                .delegateSelectors(\"harness-delegate\")\n                .executeOnDelegate(false)\n                .spotAccountId(\"\u003cmy-account-id\u003e\")\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  spot:\n    type: harness:platform:ConnectorSpot\n    properties:\n      description: description of spot connector\n      identifier: example_spot_cloud_provider\n      permanentToken:\n        apiTokenRef: account.TEST_spot_api_token\n        delegateSelectors:\n          - harness-delegate\n        executeOnDelegate: false\n        spotAccountId: \u003cmy-account-id\u003e\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using spot cloud provider connector id\n\n```sh\n $ pulumi import harness:platform/connectorSpot:ConnectorSpot example \u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "permanentToken": {
                    "$ref": "#/types/harness:platform/ConnectorSpotPermanentToken:ConnectorSpotPermanentToken",
                    "description": "Authenticate to Spot using account id and permanent token.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "permanentToken"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "permanentToken": {
                    "$ref": "#/types/harness:platform/ConnectorSpotPermanentToken:ConnectorSpotPermanentToken",
                    "description": "Authenticate to Spot using account id and permanent token.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "permanentToken"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorSpot resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permanentToken": {
                        "$ref": "#/types/harness:platform/ConnectorSpotPermanentToken:ConnectorSpotPermanentToken",
                        "description": "Authenticate to Spot using account id and permanent token.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorTas:ConnectorTas": {
            "description": "Resource for creating an Tas in Harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst tas = new harness.platform.ConnectorTas(\"tas\", {\n    credentials: {\n        tasManualDetails: {\n            endpointUrl: \"https://tas.example.com\",\n            passwordRef: \"account.secret_id\",\n            usernameRef: \"account.username_id\",\n        },\n        type: \"ManualConfig\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"description of tas connector\",\n    executeOnDelegate: true,\n    identifier: \"example_tas_cloud_provider\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntas = harness.platform.ConnectorTas(\"tas\",\n    credentials=harness.platform.ConnectorTasCredentialsArgs(\n        tas_manual_details=harness.platform.ConnectorTasCredentialsTasManualDetailsArgs(\n            endpoint_url=\"https://tas.example.com\",\n            password_ref=\"account.secret_id\",\n            username_ref=\"account.username_id\",\n        ),\n        type=\"ManualConfig\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"description of tas connector\",\n    execute_on_delegate=True,\n    identifier=\"example_tas_cloud_provider\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tas = new Harness.Platform.ConnectorTas(\"tas\", new()\n    {\n        Credentials = new Harness.Platform.Inputs.ConnectorTasCredentialsArgs\n        {\n            TasManualDetails = new Harness.Platform.Inputs.ConnectorTasCredentialsTasManualDetailsArgs\n            {\n                EndpointUrl = \"https://tas.example.com\",\n                PasswordRef = \"account.secret_id\",\n                UsernameRef = \"account.username_id\",\n            },\n            Type = \"ManualConfig\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"description of tas connector\",\n        ExecuteOnDelegate = true,\n        Identifier = \"example_tas_cloud_provider\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewConnectorTas(ctx, \"tas\", \u0026platform.ConnectorTasArgs{\n\t\t\tCredentials: \u0026platform.ConnectorTasCredentialsArgs{\n\t\t\t\tTasManualDetails: \u0026platform.ConnectorTasCredentialsTasManualDetailsArgs{\n\t\t\t\t\tEndpointUrl: pulumi.String(\"https://tas.example.com\"),\n\t\t\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t\t\t\tUsernameRef: pulumi.String(\"account.username_id\"),\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"ManualConfig\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription:       pulumi.String(\"description of tas connector\"),\n\t\t\tExecuteOnDelegate: pulumi.Bool(true),\n\t\t\tIdentifier:        pulumi.String(\"example_tas_cloud_provider\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorTas;\nimport com.pulumi.harness.platform.ConnectorTasArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorTasCredentialsArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorTasCredentialsTasManualDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tas = new ConnectorTas(\"tas\", ConnectorTasArgs.builder()        \n            .credentials(ConnectorTasCredentialsArgs.builder()\n                .tasManualDetails(ConnectorTasCredentialsTasManualDetailsArgs.builder()\n                    .endpointUrl(\"https://tas.example.com\")\n                    .passwordRef(\"account.secret_id\")\n                    .usernameRef(\"account.username_id\")\n                    .build())\n                .type(\"ManualConfig\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"description of tas connector\")\n            .executeOnDelegate(true)\n            .identifier(\"example_tas_cloud_provider\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tas:\n    type: harness:platform:ConnectorTas\n    properties:\n      credentials:\n        tasManualDetails:\n          endpointUrl: https://tas.example.com\n          passwordRef: account.secret_id\n          usernameRef: account.username_id\n        type: ManualConfig\n      delegateSelectors:\n        - harness-delegate\n      description: description of tas connector\n      executeOnDelegate: true\n      identifier: example_tas_cloud_provider\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level tas connector\n\n```sh\n $ pulumi import harness:platform/connectorTas:ConnectorTas example \u003cconnector_id\u003e\n```\n\n Import organization level tas connector\n\n```sh\n $ pulumi import harness:platform/connectorTas:ConnectorTas example \u003corganization_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level tas connector\n\n```sh\n $ pulumi import harness:platform/connectorTas:ConnectorTas example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ConnectorTasCredentials:ConnectorTasCredentials",
                    "description": "Contains Tas connector credentials.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "credentials",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ConnectorTasCredentials:ConnectorTasCredentials",
                    "description": "Contains Tas connector credentials.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "credentials",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorTas resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/ConnectorTasCredentials:ConnectorTasCredentials",
                        "description": "Contains Tas connector credentials.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "executeOnDelegate": {
                        "type": "boolean",
                        "description": "Execute on delegate or not.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/connectorTerraformCloud:ConnectorTerraformCloud": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ConnectorTerraformCloud;\nimport com.pulumi.harness.platform.ConnectorTerraformCloudArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorTerraformCloudCredentialsArgs;\nimport com.pulumi.harness.platform.inputs.ConnectorTerraformCloudCredentialsApiTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var terraformCloud = new ConnectorTerraformCloud(\"terraformCloud\", ConnectorTerraformCloudArgs.builder()        \n            .credentials(ConnectorTerraformCloudCredentialsArgs.builder()\n                .apiToken(ConnectorTerraformCloudCredentialsApiTokenArgs.builder()\n                    .apiTokenRef(\"account.TEST_terraform_cloud_api_token\")\n                    .build())\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"description of terraform cloud connector\")\n            .executeOnDelegate(false)\n            .identifier(\"example_terraform_cloud_connector\")\n            .tags(\"foo:bar\")\n            .url(\"https://app.terraform.io/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  terraformCloud:\n    type: harness:platform:ConnectorTerraformCloud\n    properties:\n      credentials:\n        apiToken:\n          apiTokenRef: account.TEST_terraform_cloud_api_token\n      delegateSelectors:\n        - harness-delegate\n      description: description of terraform cloud connector\n      executeOnDelegate: false\n      identifier: example_terraform_cloud_connector\n      tags:\n        - foo:bar\n      url: https://app.terraform.io/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level Terraform Cloud provider connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorTerraformCloud:ConnectorTerraformCloud example \u003cconnector_id\u003e\n```\n\n Import org level Terraform Cloud provider connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorTerraformCloud:ConnectorTerraformCloud example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level Terraform Cloud provider connector\n\n\n\n```sh\n $ pulumi import harness:platform/connectorTerraformCloud:ConnectorTerraformCloud example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ConnectorTerraformCloudCredentials:ConnectorTerraformCloudCredentials",
                    "description": "Credentials to connect to the Terraform Cloud platform.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only using delegates with these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Terraform Cloud platform.\n"
                }
            },
            "required": [
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ConnectorTerraformCloudCredentials:ConnectorTerraformCloudCredentials",
                    "description": "Credentials to connect to the Terraform Cloud platform.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only using delegates with these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Terraform Cloud platform.\n"
                }
            },
            "requiredInputs": [
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorTerraformCloud resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/ConnectorTerraformCloudCredentials:ConnectorTerraformCloudCredentials",
                        "description": "Credentials to connect to the Terraform Cloud platform.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect only using delegates with these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Terraform Cloud platform.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/datadogConnector:DatadogConnector": {
            "description": "Resource for creating a Datadog connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.DatadogConnector(\"test\", {\n    apiKeyRef: \"account.secret_id\",\n    applicationKeyRef: \"account.secret_id\",\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://datadog.com\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.DatadogConnector(\"test\",\n    api_key_ref=\"account.secret_id\",\n    application_key_ref=\"account.secret_id\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://datadog.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.DatadogConnector(\"test\", new()\n    {\n        ApiKeyRef = \"account.secret_id\",\n        ApplicationKeyRef = \"account.secret_id\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://datadog.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewDatadogConnector(ctx, \"test\", \u0026platform.DatadogConnectorArgs{\n\t\t\tApiKeyRef:         pulumi.String(\"account.secret_id\"),\n\t\t\tApplicationKeyRef: pulumi.String(\"account.secret_id\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://datadog.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.DatadogConnector;\nimport com.pulumi.harness.platform.DatadogConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DatadogConnector(\"test\", DatadogConnectorArgs.builder()        \n            .apiKeyRef(\"account.secret_id\")\n            .applicationKeyRef(\"account.secret_id\")\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://datadog.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:DatadogConnector\n    properties:\n      apiKeyRef: account.secret_id\n      applicationKeyRef: account.secret_id\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://datadog.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level datadog connector\n\n\n\n```sh\n $ pulumi import harness:platform/datadogConnector:DatadogConnector example \u003cconnector_id\u003e\n```\n\n Import org level datadog connector\n\n\n\n```sh\n $ pulumi import harness:platform/datadogConnector:DatadogConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level datadog connector\n\n\n\n```sh\n $ pulumi import harness:platform/datadogConnector:DatadogConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "applicationKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the application key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Datadog server.\n"
                }
            },
            "required": [
                "apiKeyRef",
                "applicationKeyRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "applicationKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the application key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Datadog server.\n"
                }
            },
            "requiredInputs": [
                "apiKeyRef",
                "applicationKeyRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatadogConnector resources.\n",
                "properties": {
                    "apiKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "applicationKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the application key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Datadog server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/dockerConnector:DockerConnector": {
            "description": "Resource for creating a Docker connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// credentials username password\nconst test = new harness.platform.DockerConnector(\"test\", {\n    credentials: {\n        passwordRef: \"account.secret_id\",\n        username: \"admin\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifer\",\n    tags: [\"foo:bar\"],\n    type: \"DockerHub\",\n    url: \"https://hub.docker.com\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# credentials username password\ntest = harness.platform.DockerConnector(\"test\",\n    credentials=harness.platform.DockerConnectorCredentialsArgs(\n        password_ref=\"account.secret_id\",\n        username=\"admin\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifer\",\n    tags=[\"foo:bar\"],\n    type=\"DockerHub\",\n    url=\"https://hub.docker.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // credentials username password\n    var test = new Harness.Platform.DockerConnector(\"test\", new()\n    {\n        Credentials = new Harness.Platform.Inputs.DockerConnectorCredentialsArgs\n        {\n            PasswordRef = \"account.secret_id\",\n            Username = \"admin\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifer\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Type = \"DockerHub\",\n        Url = \"https://hub.docker.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewDockerConnector(ctx, \"test\", \u0026platform.DockerConnectorArgs{\n\t\t\tCredentials: \u0026platform.DockerConnectorCredentialsArgs{\n\t\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t\t\tUsername:    pulumi.String(\"admin\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifer\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"DockerHub\"),\n\t\t\tUrl:  pulumi.String(\"https://hub.docker.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.DockerConnector;\nimport com.pulumi.harness.platform.DockerConnectorArgs;\nimport com.pulumi.harness.platform.inputs.DockerConnectorCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DockerConnector(\"test\", DockerConnectorArgs.builder()        \n            .credentials(DockerConnectorCredentialsArgs.builder()\n                .passwordRef(\"account.secret_id\")\n                .username(\"admin\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifer\")\n            .tags(\"foo:bar\")\n            .type(\"DockerHub\")\n            .url(\"https://hub.docker.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # credentials username password\n  test:\n    type: harness:platform:DockerConnector\n    properties:\n      credentials:\n        passwordRef: account.secret_id\n        username: admin\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifer\n      tags:\n        - foo:bar\n      type: DockerHub\n      url: https://hub.docker.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level docker connector\n\n\n\n```sh\n $ pulumi import harness:platform/dockerConnector:DockerConnector example \u003cconnector_id\u003e\n```\n\n Import org level docker connector\n\n\n\n```sh\n $ pulumi import harness:platform/dockerConnector:DockerConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level docker connector\n\n\n\n```sh\n $ pulumi import harness:platform/dockerConnector:DockerConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/DockerConnectorCredentials:DockerConnectorCredentials",
                    "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the docker registry.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "type",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/DockerConnectorCredentials:DockerConnectorCredentials",
                    "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the docker registry.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "type",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/DockerConnectorCredentials:DockerConnectorCredentials",
                        "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the docker registry.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/dynatraceConnector:DynatraceConnector": {
            "description": "Resource for creating a Dynatrace connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.DynatraceConnector(\"test\", {\n    apiTokenRef: \"account.secret_id\",\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://dynatrace.com/\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.DynatraceConnector(\"test\",\n    api_token_ref=\"account.secret_id\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://dynatrace.com/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.DynatraceConnector(\"test\", new()\n    {\n        ApiTokenRef = \"account.secret_id\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://dynatrace.com/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewDynatraceConnector(ctx, \"test\", \u0026platform.DynatraceConnectorArgs{\n\t\t\tApiTokenRef: pulumi.String(\"account.secret_id\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://dynatrace.com/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.DynatraceConnector;\nimport com.pulumi.harness.platform.DynatraceConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DynatraceConnector(\"test\", DynatraceConnectorArgs.builder()        \n            .apiTokenRef(\"account.secret_id\")\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://dynatrace.com/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:DynatraceConnector\n    properties:\n      apiTokenRef: account.secret_id\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://dynatrace.com/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level dynatrace connector\n\n\n\n```sh\n $ pulumi import harness:platform/dynatraceConnector:DynatraceConnector example \u003cconnector_id\u003e\n```\n\n Import org level dynatrace connector\n\n\n\n```sh\n $ pulumi import harness:platform/dynatraceConnector:DynatraceConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level dynatrace connector\n\n\n\n```sh\n $ pulumi import harness:platform/dynatraceConnector:DynatraceConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Dynatrace server.\n"
                }
            },
            "required": [
                "apiTokenRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Dynatrace server.\n"
                }
            },
            "requiredInputs": [
                "apiTokenRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DynatraceConnector resources.\n",
                "properties": {
                    "apiTokenRef": {
                        "type": "string",
                        "description": "The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Dynatrace server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/environment:Environment": {
            "description": "Resource for creating a Harness environment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.Environment(\"example\", {\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    tags: [\n        \"foo:bar\",\n        \"baz\",\n    ],\n    type: \"PreProduction\",\n    yaml: `\t\t\t   environment:\n         name: name\n         identifier: identifier\n         orgIdentifier: org_id\n         projectIdentifier: project_id\n         type: PreProduction\n         tags:\n           foo: bar\n           baz: \"\"\n         variables:\n           - name: envVar1\n             type: String\n             value: v1\n             description: \"\"\n           - name: envVar2\n             type: String\n             value: v2\n             description: \"\"\n         overrides:\n           manifests:\n             - manifest:\n                 identifier: manifestEnv\n                 type: Values\n                 spec:\n                   store:\n                     type: Git\n                     spec:\n                       connectorRef: \u003c+input\u003e\n                       gitFetchType: Branch\n                       paths:\n                         - file1\n                       repoName: \u003c+input\u003e\n                       branch: master\n           configFiles:\n             - configFile:\n                 identifier: configFileEnv\n                 spec:\n                   store:\n                     type: Harness\n                     spec:\n                       files:\n                         - account:/Add-ons/svcOverrideTest\n                       secretFiles: []\n\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.Environment(\"example\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    tags=[\n        \"foo:bar\",\n        \"baz\",\n    ],\n    type=\"PreProduction\",\n    yaml=\"\"\"\t\t\t   environment:\n         name: name\n         identifier: identifier\n         orgIdentifier: org_id\n         projectIdentifier: project_id\n         type: PreProduction\n         tags:\n           foo: bar\n           baz: \"\"\n         variables:\n           - name: envVar1\n             type: String\n             value: v1\n             description: \"\"\n           - name: envVar2\n             type: String\n             value: v2\n             description: \"\"\n         overrides:\n           manifests:\n             - manifest:\n                 identifier: manifestEnv\n                 type: Values\n                 spec:\n                   store:\n                     type: Git\n                     spec:\n                       connectorRef: \u003c+input\u003e\n                       gitFetchType: Branch\n                       paths:\n                         - file1\n                       repoName: \u003c+input\u003e\n                       branch: master\n           configFiles:\n             - configFile:\n                 identifier: configFileEnv\n                 spec:\n                   store:\n                     type: Harness\n                     spec:\n                       files:\n                         - account:/Add-ons/svcOverrideTest\n                       secretFiles: []\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Environment(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n            \"baz\",\n        },\n        Type = \"PreProduction\",\n        Yaml = @\"\t\t\t   environment:\n         name: name\n         identifier: identifier\n         orgIdentifier: org_id\n         projectIdentifier: project_id\n         type: PreProduction\n         tags:\n           foo: bar\n           baz: \"\"\"\"\n         variables:\n           - name: envVar1\n             type: String\n             value: v1\n             description: \"\"\"\"\n           - name: envVar2\n             type: String\n             value: v2\n             description: \"\"\"\"\n         overrides:\n           manifests:\n             - manifest:\n                 identifier: manifestEnv\n                 type: Values\n                 spec:\n                   store:\n                     type: Git\n                     spec:\n                       connectorRef: \u003c+input\u003e\n                       gitFetchType: Branch\n                       paths:\n                         - file1\n                       repoName: \u003c+input\u003e\n                       branch: master\n           configFiles:\n             - configFile:\n                 identifier: configFileEnv\n                 spec:\n                   store:\n                     type: Harness\n                     spec:\n                       files:\n                         - account:/Add-ons/svcOverrideTest\n                       secretFiles: []\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewEnvironment(ctx, \"example\", \u0026platform.EnvironmentArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\tpulumi.String(\"baz\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"PreProduction\"),\n\t\t\tYaml: pulumi.String(\"\t\t\t   environment:\\n         name: name\\n         identifier: identifier\\n         orgIdentifier: org_id\\n         projectIdentifier: project_id\\n         type: PreProduction\\n         tags:\\n           foo: bar\\n           baz: \\\"\\\"\\n         variables:\\n           - name: envVar1\\n             type: String\\n             value: v1\\n             description: \\\"\\\"\\n           - name: envVar2\\n             type: String\\n             value: v2\\n             description: \\\"\\\"\\n         overrides:\\n           manifests:\\n             - manifest:\\n                 identifier: manifestEnv\\n                 type: Values\\n                 spec:\\n                   store:\\n                     type: Git\\n                     spec:\\n                       connectorRef: \u003c+input\u003e\\n                       gitFetchType: Branch\\n                       paths:\\n                         - file1\\n                       repoName: \u003c+input\u003e\\n                       branch: master\\n           configFiles:\\n             - configFile:\\n                 identifier: configFileEnv\\n                 spec:\\n                   store:\\n                     type: Harness\\n                     spec:\\n                       files:\\n                         - account:/Add-ons/svcOverrideTest\\n                       secretFiles: []\\n\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Environment;\nimport com.pulumi.harness.platform.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Environment(\"example\", EnvironmentArgs.builder()        \n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .tags(            \n                \"foo:bar\",\n                \"baz\")\n            .type(\"PreProduction\")\n            .yaml(\"\"\"\n\t\t\t   environment:\n         name: name\n         identifier: identifier\n         orgIdentifier: org_id\n         projectIdentifier: project_id\n         type: PreProduction\n         tags:\n           foo: bar\n           baz: \"\"\n         variables:\n           - name: envVar1\n             type: String\n             value: v1\n             description: \"\"\n           - name: envVar2\n             type: String\n             value: v2\n             description: \"\"\n         overrides:\n           manifests:\n             - manifest:\n                 identifier: manifestEnv\n                 type: Values\n                 spec:\n                   store:\n                     type: Git\n                     spec:\n                       connectorRef: \u003c+input\u003e\n                       gitFetchType: Branch\n                       paths:\n                         - file1\n                       repoName: \u003c+input\u003e\n                       branch: master\n           configFiles:\n             - configFile:\n                 identifier: configFileEnv\n                 spec:\n                   store:\n                     type: Harness\n                     spec:\n                       files:\n                         - account:/Add-ons/svcOverrideTest\n                       secretFiles: []\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Environment\n    properties:\n      identifier: identifier\n      orgId: org_id\n      projectId: project_id\n      tags:\n        - foo:bar\n        - baz\n      type: PreProduction\n      yaml: |+\n        \t\t\t   environment:\n                 name: name\n                 identifier: identifier\n                 orgIdentifier: org_id\n                 projectIdentifier: project_id\n                 type: PreProduction\n                 tags:\n                   foo: bar\n                   baz: \"\"\n                 variables:\n                   - name: envVar1\n                     type: String\n                     value: v1\n                     description: \"\"\n                   - name: envVar2\n                     type: String\n                     value: v2\n                     description: \"\"\n                 overrides:\n                   manifests:\n                     - manifest:\n                         identifier: manifestEnv\n                         type: Values\n                         spec:\n                           store:\n                             type: Git\n                             spec:\n                               connectorRef: \u003c+input\u003e\n                               gitFetchType: Branch\n                               paths:\n                                 - file1\n                               repoName: \u003c+input\u003e\n                               branch: master\n                   configFiles:\n                     - configFile:\n                         identifier: configFileEnv\n                         spec:\n                           store:\n                             type: Harness\n                             spec:\n                               files:\n                                 - account:/Add-ons/svcOverrideTest\n                               secretFiles: []\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level environment id\n\n```sh\n $ pulumi import harness:platform/environment:Environment example \u003cenvironment_id\u003e\n```\n\n Import org level environment id\n\n```sh\n $ pulumi import harness:platform/environment:Environment example \u003corg_id\u003e/\u003cenvironment_id\u003e\n```\n\n Import project level environment id\n\n```sh\n $ pulumi import harness:platform/environment:Environment example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cenvironment_id\u003e\n```\n\n ",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of environment\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment. Valid values are PreProduction, Production\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Environment YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "color",
                "forceDelete",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of environment\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment. Valid values are PreProduction, Production\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Environment YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "forceDelete": {
                        "type": "string",
                        "description": "Enable this flag for force deletion of environment\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of environment. Valid values are PreProduction, Production\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Environment YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/environmentClustersMapping:EnvironmentClustersMapping": {
            "description": "Resource for mapping environment with Harness Clusters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.EnvironmentClustersMapping(\"example\", {\n    identifier: \"identifier\",\n    orgId: \"orgIdentifer\",\n    projectId: \"projectIdentifier\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.EnvironmentClustersMapping(\"example\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifer\",\n    project_id=\"projectIdentifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.EnvironmentClustersMapping(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifer\",\n        ProjectId = \"projectIdentifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewEnvironmentClustersMapping(ctx, \"example\", \u0026platform.EnvironmentClustersMappingArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifer\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.EnvironmentClustersMapping;\nimport com.pulumi.harness.platform.EnvironmentClustersMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new EnvironmentClustersMapping(\"example\", EnvironmentClustersMappingArgs.builder()        \n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifer\")\n            .projectId(\"projectIdentifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:EnvironmentClustersMapping\n    properties:\n      identifier: identifier\n      orgId: orgIdentifer\n      projectId: projectIdentifier\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the cluster.\n\n```sh\n $ pulumi import harness:platform/environmentClustersMapping:EnvironmentClustersMapping example \u003ccluster_id\u003e\n```\n\n ",
            "properties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/EnvironmentClustersMappingCluster:EnvironmentClustersMappingCluster"
                    },
                    "description": "list of cluster identifiers and names\n"
                },
                "envId": {
                    "type": "string",
                    "description": "environment identifier.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the cluster.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "org_id of the cluster.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project_id of the cluster.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "scope at which the cluster exists in harness gitops\n"
                }
            },
            "required": [
                "envId",
                "identifier",
                "scope"
            ],
            "inputProperties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/EnvironmentClustersMappingCluster:EnvironmentClustersMappingCluster"
                    },
                    "description": "list of cluster identifiers and names\n"
                },
                "envId": {
                    "type": "string",
                    "description": "environment identifier.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the cluster.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "org_id of the cluster.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project_id of the cluster.\n"
                }
            },
            "requiredInputs": [
                "envId",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentClustersMapping resources.\n",
                "properties": {
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/EnvironmentClustersMappingCluster:EnvironmentClustersMappingCluster"
                        },
                        "description": "list of cluster identifiers and names\n"
                    },
                    "envId": {
                        "type": "string",
                        "description": "environment identifier.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the cluster.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "org_id of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project_id of the cluster.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "scope at which the cluster exists in harness gitops\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/environmentGroup:EnvironmentGroup": {
            "description": "Resource for creating a Harness environment group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.EnvironmentGroup(\"example\", {\n    color: \"#0063F7\",\n    identifier: \"identifier\",\n    orgId: \"orgIdentifer\",\n    projectId: \"projectIdentifier\",\n    yaml: `  environmentGroup:\n    name: \"name\"\n    identifier: \"identifier\"\n    description: \"temp\"\n    orgIdentifier: \"orgIdentifer\"\n    projectIdentifier: \"projectIdentifier\"\n    envIdentifiers: []\n\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.EnvironmentGroup(\"example\",\n    color=\"#0063F7\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifer\",\n    project_id=\"projectIdentifier\",\n    yaml=\"\"\"  environmentGroup:\n    name: \"name\"\n    identifier: \"identifier\"\n    description: \"temp\"\n    orgIdentifier: \"orgIdentifer\"\n    projectIdentifier: \"projectIdentifier\"\n    envIdentifiers: []\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.EnvironmentGroup(\"example\", new()\n    {\n        Color = \"#0063F7\",\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifer\",\n        ProjectId = \"projectIdentifier\",\n        Yaml = @\"  environmentGroup:\n    name: \"\"name\"\"\n    identifier: \"\"identifier\"\"\n    description: \"\"temp\"\"\n    orgIdentifier: \"\"orgIdentifer\"\"\n    projectIdentifier: \"\"projectIdentifier\"\"\n    envIdentifiers: []\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewEnvironmentGroup(ctx, \"example\", \u0026platform.EnvironmentGroupArgs{\n\t\t\tColor:      pulumi.String(\"#0063F7\"),\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifer\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t\tYaml:       pulumi.String(\"  environmentGroup:\\n    name: \\\"name\\\"\\n    identifier: \\\"identifier\\\"\\n    description: \\\"temp\\\"\\n    orgIdentifier: \\\"orgIdentifer\\\"\\n    projectIdentifier: \\\"projectIdentifier\\\"\\n    envIdentifiers: []\\n\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.EnvironmentGroup;\nimport com.pulumi.harness.platform.EnvironmentGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new EnvironmentGroup(\"example\", EnvironmentGroupArgs.builder()        \n            .color(\"#0063F7\")\n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifer\")\n            .projectId(\"projectIdentifier\")\n            .yaml(\"\"\"\n  environmentGroup:\n    name: \"name\"\n    identifier: \"identifier\"\n    description: \"temp\"\n    orgIdentifier: \"orgIdentifer\"\n    projectIdentifier: \"projectIdentifier\"\n    envIdentifiers: []\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:EnvironmentGroup\n    properties:\n      color: '#0063F7'\n      identifier: identifier\n      orgId: orgIdentifer\n      projectId: projectIdentifier\n      yaml: |2+\n          environmentGroup:\n            name: \"name\"\n            identifier: \"identifier\"\n            description: \"temp\"\n            orgIdentifier: \"orgIdentifer\"\n            projectIdentifier: \"projectIdentifier\"\n            envIdentifiers: []\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the environment group id.\n\n```sh\n $ pulumi import harness:platform/environmentGroup:EnvironmentGroup example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cenvironment_group_id\u003e\n```\n\n ",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color of the environment group.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of environment group\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the environment group.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "org_id of the environment group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project_id of the environment group.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Env group YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "color",
                "forceDelete",
                "identifier",
                "yaml"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Color of the environment group.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of environment group\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the environment group.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "org_id of the environment group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project_id of the environment group.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Env group YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentGroup resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the environment group.\n"
                    },
                    "forceDelete": {
                        "type": "string",
                        "description": "Enable this flag for force deletion of environment group\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the environment group.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "org_id of the environment group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project_id of the environment group.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Env group YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/environmentServiceOverrides:EnvironmentServiceOverrides": {
            "description": "Resource for creating a Harness environment service overrides.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.EnvironmentServiceOverrides(\"example\", {\n    envId: \"environmentIdentifier\",\n    orgId: \"orgIdentifier\",\n    projectId: \"projectIdentifier\",\n    serviceId: \"serviceIdentifier\",\n    yaml: `        serviceOverrides:\n          environmentRef: environmentIdentifier\n          serviceRef: serviceIdentifier\n          variables:\n           - name: asda\n             type: String\n             value: asddad\n          manifests:\n             - manifest:\n                 identifier: manifestEnv\n                 type: Values\n                 spec:\n                   store:\n                     type: Git\n                     spec:\n                       connectorRef: \u003c+input\u003e\n                       gitFetchType: Branch\n                       paths:\n                         - file1\n                       repoName: \u003c+input\u003e\n                       branch: master\n          configFiles:\n             - configFile:\n                 identifier: configFileEnv\n                 spec:\n                   store:\n                     type: Harness\n                     spec:\n                       files:\n                         - account:/Add-ons/svcOverrideTest\n                       secretFiles: []\n\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.EnvironmentServiceOverrides(\"example\",\n    env_id=\"environmentIdentifier\",\n    org_id=\"orgIdentifier\",\n    project_id=\"projectIdentifier\",\n    service_id=\"serviceIdentifier\",\n    yaml=\"\"\"        serviceOverrides:\n          environmentRef: environmentIdentifier\n          serviceRef: serviceIdentifier\n          variables:\n           - name: asda\n             type: String\n             value: asddad\n          manifests:\n             - manifest:\n                 identifier: manifestEnv\n                 type: Values\n                 spec:\n                   store:\n                     type: Git\n                     spec:\n                       connectorRef: \u003c+input\u003e\n                       gitFetchType: Branch\n                       paths:\n                         - file1\n                       repoName: \u003c+input\u003e\n                       branch: master\n          configFiles:\n             - configFile:\n                 identifier: configFileEnv\n                 spec:\n                   store:\n                     type: Harness\n                     spec:\n                       files:\n                         - account:/Add-ons/svcOverrideTest\n                       secretFiles: []\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.EnvironmentServiceOverrides(\"example\", new()\n    {\n        EnvId = \"environmentIdentifier\",\n        OrgId = \"orgIdentifier\",\n        ProjectId = \"projectIdentifier\",\n        ServiceId = \"serviceIdentifier\",\n        Yaml = @\"        serviceOverrides:\n          environmentRef: environmentIdentifier\n          serviceRef: serviceIdentifier\n          variables:\n           - name: asda\n             type: String\n             value: asddad\n          manifests:\n             - manifest:\n                 identifier: manifestEnv\n                 type: Values\n                 spec:\n                   store:\n                     type: Git\n                     spec:\n                       connectorRef: \u003c+input\u003e\n                       gitFetchType: Branch\n                       paths:\n                         - file1\n                       repoName: \u003c+input\u003e\n                       branch: master\n          configFiles:\n             - configFile:\n                 identifier: configFileEnv\n                 spec:\n                   store:\n                     type: Harness\n                     spec:\n                       files:\n                         - account:/Add-ons/svcOverrideTest\n                       secretFiles: []\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewEnvironmentServiceOverrides(ctx, \"example\", \u0026platform.EnvironmentServiceOverridesArgs{\n\t\t\tEnvId:     pulumi.String(\"environmentIdentifier\"),\n\t\t\tOrgId:     pulumi.String(\"orgIdentifier\"),\n\t\t\tProjectId: pulumi.String(\"projectIdentifier\"),\n\t\t\tServiceId: pulumi.String(\"serviceIdentifier\"),\n\t\t\tYaml:      pulumi.String(\"        serviceOverrides:\\n          environmentRef: environmentIdentifier\\n          serviceRef: serviceIdentifier\\n          variables:\\n           - name: asda\\n             type: String\\n             value: asddad\\n          manifests:\\n             - manifest:\\n                 identifier: manifestEnv\\n                 type: Values\\n                 spec:\\n                   store:\\n                     type: Git\\n                     spec:\\n                       connectorRef: \u003c+input\u003e\\n                       gitFetchType: Branch\\n                       paths:\\n                         - file1\\n                       repoName: \u003c+input\u003e\\n                       branch: master\\n          configFiles:\\n             - configFile:\\n                 identifier: configFileEnv\\n                 spec:\\n                   store:\\n                     type: Harness\\n                     spec:\\n                       files:\\n                         - account:/Add-ons/svcOverrideTest\\n                       secretFiles: []\\n\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.EnvironmentServiceOverrides;\nimport com.pulumi.harness.platform.EnvironmentServiceOverridesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new EnvironmentServiceOverrides(\"example\", EnvironmentServiceOverridesArgs.builder()        \n            .envId(\"environmentIdentifier\")\n            .orgId(\"orgIdentifier\")\n            .projectId(\"projectIdentifier\")\n            .serviceId(\"serviceIdentifier\")\n            .yaml(\"\"\"\n        serviceOverrides:\n          environmentRef: environmentIdentifier\n          serviceRef: serviceIdentifier\n          variables:\n           - name: asda\n             type: String\n             value: asddad\n          manifests:\n             - manifest:\n                 identifier: manifestEnv\n                 type: Values\n                 spec:\n                   store:\n                     type: Git\n                     spec:\n                       connectorRef: \u003c+input\u003e\n                       gitFetchType: Branch\n                       paths:\n                         - file1\n                       repoName: \u003c+input\u003e\n                       branch: master\n          configFiles:\n             - configFile:\n                 identifier: configFileEnv\n                 spec:\n                   store:\n                     type: Harness\n                     spec:\n                       files:\n                         - account:/Add-ons/svcOverrideTest\n                       secretFiles: []\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:EnvironmentServiceOverrides\n    properties:\n      envId: environmentIdentifier\n      orgId: orgIdentifier\n      projectId: projectIdentifier\n      serviceId: serviceIdentifier\n      yaml: |2+\n                serviceOverrides:\n                  environmentRef: environmentIdentifier\n                  serviceRef: serviceIdentifier\n                  variables:\n                   - name: asda\n                     type: String\n                     value: asddad\n                  manifests:\n                     - manifest:\n                         identifier: manifestEnv\n                         type: Values\n                         spec:\n                           store:\n                             type: Git\n                             spec:\n                               connectorRef: \u003c+input\u003e\n                               gitFetchType: Branch\n                               paths:\n                                 - file1\n                               repoName: \u003c+input\u003e\n                               branch: master\n                  configFiles:\n                     - configFile:\n                         identifier: configFileEnv\n                         spec:\n                           store:\n                             type: Harness\n                             spec:\n                               files:\n                                 - account:/Add-ons/svcOverrideTest\n                               secretFiles: []\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using serviceoverride id\n\n```sh\n $ pulumi import harness:platform/environmentServiceOverrides:EnvironmentServiceOverrides example \u003cserviceoverride_id\u003e\n```\n\n ",
            "properties": {
                "envId": {
                    "type": "string",
                    "description": "The env ID to which the overrides associated.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the service overrides.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The service ID to which the overrides applies.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Environment Service Overrides YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "envId",
                "identifier",
                "serviceId",
                "yaml"
            ],
            "inputProperties": {
                "envId": {
                    "type": "string",
                    "description": "The env ID to which the overrides associated.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the service overrides.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The service ID to which the overrides applies.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Environment Service Overrides YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "envId",
                "serviceId",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentServiceOverrides resources.\n",
                "properties": {
                    "envId": {
                        "type": "string",
                        "description": "The env ID to which the overrides associated.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the service overrides.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The service ID to which the overrides applies.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Environment Service Overrides YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/featureFlag:FeatureFlag": {
            "description": "Resource for managing Feature Flags.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Boolean Flag\nconst mybooleanflag = new harness.platform.FeatureFlag(\"mybooleanflag\", {\n    defaultOffVariation: \"Disabled\",\n    defaultOnVariation: \"Enabled\",\n    identifier: \"MY_FEATURE\",\n    kind: \"boolean\",\n    orgId: \"test\",\n    permanent: false,\n    projectId: \"testff\",\n    variations: [\n        {\n            description: \"The feature is enabled\",\n            identifier: \"Enabled\",\n            name: \"Enabled\",\n            value: \"true\",\n        },\n        {\n            description: \"The feature is disabled\",\n            identifier: \"Disabled\",\n            name: \"Disabled\",\n            value: \"false\",\n        },\n    ],\n});\n// Multivariate flag\nconst mymultivariateflag = new harness.platform.FeatureFlag(\"mymultivariateflag\", {\n    defaultOffVariation: \"trial20\",\n    defaultOnVariation: \"trial7\",\n    identifier: \"FREE_TRIAL_DURATION\",\n    kind: \"int\",\n    orgId: \"test\",\n    permanent: false,\n    projectId: \"testff\",\n    variations: [\n        {\n            description: \"Free trial period 7 days\",\n            identifier: \"trial7\",\n            name: \"7 days trial\",\n            value: \"7\",\n        },\n        {\n            description: \"Free trial period 14 days\",\n            identifier: \"trial14\",\n            name: \"14 days trial\",\n            value: \"14\",\n        },\n        {\n            description: \"Free trial period 20 days\",\n            identifier: \"trial20\",\n            name: \"20 days trial\",\n            value: \"20\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Boolean Flag\nmybooleanflag = harness.platform.FeatureFlag(\"mybooleanflag\",\n    default_off_variation=\"Disabled\",\n    default_on_variation=\"Enabled\",\n    identifier=\"MY_FEATURE\",\n    kind=\"boolean\",\n    org_id=\"test\",\n    permanent=False,\n    project_id=\"testff\",\n    variations=[\n        harness.platform.FeatureFlagVariationArgs(\n            description=\"The feature is enabled\",\n            identifier=\"Enabled\",\n            name=\"Enabled\",\n            value=\"true\",\n        ),\n        harness.platform.FeatureFlagVariationArgs(\n            description=\"The feature is disabled\",\n            identifier=\"Disabled\",\n            name=\"Disabled\",\n            value=\"false\",\n        ),\n    ])\n# Multivariate flag\nmymultivariateflag = harness.platform.FeatureFlag(\"mymultivariateflag\",\n    default_off_variation=\"trial20\",\n    default_on_variation=\"trial7\",\n    identifier=\"FREE_TRIAL_DURATION\",\n    kind=\"int\",\n    org_id=\"test\",\n    permanent=False,\n    project_id=\"testff\",\n    variations=[\n        harness.platform.FeatureFlagVariationArgs(\n            description=\"Free trial period 7 days\",\n            identifier=\"trial7\",\n            name=\"7 days trial\",\n            value=\"7\",\n        ),\n        harness.platform.FeatureFlagVariationArgs(\n            description=\"Free trial period 14 days\",\n            identifier=\"trial14\",\n            name=\"14 days trial\",\n            value=\"14\",\n        ),\n        harness.platform.FeatureFlagVariationArgs(\n            description=\"Free trial period 20 days\",\n            identifier=\"trial20\",\n            name=\"20 days trial\",\n            value=\"20\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Boolean Flag\n    var mybooleanflag = new Harness.Platform.FeatureFlag(\"mybooleanflag\", new()\n    {\n        DefaultOffVariation = \"Disabled\",\n        DefaultOnVariation = \"Enabled\",\n        Identifier = \"MY_FEATURE\",\n        Kind = \"boolean\",\n        OrgId = \"test\",\n        Permanent = false,\n        ProjectId = \"testff\",\n        Variations = new[]\n        {\n            new Harness.Platform.Inputs.FeatureFlagVariationArgs\n            {\n                Description = \"The feature is enabled\",\n                Identifier = \"Enabled\",\n                Name = \"Enabled\",\n                Value = \"true\",\n            },\n            new Harness.Platform.Inputs.FeatureFlagVariationArgs\n            {\n                Description = \"The feature is disabled\",\n                Identifier = \"Disabled\",\n                Name = \"Disabled\",\n                Value = \"false\",\n            },\n        },\n    });\n\n    // Multivariate flag\n    var mymultivariateflag = new Harness.Platform.FeatureFlag(\"mymultivariateflag\", new()\n    {\n        DefaultOffVariation = \"trial20\",\n        DefaultOnVariation = \"trial7\",\n        Identifier = \"FREE_TRIAL_DURATION\",\n        Kind = \"int\",\n        OrgId = \"test\",\n        Permanent = false,\n        ProjectId = \"testff\",\n        Variations = new[]\n        {\n            new Harness.Platform.Inputs.FeatureFlagVariationArgs\n            {\n                Description = \"Free trial period 7 days\",\n                Identifier = \"trial7\",\n                Name = \"7 days trial\",\n                Value = \"7\",\n            },\n            new Harness.Platform.Inputs.FeatureFlagVariationArgs\n            {\n                Description = \"Free trial period 14 days\",\n                Identifier = \"trial14\",\n                Name = \"14 days trial\",\n                Value = \"14\",\n            },\n            new Harness.Platform.Inputs.FeatureFlagVariationArgs\n            {\n                Description = \"Free trial period 20 days\",\n                Identifier = \"trial20\",\n                Name = \"20 days trial\",\n                Value = \"20\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewFeatureFlag(ctx, \"mybooleanflag\", \u0026platform.FeatureFlagArgs{\n\t\t\tDefaultOffVariation: pulumi.String(\"Disabled\"),\n\t\t\tDefaultOnVariation:  pulumi.String(\"Enabled\"),\n\t\t\tIdentifier:          pulumi.String(\"MY_FEATURE\"),\n\t\t\tKind:                pulumi.String(\"boolean\"),\n\t\t\tOrgId:               pulumi.String(\"test\"),\n\t\t\tPermanent:           pulumi.Bool(false),\n\t\t\tProjectId:           pulumi.String(\"testff\"),\n\t\t\tVariations: platform.FeatureFlagVariationArray{\n\t\t\t\t\u0026platform.FeatureFlagVariationArgs{\n\t\t\t\t\tDescription: pulumi.String(\"The feature is enabled\"),\n\t\t\t\t\tIdentifier:  pulumi.String(\"Enabled\"),\n\t\t\t\t\tName:        pulumi.String(\"Enabled\"),\n\t\t\t\t\tValue:       pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.FeatureFlagVariationArgs{\n\t\t\t\t\tDescription: pulumi.String(\"The feature is disabled\"),\n\t\t\t\t\tIdentifier:  pulumi.String(\"Disabled\"),\n\t\t\t\t\tName:        pulumi.String(\"Disabled\"),\n\t\t\t\t\tValue:       pulumi.String(\"false\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewFeatureFlag(ctx, \"mymultivariateflag\", \u0026platform.FeatureFlagArgs{\n\t\t\tDefaultOffVariation: pulumi.String(\"trial20\"),\n\t\t\tDefaultOnVariation:  pulumi.String(\"trial7\"),\n\t\t\tIdentifier:          pulumi.String(\"FREE_TRIAL_DURATION\"),\n\t\t\tKind:                pulumi.String(\"int\"),\n\t\t\tOrgId:               pulumi.String(\"test\"),\n\t\t\tPermanent:           pulumi.Bool(false),\n\t\t\tProjectId:           pulumi.String(\"testff\"),\n\t\t\tVariations: platform.FeatureFlagVariationArray{\n\t\t\t\t\u0026platform.FeatureFlagVariationArgs{\n\t\t\t\t\tDescription: pulumi.String(\"Free trial period 7 days\"),\n\t\t\t\t\tIdentifier:  pulumi.String(\"trial7\"),\n\t\t\t\t\tName:        pulumi.String(\"7 days trial\"),\n\t\t\t\t\tValue:       pulumi.String(\"7\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.FeatureFlagVariationArgs{\n\t\t\t\t\tDescription: pulumi.String(\"Free trial period 14 days\"),\n\t\t\t\t\tIdentifier:  pulumi.String(\"trial14\"),\n\t\t\t\t\tName:        pulumi.String(\"14 days trial\"),\n\t\t\t\t\tValue:       pulumi.String(\"14\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.FeatureFlagVariationArgs{\n\t\t\t\t\tDescription: pulumi.String(\"Free trial period 20 days\"),\n\t\t\t\t\tIdentifier:  pulumi.String(\"trial20\"),\n\t\t\t\t\tName:        pulumi.String(\"20 days trial\"),\n\t\t\t\t\tValue:       pulumi.String(\"20\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.FeatureFlag;\nimport com.pulumi.harness.platform.FeatureFlagArgs;\nimport com.pulumi.harness.platform.inputs.FeatureFlagVariationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mybooleanflag = new FeatureFlag(\"mybooleanflag\", FeatureFlagArgs.builder()        \n            .defaultOffVariation(\"Disabled\")\n            .defaultOnVariation(\"Enabled\")\n            .identifier(\"MY_FEATURE\")\n            .kind(\"boolean\")\n            .orgId(\"test\")\n            .permanent(false)\n            .projectId(\"testff\")\n            .variations(            \n                FeatureFlagVariationArgs.builder()\n                    .description(\"The feature is enabled\")\n                    .identifier(\"Enabled\")\n                    .name(\"Enabled\")\n                    .value(\"true\")\n                    .build(),\n                FeatureFlagVariationArgs.builder()\n                    .description(\"The feature is disabled\")\n                    .identifier(\"Disabled\")\n                    .name(\"Disabled\")\n                    .value(\"false\")\n                    .build())\n            .build());\n\n        var mymultivariateflag = new FeatureFlag(\"mymultivariateflag\", FeatureFlagArgs.builder()        \n            .defaultOffVariation(\"trial20\")\n            .defaultOnVariation(\"trial7\")\n            .identifier(\"FREE_TRIAL_DURATION\")\n            .kind(\"int\")\n            .orgId(\"test\")\n            .permanent(false)\n            .projectId(\"testff\")\n            .variations(            \n                FeatureFlagVariationArgs.builder()\n                    .description(\"Free trial period 7 days\")\n                    .identifier(\"trial7\")\n                    .name(\"7 days trial\")\n                    .value(\"7\")\n                    .build(),\n                FeatureFlagVariationArgs.builder()\n                    .description(\"Free trial period 14 days\")\n                    .identifier(\"trial14\")\n                    .name(\"14 days trial\")\n                    .value(\"14\")\n                    .build(),\n                FeatureFlagVariationArgs.builder()\n                    .description(\"Free trial period 20 days\")\n                    .identifier(\"trial20\")\n                    .name(\"20 days trial\")\n                    .value(\"20\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Boolean Flag\n  mybooleanflag:\n    type: harness:platform:FeatureFlag\n    properties:\n      defaultOffVariation: Disabled\n      defaultOnVariation: Enabled\n      identifier: MY_FEATURE\n      kind: boolean\n      orgId: test\n      permanent: false\n      projectId: testff\n      variations:\n        - description: The feature is enabled\n          identifier: Enabled\n          name: Enabled\n          value: 'true'\n        - description: The feature is disabled\n          identifier: Disabled\n          name: Disabled\n          value: 'false'\n  # Multivariate flag\n  mymultivariateflag:\n    type: harness:platform:FeatureFlag\n    properties:\n      defaultOffVariation: trial20\n      defaultOnVariation: trial7\n      identifier: FREE_TRIAL_DURATION\n      kind: int\n      orgId: test\n      permanent: false\n      projectId: testff\n      variations:\n        - description: Free trial period 7 days\n          identifier: trial7\n          name: 7 days trial\n          value: '7'\n        - description: Free trial period 14 days\n          identifier: trial14\n          name: 14 days trial\n          value: '14'\n        - description: Free trial period 20 days\n          identifier: trial20\n          name: 20 days trial\n          value: '20'\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archived": {
                    "type": "boolean",
                    "description": "Whether or not the flag is archived\n"
                },
                "defaultOffVariation": {
                    "type": "string",
                    "description": "Which of the variations to use when the flag is toggled to off state\n"
                },
                "defaultOnVariation": {
                    "type": "string",
                    "description": "Which of the variations to use when the flag is toggled to on state\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/FeatureFlagGitDetails:FeatureFlagGitDetails"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the Feature Flag\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The type of data the flag represents. Valid values are `boolean`, `int`, `string`, `json`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Feature Flag\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the flag\n"
                },
                "permanent": {
                    "type": "boolean",
                    "description": "Whether or not the flag is permanent. If it is, it will never be flagged as stale\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                },
                "variations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/FeatureFlagVariation:FeatureFlagVariation"
                    },
                    "description": "The options available for your flag\n"
                }
            },
            "required": [
                "defaultOffVariation",
                "defaultOnVariation",
                "identifier",
                "kind",
                "name",
                "orgId",
                "permanent",
                "projectId",
                "variations"
            ],
            "inputProperties": {
                "archived": {
                    "type": "boolean",
                    "description": "Whether or not the flag is archived\n",
                    "willReplaceOnChanges": true
                },
                "defaultOffVariation": {
                    "type": "string",
                    "description": "Which of the variations to use when the flag is toggled to off state\n",
                    "willReplaceOnChanges": true
                },
                "defaultOnVariation": {
                    "type": "string",
                    "description": "Which of the variations to use when the flag is toggled to on state\n",
                    "willReplaceOnChanges": true
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/FeatureFlagGitDetails:FeatureFlagGitDetails",
                    "willReplaceOnChanges": true
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the Feature Flag\n",
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "The type of data the flag represents. Valid values are `boolean`, `int`, `string`, `json`\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Feature Flag\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n",
                    "willReplaceOnChanges": true
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the flag\n",
                    "willReplaceOnChanges": true
                },
                "permanent": {
                    "type": "boolean",
                    "description": "Whether or not the flag is permanent. If it is, it will never be flagged as stale\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n",
                    "willReplaceOnChanges": true
                },
                "variations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/FeatureFlagVariation:FeatureFlagVariation"
                    },
                    "description": "The options available for your flag\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "defaultOffVariation",
                "defaultOnVariation",
                "identifier",
                "kind",
                "orgId",
                "permanent",
                "projectId",
                "variations"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FeatureFlag resources.\n",
                "properties": {
                    "archived": {
                        "type": "boolean",
                        "description": "Whether or not the flag is archived\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultOffVariation": {
                        "type": "string",
                        "description": "Which of the variations to use when the flag is toggled to off state\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultOnVariation": {
                        "type": "string",
                        "description": "Which of the variations to use when the flag is toggled to on state\n",
                        "willReplaceOnChanges": true
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/FeatureFlagGitDetails:FeatureFlagGitDetails",
                        "willReplaceOnChanges": true
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the Feature Flag\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "The type of data the flag represents. Valid values are `boolean`, `int`, `string`, `json`\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Feature Flag\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of the flag\n",
                        "willReplaceOnChanges": true
                    },
                    "permanent": {
                        "type": "boolean",
                        "description": "Whether or not the flag is permanent. If it is, it will never be flagged as stale\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "variations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/FeatureFlagVariation:FeatureFlagVariation"
                        },
                        "description": "The options available for your flag\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/ffApiKey:FfApiKey": {
            "description": "Resource for creating an environment SDK key for Feature Flags.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst testserverapikey = new harness.platform.FfApiKey(\"testserverapikey\", {\n    identifier: \"testserver\",\n    description: \"this is a server SDK key\",\n    orgId: \"test\",\n    projectId: \"testff\",\n    envId: \"testenv\",\n    expiredAt: 1713729225,\n    type: \"Server\",\n});\nexport const serversdkkey = testserverapikey.apiKey;\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntestserverapikey = harness.platform.FfApiKey(\"testserverapikey\",\n    identifier=\"testserver\",\n    description=\"this is a server SDK key\",\n    org_id=\"test\",\n    project_id=\"testff\",\n    env_id=\"testenv\",\n    expired_at=1713729225,\n    type=\"Server\")\npulumi.export(\"serversdkkey\", testserverapikey.api_key)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testserverapikey = new Harness.Platform.FfApiKey(\"testserverapikey\", new()\n    {\n        Identifier = \"testserver\",\n        Description = \"this is a server SDK key\",\n        OrgId = \"test\",\n        ProjectId = \"testff\",\n        EnvId = \"testenv\",\n        ExpiredAt = 1713729225,\n        Type = \"Server\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serversdkkey\"] = testserverapikey.ApiKey,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestserverapikey, err := platform.NewFfApiKey(ctx, \"testserverapikey\", \u0026platform.FfApiKeyArgs{\n\t\t\tIdentifier:  pulumi.String(\"testserver\"),\n\t\t\tDescription: pulumi.String(\"this is a server SDK key\"),\n\t\t\tOrgId:       pulumi.String(\"test\"),\n\t\t\tProjectId:   pulumi.String(\"testff\"),\n\t\t\tEnvId:       pulumi.String(\"testenv\"),\n\t\t\tExpiredAt:   pulumi.Int(1713729225),\n\t\t\tType:        pulumi.String(\"Server\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serversdkkey\", testserverapikey.ApiKey)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.FfApiKey;\nimport com.pulumi.harness.platform.FfApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testserverapikey = new FfApiKey(\"testserverapikey\", FfApiKeyArgs.builder()        \n            .identifier(\"testserver\")\n            .description(\"this is a server SDK key\")\n            .orgId(\"test\")\n            .projectId(\"testff\")\n            .envId(\"testenv\")\n            .expiredAt(1713729225)\n            .type(\"Server\")\n            .build());\n\n        ctx.export(\"serversdkkey\", testserverapikey.apiKey());\n    }\n}\n```\n```yaml\nresources:\n  testserverapikey:\n    type: harness:platform:FfApiKey\n    properties:\n      identifier: testserver\n      description: this is a server SDK key\n      orgId: test\n      projectId: testff\n      envId: testenv\n      expiredAt: 1.713729225e+09\n      type: Server\noutputs:\n  serversdkkey: ${testserverapikey.apiKey}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The value of the SDK API Key\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the SDK API Key\n"
                },
                "envId": {
                    "type": "string",
                    "description": "Environment Identifier\n"
                },
                "expiredAt": {
                    "type": "integer",
                    "description": "Expiration datetime of the SDK API Key\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the SDK API Key\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the SDK API Key\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of SDK. Valid values are `Server` or `Client`.\n"
                }
            },
            "required": [
                "apiKey",
                "envId",
                "identifier",
                "name",
                "orgId",
                "projectId",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the SDK API Key\n",
                    "willReplaceOnChanges": true
                },
                "envId": {
                    "type": "string",
                    "description": "Environment Identifier\n",
                    "willReplaceOnChanges": true
                },
                "expiredAt": {
                    "type": "integer",
                    "description": "Expiration datetime of the SDK API Key\n",
                    "willReplaceOnChanges": true
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the SDK API Key\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the SDK API Key\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of SDK. Valid values are `Server` or `Client`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "envId",
                "identifier",
                "orgId",
                "projectId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FfApiKey resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "The value of the SDK API Key\n",
                        "secret": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the SDK API Key\n",
                        "willReplaceOnChanges": true
                    },
                    "envId": {
                        "type": "string",
                        "description": "Environment Identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "expiredAt": {
                        "type": "integer",
                        "description": "Expiration datetime of the SDK API Key\n",
                        "willReplaceOnChanges": true
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the SDK API Key\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the SDK API Key\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of SDK. Valid values are `Server` or `Client`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/filters:Filters": {
            "description": "Resource for creating a Harness Filter. This resource support filters of types {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.Filters(\"test\", {\n    filterProperties: {\n        filterType: \"Connector\",\n        tags: [\"foo:bar\"],\n    },\n    filterVisibility: \"EveryOne\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"Connector\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.Filters(\"test\",\n    filter_properties=harness.platform.FiltersFilterPropertiesArgs(\n        filter_type=\"Connector\",\n        tags=[\"foo:bar\"],\n    ),\n    filter_visibility=\"EveryOne\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"Connector\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.Filters(\"test\", new()\n    {\n        FilterProperties = new Harness.Platform.Inputs.FiltersFilterPropertiesArgs\n        {\n            FilterType = \"Connector\",\n            Tags = new[]\n            {\n                \"foo:bar\",\n            },\n        },\n        FilterVisibility = \"EveryOne\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"Connector\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewFilters(ctx, \"test\", \u0026platform.FiltersArgs{\n\t\t\tFilterProperties: \u0026platform.FiltersFilterPropertiesArgs{\n\t\t\t\tFilterType: pulumi.String(\"Connector\"),\n\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilterVisibility: pulumi.String(\"EveryOne\"),\n\t\t\tIdentifier:       pulumi.String(\"identifier\"),\n\t\t\tOrgId:            pulumi.String(\"org_id\"),\n\t\t\tProjectId:        pulumi.String(\"project_id\"),\n\t\t\tType:             pulumi.String(\"Connector\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Filters;\nimport com.pulumi.harness.platform.FiltersArgs;\nimport com.pulumi.harness.platform.inputs.FiltersFilterPropertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Filters(\"test\", FiltersArgs.builder()        \n            .filterProperties(FiltersFilterPropertiesArgs.builder()\n                .filterType(\"Connector\")\n                .tags(\"foo:bar\")\n                .build())\n            .filterVisibility(\"EveryOne\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"Connector\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:Filters\n    properties:\n      filterProperties:\n        filterType: Connector\n        tags:\n          - foo:bar\n      filterVisibility: EveryOne\n      identifier: identifier\n      orgId: org_id\n      projectId: project_id\n      type: Connector\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level filter\n\n```sh\n $ pulumi import harness:platform/filters:Filters example \u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n Import org level filter\n\n```sh\n $ pulumi import harness:platform/filters:Filters example \u003cord_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n Import project level filter\n\n```sh\n $ pulumi import harness:platform/filters:Filters example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n ",
            "properties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/FiltersFilterProperties:FiltersFilterProperties",
                    "description": "Properties of the filter entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filter. By default, everyone can view this filter. Can either be EveryOne or OnlyCreator\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Filter\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "organization Identifier for the Entity\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project Identifier for the Entity\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}\n"
                }
            },
            "required": [
                "filterProperties",
                "filterVisibility",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/FiltersFilterProperties:FiltersFilterProperties",
                    "description": "Properties of the filter entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filter. By default, everyone can view this filter. Can either be EveryOne or OnlyCreator\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Filter\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "organization Identifier for the Entity\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project Identifier for the Entity\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}\n"
                }
            },
            "requiredInputs": [
                "filterProperties",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Filters resources.\n",
                "properties": {
                    "filterProperties": {
                        "$ref": "#/types/harness:platform/FiltersFilterProperties:FiltersFilterProperties",
                        "description": "Properties of the filter entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filter. By default, everyone can view this filter. Can either be EveryOne or OnlyCreator\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Filter\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project Identifier for the Entity\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gcpConnector:GcpConnector": {
            "description": "Resource for creating a Gcp connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Credentials inherit_from_delegate\nconst test = new harness.platform.GcpConnector(\"test\", {\n    description: \"test\",\n    identifier: \"identifier\",\n    inheritFromDelegates: [{\n        delegateSelectors: [\"harness-delegate\"],\n    }],\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Credentials inherit_from_delegate\ntest = harness.platform.GcpConnector(\"test\",\n    description=\"test\",\n    identifier=\"identifier\",\n    inherit_from_delegates=[harness.platform.GcpConnectorInheritFromDelegateArgs(\n        delegate_selectors=[\"harness-delegate\"],\n    )],\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Credentials inherit_from_delegate\n    var test = new Harness.Platform.GcpConnector(\"test\", new()\n    {\n        Description = \"test\",\n        Identifier = \"identifier\",\n        InheritFromDelegates = new[]\n        {\n            new Harness.Platform.Inputs.GcpConnectorInheritFromDelegateArgs\n            {\n                DelegateSelectors = new[]\n                {\n                    \"harness-delegate\",\n                },\n            },\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGcpConnector(ctx, \"test\", \u0026platform.GcpConnectorArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tInheritFromDelegates: platform.GcpConnectorInheritFromDelegateArray{\n\t\t\t\t\u0026platform.GcpConnectorInheritFromDelegateArgs{\n\t\t\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GcpConnector;\nimport com.pulumi.harness.platform.GcpConnectorArgs;\nimport com.pulumi.harness.platform.inputs.GcpConnectorInheritFromDelegateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new GcpConnector(\"test\", GcpConnectorArgs.builder()        \n            .description(\"test\")\n            .identifier(\"identifier\")\n            .inheritFromDelegates(GcpConnectorInheritFromDelegateArgs.builder()\n                .delegateSelectors(\"harness-delegate\")\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Credentials inherit_from_delegate\n  test:\n    type: harness:platform:GcpConnector\n    properties:\n      description: test\n      identifier: identifier\n      inheritFromDelegates:\n        - delegateSelectors:\n            - harness-delegate\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level gcp connector\n\n\n\n```sh\n $ pulumi import harness:platform/gcpConnector:GcpConnector example \u003cconnector_id\u003e\n```\n\n Import org level gcp connector\n\n\n\n```sh\n $ pulumi import harness:platform/gcpConnector:GcpConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level gcp connector\n\n\n\n```sh\n $ pulumi import harness:platform/gcpConnector:GcpConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "inheritFromDelegates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate"
                    },
                    "description": "Inherit configuration from delegate.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/GcpConnectorManual:GcpConnectorManual",
                    "description": "Manual credential configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "inheritFromDelegates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate"
                    },
                    "description": "Inherit configuration from delegate.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/GcpConnectorManual:GcpConnectorManual",
                    "description": "Manual credential configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpConnector resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "inheritFromDelegates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate"
                        },
                        "description": "Inherit configuration from delegate.\n"
                    },
                    "manual": {
                        "$ref": "#/types/harness:platform/GcpConnectorManual:GcpConnectorManual",
                        "description": "Manual credential configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitConnector:GitConnector": {
            "description": "Resource for creating a Git connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Credentials ssh\nconst test = new harness.platform.GitConnector(\"test\", {\n    connectionType: \"Account\",\n    credentials: {\n        ssh: {\n            sshKeyRef: \"account.secret_id\",\n        },\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://git.example.com/account\",\n    validationRepo: \"some_repo\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Credentials ssh\ntest = harness.platform.GitConnector(\"test\",\n    connection_type=\"Account\",\n    credentials=harness.platform.GitConnectorCredentialsArgs(\n        ssh=harness.platform.GitConnectorCredentialsSshArgs(\n            ssh_key_ref=\"account.secret_id\",\n        ),\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://git.example.com/account\",\n    validation_repo=\"some_repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Credentials ssh\n    var test = new Harness.Platform.GitConnector(\"test\", new()\n    {\n        ConnectionType = \"Account\",\n        Credentials = new Harness.Platform.Inputs.GitConnectorCredentialsArgs\n        {\n            Ssh = new Harness.Platform.Inputs.GitConnectorCredentialsSshArgs\n            {\n                SshKeyRef = \"account.secret_id\",\n            },\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://git.example.com/account\",\n        ValidationRepo = \"some_repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitConnector(ctx, \"test\", \u0026platform.GitConnectorArgs{\n\t\t\tConnectionType: pulumi.String(\"Account\"),\n\t\t\tCredentials: \u0026platform.GitConnectorCredentialsArgs{\n\t\t\t\tSsh: \u0026platform.GitConnectorCredentialsSshArgs{\n\t\t\t\t\tSshKeyRef: pulumi.String(\"account.secret_id\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl:            pulumi.String(\"https://git.example.com/account\"),\n\t\t\tValidationRepo: pulumi.String(\"some_repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitConnector;\nimport com.pulumi.harness.platform.GitConnectorArgs;\nimport com.pulumi.harness.platform.inputs.GitConnectorCredentialsArgs;\nimport com.pulumi.harness.platform.inputs.GitConnectorCredentialsSshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new GitConnector(\"test\", GitConnectorArgs.builder()        \n            .connectionType(\"Account\")\n            .credentials(GitConnectorCredentialsArgs.builder()\n                .ssh(GitConnectorCredentialsSshArgs.builder()\n                    .sshKeyRef(\"account.secret_id\")\n                    .build())\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://git.example.com/account\")\n            .validationRepo(\"some_repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Credentials ssh\n  test:\n    type: harness:platform:GitConnector\n    properties:\n      connectionType: Account\n      credentials:\n        ssh:\n          sshKeyRef: account.secret_id\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://git.example.com/account\n      validationRepo: some_repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level git connector\n\n\n\n```sh\n $ pulumi import harness:platform/gitConnector:GitConnector example \u003cconnector_id\u003e\n```\n\n Import org level git connector\n\n\n\n```sh\n $ pulumi import harness:platform/gitConnector:GitConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level git connector\n\n\n\n```sh\n $ pulumi import harness:platform/gitConnector:GitConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentials:GitConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the git repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentials:GitConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the git repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitConnector resources.\n",
                "properties": {
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/GitConnectorCredentials:GitConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the git repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitOpsAgent:GitOpsAgent": {
            "description": "Resource for creating a Harness Gitops Agents.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.GitOpsAgent(\"example\", {\n    accountId: \"account_id\",\n    identifier: \"identifier\",\n    metadatas: [{\n        highAvailability: true,\n        namespace: \"namespace\",\n    }],\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"MANAGED_ARGO_PROVIDER\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.GitOpsAgent(\"example\",\n    account_id=\"account_id\",\n    identifier=\"identifier\",\n    metadatas=[harness.platform.GitOpsAgentMetadataArgs(\n        high_availability=True,\n        namespace=\"namespace\",\n    )],\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"MANAGED_ARGO_PROVIDER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.GitOpsAgent(\"example\", new()\n    {\n        AccountId = \"account_id\",\n        Identifier = \"identifier\",\n        Metadatas = new[]\n        {\n            new Harness.Platform.Inputs.GitOpsAgentMetadataArgs\n            {\n                HighAvailability = true,\n                Namespace = \"namespace\",\n            },\n        },\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"MANAGED_ARGO_PROVIDER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitOpsAgent(ctx, \"example\", \u0026platform.GitOpsAgentArgs{\n\t\t\tAccountId:  pulumi.String(\"account_id\"),\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tMetadatas: platform.GitOpsAgentMetadataArray{\n\t\t\t\t\u0026platform.GitOpsAgentMetadataArgs{\n\t\t\t\t\tHighAvailability: pulumi.Bool(true),\n\t\t\t\t\tNamespace:        pulumi.String(\"namespace\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOrgId:     pulumi.String(\"org_id\"),\n\t\t\tProjectId: pulumi.String(\"project_id\"),\n\t\t\tType:      pulumi.String(\"MANAGED_ARGO_PROVIDER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitOpsAgent;\nimport com.pulumi.harness.platform.GitOpsAgentArgs;\nimport com.pulumi.harness.platform.inputs.GitOpsAgentMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GitOpsAgent(\"example\", GitOpsAgentArgs.builder()        \n            .accountId(\"account_id\")\n            .identifier(\"identifier\")\n            .metadatas(GitOpsAgentMetadataArgs.builder()\n                .highAvailability(true)\n                .namespace(\"namespace\")\n                .build())\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"MANAGED_ARGO_PROVIDER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:GitOpsAgent\n    properties:\n      accountId: account_id\n      identifier: identifier\n      metadatas:\n        - highAvailability: true\n          namespace: namespace\n      orgId: org_id\n      projectId: project_id\n      type: MANAGED_ARGO_PROVIDER\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport a Account level Gitops Agent\n\n```sh\n $ pulumi import harness:platform/gitOpsAgent:GitOpsAgent example \u003cagent_id\u003e\n```\n\n Import a Project level Gitops Agent\n\n```sh\n $ pulumi import harness:platform/gitOpsAgent:GitOpsAgent example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps agent.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the GitOps agent.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps agent.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsAgentMetadata:GitOpsAgentMetadata"
                    },
                    "description": "Metadata of the agent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps agent.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps agent.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps agent.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags for the GitOps agents. These can be used to search or filter the GitOps agents.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Default: \"AGENT*TYPE*UNSET\"\nEnum: \"AGENT*TYPE*UNSET\" \"CONNECTED*ARGO*PROVIDER\" \"MANAGED*ARGO*PROVIDER\"\n"
                }
            },
            "required": [
                "accountId",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps agent.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the GitOps agent.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps agent.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsAgentMetadata:GitOpsAgentMetadata"
                    },
                    "description": "Metadata of the agent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps agent.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps agent.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps agent.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags for the GitOps agents. These can be used to search or filter the GitOps agents.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Default: \"AGENT*TYPE*UNSET\"\nEnum: \"AGENT*TYPE*UNSET\" \"CONNECTED*ARGO*PROVIDER\" \"MANAGED*ARGO*PROVIDER\"\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitOpsAgent resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps agent.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the GitOps agent.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps agent.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsAgentMetadata:GitOpsAgentMetadata"
                        },
                        "description": "Metadata of the agent.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the GitOps agent.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps agent.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps agent.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the GitOps agents. These can be used to search or filter the GitOps agents.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Default: \"AGENT*TYPE*UNSET\"\nEnum: \"AGENT*TYPE*UNSET\" \"CONNECTED*ARGO*PROVIDER\" \"MANAGED*ARGO*PROVIDER\"\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitOpsCluster:GitOpsCluster": {
            "description": "Resource for creating a Harness Gitops Cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Clusters without Optional tags\nconst exampleGitOpsCluster = new harness.platform.GitOpsCluster(\"exampleGitOpsCluster\", {\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    agentId: \"agent_id\",\n    requests: [{\n        upsert: false,\n        clusters: [{\n            server: \"https://kubernetes.default.svc\",\n            name: \"name\",\n            configs: [{\n                tlsClientConfigs: [{\n                    insecure: true,\n                }],\n                clusterConnectionType: \"IN_CLUSTER\",\n            }],\n        }],\n    }],\n});\n// Clusters with Optional tags\nconst examplePlatform_gitOpsClusterGitOpsCluster = new harness.platform.GitOpsCluster(\"examplePlatform/gitOpsClusterGitOpsCluster\", {\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    agentId: \"agent_id\",\n    requests: [{\n        upsert: false,\n        tags: [\"foo:bar\"],\n        clusters: [{\n            server: \"https://kubernetes.default.svc\",\n            name: \"name\",\n            configs: [{\n                tlsClientConfigs: [{\n                    insecure: true,\n                }],\n                clusterConnectionType: \"IN_CLUSTER\",\n            }],\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Clusters without Optional tags\nexample_git_ops_cluster = harness.platform.GitOpsCluster(\"exampleGitOpsCluster\",\n    identifier=\"identifier\",\n    account_id=\"account_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    agent_id=\"agent_id\",\n    requests=[harness.platform.GitOpsClusterRequestArgs(\n        upsert=False,\n        clusters=[harness.platform.GitOpsClusterRequestClusterArgs(\n            server=\"https://kubernetes.default.svc\",\n            name=\"name\",\n            configs=[harness.platform.GitOpsClusterRequestClusterConfigArgs(\n                tls_client_configs=[harness.platform.GitOpsClusterRequestClusterConfigTlsClientConfigArgs(\n                    insecure=True,\n                )],\n                cluster_connection_type=\"IN_CLUSTER\",\n            )],\n        )],\n    )])\n# Clusters with Optional tags\nexample_platform_git_ops_cluster_git_ops_cluster = harness.platform.GitOpsCluster(\"examplePlatform/gitOpsClusterGitOpsCluster\",\n    identifier=\"identifier\",\n    account_id=\"account_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    agent_id=\"agent_id\",\n    requests=[harness.platform.GitOpsClusterRequestArgs(\n        upsert=False,\n        tags=[\"foo:bar\"],\n        clusters=[harness.platform.GitOpsClusterRequestClusterArgs(\n            server=\"https://kubernetes.default.svc\",\n            name=\"name\",\n            configs=[harness.platform.GitOpsClusterRequestClusterConfigArgs(\n                tls_client_configs=[harness.platform.GitOpsClusterRequestClusterConfigTlsClientConfigArgs(\n                    insecure=True,\n                )],\n                cluster_connection_type=\"IN_CLUSTER\",\n            )],\n        )],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Clusters without Optional tags\n    var exampleGitOpsCluster = new Harness.Platform.GitOpsCluster(\"exampleGitOpsCluster\", new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        AgentId = \"agent_id\",\n        Requests = new[]\n        {\n            new Harness.Platform.Inputs.GitOpsClusterRequestArgs\n            {\n                Upsert = false,\n                Clusters = new[]\n                {\n                    new Harness.Platform.Inputs.GitOpsClusterRequestClusterArgs\n                    {\n                        Server = \"https://kubernetes.default.svc\",\n                        Name = \"name\",\n                        Configs = new[]\n                        {\n                            new Harness.Platform.Inputs.GitOpsClusterRequestClusterConfigArgs\n                            {\n                                TlsClientConfigs = new[]\n                                {\n                                    new Harness.Platform.Inputs.GitOpsClusterRequestClusterConfigTlsClientConfigArgs\n                                    {\n                                        Insecure = true,\n                                    },\n                                },\n                                ClusterConnectionType = \"IN_CLUSTER\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n    // Clusters with Optional tags\n    var examplePlatform_gitOpsClusterGitOpsCluster = new Harness.Platform.GitOpsCluster(\"examplePlatform/gitOpsClusterGitOpsCluster\", new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        AgentId = \"agent_id\",\n        Requests = new[]\n        {\n            new Harness.Platform.Inputs.GitOpsClusterRequestArgs\n            {\n                Upsert = false,\n                Tags = new[]\n                {\n                    \"foo:bar\",\n                },\n                Clusters = new[]\n                {\n                    new Harness.Platform.Inputs.GitOpsClusterRequestClusterArgs\n                    {\n                        Server = \"https://kubernetes.default.svc\",\n                        Name = \"name\",\n                        Configs = new[]\n                        {\n                            new Harness.Platform.Inputs.GitOpsClusterRequestClusterConfigArgs\n                            {\n                                TlsClientConfigs = new[]\n                                {\n                                    new Harness.Platform.Inputs.GitOpsClusterRequestClusterConfigTlsClientConfigArgs\n                                    {\n                                        Insecure = true,\n                                    },\n                                },\n                                ClusterConnectionType = \"IN_CLUSTER\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitOpsCluster(ctx, \"exampleGitOpsCluster\", \u0026platform.GitOpsClusterArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tAccountId:  pulumi.String(\"account_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tAgentId:    pulumi.String(\"agent_id\"),\n\t\t\tRequests: platform.GitOpsClusterRequestArray{\n\t\t\t\t\u0026platform.GitOpsClusterRequestArgs{\n\t\t\t\t\tUpsert: pulumi.Bool(false),\n\t\t\t\t\tClusters: platform.GitOpsClusterRequestClusterArray{\n\t\t\t\t\t\t\u0026platform.GitOpsClusterRequestClusterArgs{\n\t\t\t\t\t\t\tServer: pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\t\t\tName:   pulumi.String(\"name\"),\n\t\t\t\t\t\t\tConfigs: platform.GitOpsClusterRequestClusterConfigArray{\n\t\t\t\t\t\t\t\t\u0026platform.GitOpsClusterRequestClusterConfigArgs{\n\t\t\t\t\t\t\t\t\tTlsClientConfigs: platform.GitOpsClusterRequestClusterConfigTlsClientConfigArray{\n\t\t\t\t\t\t\t\t\t\t\u0026platform.GitOpsClusterRequestClusterConfigTlsClientConfigArgs{\n\t\t\t\t\t\t\t\t\t\t\tInsecure: pulumi.Bool(true),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tClusterConnectionType: pulumi.String(\"IN_CLUSTER\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewGitOpsCluster(ctx, \"examplePlatform/gitOpsClusterGitOpsCluster\", \u0026platform.GitOpsClusterArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tAccountId:  pulumi.String(\"account_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tAgentId:    pulumi.String(\"agent_id\"),\n\t\t\tRequests: platform.GitOpsClusterRequestArray{\n\t\t\t\t\u0026platform.GitOpsClusterRequestArgs{\n\t\t\t\t\tUpsert: pulumi.Bool(false),\n\t\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\t\t},\n\t\t\t\t\tClusters: platform.GitOpsClusterRequestClusterArray{\n\t\t\t\t\t\t\u0026platform.GitOpsClusterRequestClusterArgs{\n\t\t\t\t\t\t\tServer: pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\t\t\tName:   pulumi.String(\"name\"),\n\t\t\t\t\t\t\tConfigs: platform.GitOpsClusterRequestClusterConfigArray{\n\t\t\t\t\t\t\t\t\u0026platform.GitOpsClusterRequestClusterConfigArgs{\n\t\t\t\t\t\t\t\t\tTlsClientConfigs: platform.GitOpsClusterRequestClusterConfigTlsClientConfigArray{\n\t\t\t\t\t\t\t\t\t\t\u0026platform.GitOpsClusterRequestClusterConfigTlsClientConfigArgs{\n\t\t\t\t\t\t\t\t\t\t\tInsecure: pulumi.Bool(true),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tClusterConnectionType: pulumi.String(\"IN_CLUSTER\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitOpsCluster;\nimport com.pulumi.harness.platform.GitOpsClusterArgs;\nimport com.pulumi.harness.platform.inputs.GitOpsClusterRequestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleGitOpsCluster = new GitOpsCluster(\"exampleGitOpsCluster\", GitOpsClusterArgs.builder()        \n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .agentId(\"agent_id\")\n            .requests(GitOpsClusterRequestArgs.builder()\n                .upsert(false)\n                .clusters(GitOpsClusterRequestClusterArgs.builder()\n                    .server(\"https://kubernetes.default.svc\")\n                    .name(\"name\")\n                    .configs(GitOpsClusterRequestClusterConfigArgs.builder()\n                        .tlsClientConfigs(GitOpsClusterRequestClusterConfigTlsClientConfigArgs.builder()\n                            .insecure(true)\n                            .build())\n                        .clusterConnectionType(\"IN_CLUSTER\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        var examplePlatform_gitOpsClusterGitOpsCluster = new GitOpsCluster(\"examplePlatform/gitOpsClusterGitOpsCluster\", GitOpsClusterArgs.builder()        \n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .agentId(\"agent_id\")\n            .requests(GitOpsClusterRequestArgs.builder()\n                .upsert(false)\n                .tags(\"foo:bar\")\n                .clusters(GitOpsClusterRequestClusterArgs.builder()\n                    .server(\"https://kubernetes.default.svc\")\n                    .name(\"name\")\n                    .configs(GitOpsClusterRequestClusterConfigArgs.builder()\n                        .tlsClientConfigs(GitOpsClusterRequestClusterConfigTlsClientConfigArgs.builder()\n                            .insecure(true)\n                            .build())\n                        .clusterConnectionType(\"IN_CLUSTER\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Clusters without Optional tags\n  exampleGitOpsCluster:\n    type: harness:platform:GitOpsCluster\n    properties:\n      identifier: identifier\n      accountId: account_id\n      projectId: project_id\n      orgId: org_id\n      agentId: agent_id\n      requests:\n        - upsert: false\n          clusters:\n            - server: https://kubernetes.default.svc\n              name: name\n              configs:\n                - tlsClientConfigs:\n                    - insecure: true\n                  clusterConnectionType: IN_CLUSTER\n  # Clusters with Optional tags\n  examplePlatform/gitOpsClusterGitOpsCluster:\n    type: harness:platform:GitOpsCluster\n    properties:\n      identifier: identifier\n      accountId: account_id\n      projectId: project_id\n      orgId: org_id\n      agentId: agent_id\n      requests:\n        - upsert: false\n          tags:\n            - foo:bar\n          clusters:\n            - server: https://kubernetes.default.svc\n              name: name\n              configs:\n                - tlsClientConfigs:\n                    - insecure: true\n                  clusterConnectionType: IN_CLUSTER\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport a Account level Gitops Cluster\n\n```sh\n $ pulumi import harness:platform/gitOpsCluster:GitOpsCluster example \u003cagent_id\u003e/\u003ccluster_id\u003e\n```\n\n Import a Project level Gitops Cluster\n\n```sh\n $ pulumi import harness:platform/gitOpsCluster:GitOpsCluster example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e/\u003ccluster_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps cluster.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps cluster.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps cluster.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the cluster.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps cluster.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterQuery:GitOpsClusterQuery"
                    },
                    "description": "Query for the GitOps cluster resources.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequest:GitOpsClusterRequest"
                    },
                    "description": "Cluster create or update request.\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "identifier"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps cluster.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps cluster.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps cluster.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the cluster.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps cluster.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterQuery:GitOpsClusterQuery"
                    },
                    "description": "Query for the GitOps cluster resources.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequest:GitOpsClusterRequest"
                    },
                    "description": "Cluster create or update request.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitOpsCluster resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps cluster.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps cluster.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps cluster.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps cluster.\n"
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsClusterQuery:GitOpsClusterQuery"
                        },
                        "description": "Query for the GitOps cluster resources.\n"
                    },
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsClusterRequest:GitOpsClusterRequest"
                        },
                        "description": "Cluster create or update request.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitOpsRepository:GitOpsRepository": {
            "description": "Resource for creating Harness Gitops Repositories.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.GitOpsRepository(\"example\", {\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    repos: [{\n        connectionType: \"HTTPS_ANONYMOUS\",\n        insecure: true,\n        name: \"repo_name\",\n        repo: \"https://github.com/willycoll/argocd-example-apps.git\",\n    }],\n    upsert: true,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.GitOpsRepository(\"example\",\n    account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    repos=[harness.platform.GitOpsRepositoryRepoArgs(\n        connection_type=\"HTTPS_ANONYMOUS\",\n        insecure=True,\n        name=\"repo_name\",\n        repo=\"https://github.com/willycoll/argocd-example-apps.git\",\n    )],\n    upsert=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.GitOpsRepository(\"example\", new()\n    {\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Repos = new[]\n        {\n            new Harness.Platform.Inputs.GitOpsRepositoryRepoArgs\n            {\n                ConnectionType = \"HTTPS_ANONYMOUS\",\n                Insecure = true,\n                Name = \"repo_name\",\n                Repo = \"https://github.com/willycoll/argocd-example-apps.git\",\n            },\n        },\n        Upsert = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitOpsRepository(ctx, \"example\", \u0026platform.GitOpsRepositoryArgs{\n\t\t\tAccountId:  pulumi.String(\"account_id\"),\n\t\t\tAgentId:    pulumi.String(\"agent_id\"),\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tRepos: platform.GitOpsRepositoryRepoArray{\n\t\t\t\t\u0026platform.GitOpsRepositoryRepoArgs{\n\t\t\t\t\tConnectionType: pulumi.String(\"HTTPS_ANONYMOUS\"),\n\t\t\t\t\tInsecure:       pulumi.Bool(true),\n\t\t\t\t\tName:           pulumi.String(\"repo_name\"),\n\t\t\t\t\tRepo:           pulumi.String(\"https://github.com/willycoll/argocd-example-apps.git\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUpsert: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitOpsRepository;\nimport com.pulumi.harness.platform.GitOpsRepositoryArgs;\nimport com.pulumi.harness.platform.inputs.GitOpsRepositoryRepoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GitOpsRepository(\"example\", GitOpsRepositoryArgs.builder()        \n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .repos(GitOpsRepositoryRepoArgs.builder()\n                .connectionType(\"HTTPS_ANONYMOUS\")\n                .insecure(true)\n                .name(\"repo_name\")\n                .repo(\"https://github.com/willycoll/argocd-example-apps.git\")\n                .build())\n            .upsert(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:GitOpsRepository\n    properties:\n      accountId: account_id\n      agentId: agent_id\n      identifier: identifier\n      orgId: org_id\n      projectId: project_id\n      repos:\n        - connectionType: HTTPS_ANONYMOUS\n          insecure: true\n          name: repo_name\n          repo: https://github.com/willycoll/argocd-example-apps.git\n      upsert: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport a Account level Gitops Repository\n\n```sh\n $ pulumi import harness:platform/gitOpsRepository:GitOpsRepository example \u003cagent_id\u003e/\u003crespository_id\u003e\n```\n\n Import a Project level Gitops Repository\n\n```sh\n $ pulumi import harness:platform/gitOpsRepository:GitOpsRepository example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e/\u003crespository_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps repository.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps repository.\n"
                },
                "credsOnly": {
                    "type": "boolean",
                    "description": "Indicates if to operate on credential set instead of repository.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps repository.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps repository.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps repository.\n"
                },
                "queryForceRefresh": {
                    "type": "boolean",
                    "description": "Indicates to force refresh query for repository.\n"
                },
                "queryProject": {
                    "type": "string",
                    "description": "Project to query for the GitOps repo.\n"
                },
                "queryRepo": {
                    "type": "string",
                    "description": "GitOps repository to query.\n"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepositoryRepo:GitOpsRepositoryRepo"
                    },
                    "description": "Repo details holding application configurations.\n"
                },
                "updateMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepositoryUpdateMask:GitOpsRepositoryUpdateMask"
                    },
                    "description": "Update mask of the repository.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps repository should be updated if existing and inserted if not.\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "identifier",
                "repos"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps repository.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps repository.\n"
                },
                "credsOnly": {
                    "type": "boolean",
                    "description": "Indicates if to operate on credential set instead of repository.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps repository.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps repository.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps repository.\n"
                },
                "queryForceRefresh": {
                    "type": "boolean",
                    "description": "Indicates to force refresh query for repository.\n"
                },
                "queryProject": {
                    "type": "string",
                    "description": "Project to query for the GitOps repo.\n"
                },
                "queryRepo": {
                    "type": "string",
                    "description": "GitOps repository to query.\n"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepositoryRepo:GitOpsRepositoryRepo"
                    },
                    "description": "Repo details holding application configurations.\n"
                },
                "updateMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepositoryUpdateMask:GitOpsRepositoryUpdateMask"
                    },
                    "description": "Update mask of the repository.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps repository should be updated if existing and inserted if not.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "identifier",
                "repos"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitOpsRepository resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps repository.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps repository.\n"
                    },
                    "credsOnly": {
                        "type": "boolean",
                        "description": "Indicates if to operate on credential set instead of repository.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps repository.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps repository.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps repository.\n"
                    },
                    "queryForceRefresh": {
                        "type": "boolean",
                        "description": "Indicates to force refresh query for repository.\n"
                    },
                    "queryProject": {
                        "type": "string",
                        "description": "Project to query for the GitOps repo.\n"
                    },
                    "queryRepo": {
                        "type": "string",
                        "description": "GitOps repository to query.\n"
                    },
                    "repos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsRepositoryRepo:GitOpsRepositoryRepo"
                        },
                        "description": "Repo details holding application configurations.\n"
                    },
                    "updateMasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsRepositoryUpdateMask:GitOpsRepositoryUpdateMask"
                        },
                        "description": "Update mask of the repository.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps repository should be updated if existing and inserted if not.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/githubConnector:GithubConnector": {
            "description": "Resource for creating a Github connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.GithubConnector(\"test\", {\n    apiAuthentication: {\n        githubApp: {\n            applicationId: \"application_id\",\n            installationId: \"installation_id\",\n            privateKeyRef: \"account.secret_id\",\n        },\n    },\n    connectionType: \"Account\",\n    credentials: {\n        http: {\n            tokenRef: \"account.secret_id\",\n            username: \"username\",\n        },\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://github.com/account\",\n    validationRepo: \"some_repo\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.GithubConnector(\"test\",\n    api_authentication=harness.platform.GithubConnectorApiAuthenticationArgs(\n        github_app=harness.platform.GithubConnectorApiAuthenticationGithubAppArgs(\n            application_id=\"application_id\",\n            installation_id=\"installation_id\",\n            private_key_ref=\"account.secret_id\",\n        ),\n    ),\n    connection_type=\"Account\",\n    credentials=harness.platform.GithubConnectorCredentialsArgs(\n        http=harness.platform.GithubConnectorCredentialsHttpArgs(\n            token_ref=\"account.secret_id\",\n            username=\"username\",\n        ),\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://github.com/account\",\n    validation_repo=\"some_repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.GithubConnector(\"test\", new()\n    {\n        ApiAuthentication = new Harness.Platform.Inputs.GithubConnectorApiAuthenticationArgs\n        {\n            GithubApp = new Harness.Platform.Inputs.GithubConnectorApiAuthenticationGithubAppArgs\n            {\n                ApplicationId = \"application_id\",\n                InstallationId = \"installation_id\",\n                PrivateKeyRef = \"account.secret_id\",\n            },\n        },\n        ConnectionType = \"Account\",\n        Credentials = new Harness.Platform.Inputs.GithubConnectorCredentialsArgs\n        {\n            Http = new Harness.Platform.Inputs.GithubConnectorCredentialsHttpArgs\n            {\n                TokenRef = \"account.secret_id\",\n                Username = \"username\",\n            },\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://github.com/account\",\n        ValidationRepo = \"some_repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGithubConnector(ctx, \"test\", \u0026platform.GithubConnectorArgs{\n\t\t\tApiAuthentication: \u0026platform.GithubConnectorApiAuthenticationArgs{\n\t\t\t\tGithubApp: \u0026platform.GithubConnectorApiAuthenticationGithubAppArgs{\n\t\t\t\t\tApplicationId:  pulumi.String(\"application_id\"),\n\t\t\t\t\tInstallationId: pulumi.String(\"installation_id\"),\n\t\t\t\t\tPrivateKeyRef:  pulumi.String(\"account.secret_id\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tConnectionType: pulumi.String(\"Account\"),\n\t\t\tCredentials: \u0026platform.GithubConnectorCredentialsArgs{\n\t\t\t\tHttp: \u0026platform.GithubConnectorCredentialsHttpArgs{\n\t\t\t\t\tTokenRef: pulumi.String(\"account.secret_id\"),\n\t\t\t\t\tUsername: pulumi.String(\"username\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl:            pulumi.String(\"https://github.com/account\"),\n\t\t\tValidationRepo: pulumi.String(\"some_repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GithubConnector;\nimport com.pulumi.harness.platform.GithubConnectorArgs;\nimport com.pulumi.harness.platform.inputs.GithubConnectorApiAuthenticationArgs;\nimport com.pulumi.harness.platform.inputs.GithubConnectorApiAuthenticationGithubAppArgs;\nimport com.pulumi.harness.platform.inputs.GithubConnectorCredentialsArgs;\nimport com.pulumi.harness.platform.inputs.GithubConnectorCredentialsHttpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new GithubConnector(\"test\", GithubConnectorArgs.builder()        \n            .apiAuthentication(GithubConnectorApiAuthenticationArgs.builder()\n                .githubApp(GithubConnectorApiAuthenticationGithubAppArgs.builder()\n                    .applicationId(\"application_id\")\n                    .installationId(\"installation_id\")\n                    .privateKeyRef(\"account.secret_id\")\n                    .build())\n                .build())\n            .connectionType(\"Account\")\n            .credentials(GithubConnectorCredentialsArgs.builder()\n                .http(GithubConnectorCredentialsHttpArgs.builder()\n                    .tokenRef(\"account.secret_id\")\n                    .username(\"username\")\n                    .build())\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://github.com/account\")\n            .validationRepo(\"some_repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:GithubConnector\n    properties:\n      apiAuthentication:\n        githubApp:\n          applicationId: application_id\n          installationId: installation_id\n          privateKeyRef: account.secret_id\n      connectionType: Account\n      credentials:\n        http:\n          tokenRef: account.secret_id\n          username: username\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://github.com/account\n      validationRepo: some_repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level github connector\n\n\n\n```sh\n $ pulumi import harness:platform/githubConnector:GithubConnector example \u003cconnector_id\u003e\n```\n\n Import org level github connector\n\n\n\n```sh\n $ pulumi import harness:platform/githubConnector:GithubConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level github connector\n\n\n\n```sh\n $ pulumi import harness:platform/githubConnector:GithubConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication",
                    "description": "Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentials:GithubConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Githubhub repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication",
                    "description": "Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentials:GithubConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Githubhub repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GithubConnector resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "$ref": "#/types/harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication",
                        "description": "Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/GithubConnectorCredentials:GithubConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Githubhub repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitlabConnector:GitlabConnector": {
            "description": "Resource for creating a Gitlab connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Credentials ssh\nconst test = new harness.platform.GitlabConnector(\"test\", {\n    connectionType: \"Account\",\n    credentials: {\n        ssh: {\n            sshKeyRef: \"account.test\",\n        },\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://gitlab.com/account\",\n    validationRepo: \"some_repo\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Credentials ssh\ntest = harness.platform.GitlabConnector(\"test\",\n    connection_type=\"Account\",\n    credentials=harness.platform.GitlabConnectorCredentialsArgs(\n        ssh=harness.platform.GitlabConnectorCredentialsSshArgs(\n            ssh_key_ref=\"account.test\",\n        ),\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://gitlab.com/account\",\n    validation_repo=\"some_repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Credentials ssh\n    var test = new Harness.Platform.GitlabConnector(\"test\", new()\n    {\n        ConnectionType = \"Account\",\n        Credentials = new Harness.Platform.Inputs.GitlabConnectorCredentialsArgs\n        {\n            Ssh = new Harness.Platform.Inputs.GitlabConnectorCredentialsSshArgs\n            {\n                SshKeyRef = \"account.test\",\n            },\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://gitlab.com/account\",\n        ValidationRepo = \"some_repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitlabConnector(ctx, \"test\", \u0026platform.GitlabConnectorArgs{\n\t\t\tConnectionType: pulumi.String(\"Account\"),\n\t\t\tCredentials: \u0026platform.GitlabConnectorCredentialsArgs{\n\t\t\t\tSsh: \u0026platform.GitlabConnectorCredentialsSshArgs{\n\t\t\t\t\tSshKeyRef: pulumi.String(\"account.test\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl:            pulumi.String(\"https://gitlab.com/account\"),\n\t\t\tValidationRepo: pulumi.String(\"some_repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitlabConnector;\nimport com.pulumi.harness.platform.GitlabConnectorArgs;\nimport com.pulumi.harness.platform.inputs.GitlabConnectorCredentialsArgs;\nimport com.pulumi.harness.platform.inputs.GitlabConnectorCredentialsSshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new GitlabConnector(\"test\", GitlabConnectorArgs.builder()        \n            .connectionType(\"Account\")\n            .credentials(GitlabConnectorCredentialsArgs.builder()\n                .ssh(GitlabConnectorCredentialsSshArgs.builder()\n                    .sshKeyRef(\"account.test\")\n                    .build())\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://gitlab.com/account\")\n            .validationRepo(\"some_repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Credentials ssh\n  test:\n    type: harness:platform:GitlabConnector\n    properties:\n      connectionType: Account\n      credentials:\n        ssh:\n          sshKeyRef: account.test\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://gitlab.com/account\n      validationRepo: some_repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level gitlab connector\n\n\n\n```sh\n $ pulumi import harness:platform/gitlabConnector:GitlabConnector example \u003cconnector_id\u003e\n```\n\n Import org level gitlab connector\n\n\n\n```sh\n $ pulumi import harness:platform/gitlabConnector:GitlabConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level gitlab connector\n\n\n\n```sh\n $ pulumi import harness:platform/gitlabConnector:GitlabConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication",
                    "description": "Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the gitlab repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication",
                    "description": "Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the gitlab repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitlabConnector resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "$ref": "#/types/harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication",
                        "description": "Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the gitlab repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitopsApplications:GitopsApplications": {
            "description": "Resource for creating a Harness Gitops Application.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitopsApplications;\nimport com.pulumi.harness.platform.GitopsApplicationsArgs;\nimport com.pulumi.harness.platform.inputs.GitopsApplicationsApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GitopsApplications(\"example\", GitopsApplicationsArgs.builder()        \n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .applications(GitopsApplicationsApplicationArgs.builder()\n                .metadatas(GitopsApplicationsApplicationMetadataArgs.builder()\n                    .annotations()\n                    .labels(Map.ofEntries(\n                        Map.entry(\"harness.io/envRef\", \"env_id\"),\n                        Map.entry(\"harness.io/serviceRef\", \"service_id\")\n                    ))\n                    .name(\"appname123\")\n                    .build())\n                .specs(GitopsApplicationsApplicationSpecArgs.builder()\n                    .destination(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .source(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .syncPolicy(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .build())\n            .clusterId(\"cluster_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .repoId(\"repo_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:GitopsApplications\n    properties:\n      accountId: account_id\n      agentId: agent_id\n      applications:\n        - metadatas:\n            - annotations: {}\n              labels:\n                harness.io/envRef: env_id\n                harness.io/serviceRef: service_id\n              name: appname123\n          specs:\n            - destination:\n                - namespace: namespace-123\n                  server: https://1.3.4.5\n              source:\n                - path: helm-guestbook\n                  repoUrl: https://github.com/willycoll/argocd-example-apps.git\n                  targetRevision: master\n              syncPolicy:\n                - syncOptions:\n                    - PrunePropagationPolicy=undefined\n                    - CreateNamespace=false\n                    - Validate=false\n                    - skipSchemaValidations=false\n                    - autoCreateNamespace=false\n                    - pruneLast=false\n                    - applyOutofSyncOnly=false\n                    - Replace=false\n                    - retry=false\n      clusterId: cluster_id\n      identifier: identifier\n      orgId: org_id\n      projectId: project_id\n      repoId: repo_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport a Project level Gitops Application\n\n```sh\n $ pulumi import harness:platform/gitopsApplications:GitopsApplications example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e/\u003capp_name\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps application.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps application.\n"
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplication:GitopsApplicationsApplication"
                    },
                    "description": "Definition of the GitOps application resource.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster identifier of the GitOps application.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps application.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the GitOps application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "optionsRemoveExistingFinalizers": {
                    "type": "boolean",
                    "description": "Options to remove existing finalizers to delete the GitOps application.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps application.\n"
                },
                "queryProject": {
                    "type": "string",
                    "description": "Project names to filter the corresponding GitOps applications.\n"
                },
                "queryRefresh": {
                    "type": "string",
                    "description": "Forces the GitOps application to reconcile when set to true.\n"
                },
                "queryRepo": {
                    "type": "string",
                    "description": "Repo URL to restrict returned list applications.\n"
                },
                "queryResourceVersion": {
                    "type": "string",
                    "description": "Shows modifications after a version that is specified with a watch call.\n"
                },
                "querySelector": {
                    "type": "string",
                    "description": "Filters GitOps applications corresponding to the labels.\n"
                },
                "repoId": {
                    "type": "string",
                    "description": "Repository identifier of the GitOps application.\n"
                },
                "requestCascade": {
                    "type": "boolean",
                    "description": "Request cascade to delete the GitOps application.\n"
                },
                "requestName": {
                    "type": "string",
                    "description": "Request name to delete the GitOps application.\n"
                },
                "requestPropagationPolicy": {
                    "type": "string",
                    "description": "Request propagation policy to delete the GitOps application.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps application should be updated if existing and inserted if not.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps application has to be validated.\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "applications",
                "clusterId",
                "identifier",
                "name",
                "orgId",
                "projectId",
                "repoId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps application.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps application.\n"
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsApplicationsApplication:GitopsApplicationsApplication"
                    },
                    "description": "Definition of the GitOps application resource.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster identifier of the GitOps application.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps application.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the GitOps application.\n"
                },
                "optionsRemoveExistingFinalizers": {
                    "type": "boolean",
                    "description": "Options to remove existing finalizers to delete the GitOps application.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps application.\n"
                },
                "queryProject": {
                    "type": "string",
                    "description": "Project names to filter the corresponding GitOps applications.\n"
                },
                "queryRefresh": {
                    "type": "string",
                    "description": "Forces the GitOps application to reconcile when set to true.\n"
                },
                "queryRepo": {
                    "type": "string",
                    "description": "Repo URL to restrict returned list applications.\n"
                },
                "queryResourceVersion": {
                    "type": "string",
                    "description": "Shows modifications after a version that is specified with a watch call.\n"
                },
                "querySelector": {
                    "type": "string",
                    "description": "Filters GitOps applications corresponding to the labels.\n"
                },
                "repoId": {
                    "type": "string",
                    "description": "Repository identifier of the GitOps application.\n"
                },
                "requestCascade": {
                    "type": "boolean",
                    "description": "Request cascade to delete the GitOps application.\n"
                },
                "requestName": {
                    "type": "string",
                    "description": "Request name to delete the GitOps application.\n"
                },
                "requestPropagationPolicy": {
                    "type": "string",
                    "description": "Request propagation policy to delete the GitOps application.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps application should be updated if existing and inserted if not.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps application has to be validated.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "applications",
                "clusterId",
                "identifier",
                "orgId",
                "projectId",
                "repoId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitopsApplications resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps application.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps application.\n"
                    },
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitopsApplicationsApplication:GitopsApplicationsApplication"
                        },
                        "description": "Definition of the GitOps application resource.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster identifier of the GitOps application.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps application.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of the GitOps application.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the GitOps application.\n"
                    },
                    "optionsRemoveExistingFinalizers": {
                        "type": "boolean",
                        "description": "Options to remove existing finalizers to delete the GitOps application.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps application.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps application.\n"
                    },
                    "queryProject": {
                        "type": "string",
                        "description": "Project names to filter the corresponding GitOps applications.\n"
                    },
                    "queryRefresh": {
                        "type": "string",
                        "description": "Forces the GitOps application to reconcile when set to true.\n"
                    },
                    "queryRepo": {
                        "type": "string",
                        "description": "Repo URL to restrict returned list applications.\n"
                    },
                    "queryResourceVersion": {
                        "type": "string",
                        "description": "Shows modifications after a version that is specified with a watch call.\n"
                    },
                    "querySelector": {
                        "type": "string",
                        "description": "Filters GitOps applications corresponding to the labels.\n"
                    },
                    "repoId": {
                        "type": "string",
                        "description": "Repository identifier of the GitOps application.\n"
                    },
                    "requestCascade": {
                        "type": "boolean",
                        "description": "Request cascade to delete the GitOps application.\n"
                    },
                    "requestName": {
                        "type": "string",
                        "description": "Request name to delete the GitOps application.\n"
                    },
                    "requestPropagationPolicy": {
                        "type": "string",
                        "description": "Request propagation policy to delete the GitOps application.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps application should be updated if existing and inserted if not.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps application has to be validated.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitopsGnupg:GitopsGnupg": {
            "description": "GPG public key in the server's configuration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.GitopsGnupg(\"example\", {\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    requests: [{\n        upsert: true,\n        publickeys: [{\n            keyData: \"-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----\",\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.GitopsGnupg(\"example\",\n    account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    requests=[harness.platform.GitopsGnupgRequestArgs(\n        upsert=True,\n        publickeys=[harness.platform.GitopsGnupgRequestPublickeyArgs(\n            key_data=\"-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----\",\n        )],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.GitopsGnupg(\"example\", new()\n    {\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        Requests = new[]\n        {\n            new Harness.Platform.Inputs.GitopsGnupgRequestArgs\n            {\n                Upsert = true,\n                Publickeys = new[]\n                {\n                    new Harness.Platform.Inputs.GitopsGnupgRequestPublickeyArgs\n                    {\n                        KeyData = \"-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitopsGnupg(ctx, \"example\", \u0026platform.GitopsGnupgArgs{\n\t\t\tAccountId: pulumi.String(\"account_id\"),\n\t\t\tAgentId:   pulumi.String(\"agent_id\"),\n\t\t\tRequests: platform.GitopsGnupgRequestArray{\n\t\t\t\t\u0026platform.GitopsGnupgRequestArgs{\n\t\t\t\t\tUpsert: pulumi.Bool(true),\n\t\t\t\t\tPublickeys: platform.GitopsGnupgRequestPublickeyArray{\n\t\t\t\t\t\t\u0026platform.GitopsGnupgRequestPublickeyArgs{\n\t\t\t\t\t\t\tKeyData: pulumi.String(\"-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitopsGnupg;\nimport com.pulumi.harness.platform.GitopsGnupgArgs;\nimport com.pulumi.harness.platform.inputs.GitopsGnupgRequestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GitopsGnupg(\"example\", GitopsGnupgArgs.builder()        \n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .requests(GitopsGnupgRequestArgs.builder()\n                .upsert(true)\n                .publickeys(GitopsGnupgRequestPublickeyArgs.builder()\n                    .keyData(\"-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:GitopsGnupg\n    properties:\n      accountId: account_id\n      agentId: agent_id\n      requests:\n        - upsert: true\n          publickeys:\n            - keyData: '-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport a Account level Gitops Cluster\n\n```sh\n $ pulumi import harness:platform/gitopsGnupg:GitopsGnupg example \u003cagent_id\u003e/\u003ckey_id\u003e\n```\n\n Import a Project level Gitops Cluster\n\n```sh\n $ pulumi import harness:platform/gitopsGnupg:GitopsGnupg example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e/\u003ckey_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the GnuPG Key.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier for the GnuPG Key.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier for the GnuPG Key.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the GnuPG Key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the GnuPG Key.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsGnupgRequest:GitopsGnupgRequest"
                    },
                    "description": "GnuPGPublicKey is a representation of a GnuPG public key\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "identifier",
                "requests"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the GnuPG Key.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier for the GnuPG Key.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the GnuPG Key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the GnuPG Key.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsGnupgRequest:GitopsGnupgRequest"
                    },
                    "description": "GnuPGPublicKey is a representation of a GnuPG public key\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "requests"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitopsGnupg resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the GnuPG Key.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier for the GnuPG Key.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for the GnuPG Key.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the GnuPG Key.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the GnuPG Key.\n"
                    },
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitopsGnupgRequest:GitopsGnupgRequest"
                        },
                        "description": "GnuPGPublicKey is a representation of a GnuPG public key\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitopsRepoCert:GitopsRepoCert": {
            "description": "Resource for creating a Harness Gitops Repositories Certificates.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitopsRepoCert;\nimport com.pulumi.harness.platform.GitopsRepoCertArgs;\nimport com.pulumi.harness.platform.inputs.GitopsRepoCertRequestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GitopsRepoCert(\"example\", GitopsRepoCertArgs.builder()        \n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .requests(GitopsRepoCertRequestArgs.builder()\n                .certificates(GitopsRepoCertRequestCertificateArgs.builder()\n                    .items(GitopsRepoCertRequestCertificateItemArgs.builder()\n                        .certData(\"yourcertdata\")\n                        .certType(\"https\")\n                        .serverName(\"serverName\")\n                        .build())\n                    .metadata()\n                    .build())\n                .upsert(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:GitopsRepoCert\n    properties:\n      accountId: account_id\n      agentId: agent_id\n      requests:\n        - certificates:\n            - items:\n                - certData: yourcertdata\n                  certType: https\n                  serverName: serverName\n              metadata:\n                - {}\n          upsert: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport a Account level Gitops Repository Certificate\n\n```sh\n $ pulumi import harness:platform/gitopsRepoCert:GitopsRepoCert example \u003crepocert_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "account identifier of the Repository Certificates.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "agent identifier of the Repository Certificates.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "organization identifier of the Repository Certificates.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project identifier of the Repository Certificates.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsRepoCertRequest:GitopsRepoCertRequest"
                    },
                    "description": "Repository Certificates create/Update request.\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "requests"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "account identifier of the Repository Certificates.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "agent identifier of the Repository Certificates.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "organization identifier of the Repository Certificates.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project identifier of the Repository Certificates.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsRepoCertRequest:GitopsRepoCertRequest"
                    },
                    "description": "Repository Certificates create/Update request.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "requests"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitopsRepoCert resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "account identifier of the Repository Certificates.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "agent identifier of the Repository Certificates.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization identifier of the Repository Certificates.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project identifier of the Repository Certificates.\n"
                    },
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitopsRepoCertRequest:GitopsRepoCertRequest"
                        },
                        "description": "Repository Certificates create/Update request.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitopsRepoCred:GitopsRepoCred": {
            "description": "Resource for creating a Harness Gitops Repositories Credentials.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.GitopsRepoCred(\"test\", {\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    creds: [{\n        type: \"git\",\n        url: \"github.com\",\n        sshPrivateKey: \"yoursshprivatekey\",\n    }],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.GitopsRepoCred(\"test\",\n    identifier=\"identifier\",\n    account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    creds=[harness.platform.GitopsRepoCredCredArgs(\n        type=\"git\",\n        url=\"github.com\",\n        ssh_private_key=\"yoursshprivatekey\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.GitopsRepoCred(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        Creds = new[]\n        {\n            new Harness.Platform.Inputs.GitopsRepoCredCredArgs\n            {\n                Type = \"git\",\n                Url = \"github.com\",\n                SshPrivateKey = \"yoursshprivatekey\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitopsRepoCred(ctx, \"test\", \u0026platform.GitopsRepoCredArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tAccountId:  pulumi.String(\"account_id\"),\n\t\t\tAgentId:    pulumi.String(\"agent_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tCreds: platform.GitopsRepoCredCredArray{\n\t\t\t\t\u0026platform.GitopsRepoCredCredArgs{\n\t\t\t\t\tType:          pulumi.String(\"git\"),\n\t\t\t\t\tUrl:           pulumi.String(\"github.com\"),\n\t\t\t\t\tSshPrivateKey: pulumi.String(\"yoursshprivatekey\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitopsRepoCred;\nimport com.pulumi.harness.platform.GitopsRepoCredArgs;\nimport com.pulumi.harness.platform.inputs.GitopsRepoCredCredArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new GitopsRepoCred(\"test\", GitopsRepoCredArgs.builder()        \n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .creds(GitopsRepoCredCredArgs.builder()\n                .type(\"git\")\n                .url(\"github.com\")\n                .sshPrivateKey(\"yoursshprivatekey\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:GitopsRepoCred\n    properties:\n      identifier: identifier\n      accountId: account_id\n      agentId: agent_id\n      projectId: project_id\n      orgId: org_id\n      creds:\n        - type: git\n          url: github.com\n          sshPrivateKey: yoursshprivatekey\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport a Account level Gitops Repository Credentials\n\n\n\n```sh\n $ pulumi import harness:platform/gitopsRepoCred:GitopsRepoCred example \u003cagent_id\u003e/\u003crepocred_id\u003e\n```\n\n Import a Project level Gitops Repository Credentials\n\n\n\n```sh\n $ pulumi import harness:platform/gitopsRepoCred:GitopsRepoCred example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e/\u003crepocred_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the Repository Credential.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the Repository Credential.\n"
                },
                "creds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsRepoCredCred:GitopsRepoCredCred"
                    },
                    "description": "credential details.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the Repository Credential.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the Repository Credential.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the Repository Credential.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "if the Repository credential should be upserted.\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "creds",
                "identifier"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the Repository Credential.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the Repository Credential.\n"
                },
                "creds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitopsRepoCredCred:GitopsRepoCredCred"
                    },
                    "description": "credential details.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the Repository Credential.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the Repository Credential.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the Repository Credential.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "if the Repository credential should be upserted.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitopsRepoCred resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the Repository Credential.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the Repository Credential.\n"
                    },
                    "creds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitopsRepoCredCred:GitopsRepoCredCred"
                        },
                        "description": "credential details.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the Repository Credential.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the Repository Credential.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the Repository Credential.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "if the Repository credential should be upserted.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/helmConnector:HelmConnector": {
            "description": "Resource for creating a HTTP Helm connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Credential anonymous\nconst test = new harness.platform.HelmConnector(\"test\", {\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://helm.example.com\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Credential anonymous\ntest = harness.platform.HelmConnector(\"test\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://helm.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Credential anonymous\n    var test = new Harness.Platform.HelmConnector(\"test\", new()\n    {\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://helm.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewHelmConnector(ctx, \"test\", \u0026platform.HelmConnectorArgs{\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://helm.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.HelmConnector;\nimport com.pulumi.harness.platform.HelmConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new HelmConnector(\"test\", HelmConnectorArgs.builder()        \n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://helm.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Credential anonymous\n  test:\n    type: harness:platform:HelmConnector\n    properties:\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://helm.example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level helm connector\n\n\n\n```sh\n $ pulumi import harness:platform/helmConnector:HelmConnector example \u003cconnector_id\u003e\n```\n\n Import org level helm connector\n\n\n\n```sh\n $ pulumi import harness:platform/helmConnector:HelmConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level helm connector\n\n\n\n```sh\n $ pulumi import harness:platform/helmConnector:HelmConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/HelmConnectorCredentials:HelmConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm server.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/HelmConnectorCredentials:HelmConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm server.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HelmConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/HelmConnectorCredentials:HelmConnectorCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the helm server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/infrastructure:Infrastructure": {
            "description": "Resource for creating a Harness Infrastructure.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.Infrastructure(\"example\", {\n    deploymentType: \"Kubernetes\",\n    envId: \"environmentIdentifier\",\n    identifier: \"identifier\",\n    orgId: \"orgIdentifer\",\n    projectId: \"projectIdentifier\",\n    type: \"KubernetesDirect\",\n    yaml: `  infrastructureDefinition:\n   name: name\n   identifier: identifier\n   description: \"\"\n   tags:\n     asda: \"\"\n   orgIdentifier: orgIdentifer\n   projectIdentifier: projectIdentifier\n   environmentRef: environmentIdentifier\n   deploymentType: Kubernetes\n   type: KubernetesDirect\n   spec:\n    connectorRef: account.gfgf\n    namespace: asdasdsa\n    releaseName: release-\u003c+INFRA_KEY\u003e\n    allowSimultaneousDeployments: false\n\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.Infrastructure(\"example\",\n    deployment_type=\"Kubernetes\",\n    env_id=\"environmentIdentifier\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifer\",\n    project_id=\"projectIdentifier\",\n    type=\"KubernetesDirect\",\n    yaml=\"\"\"  infrastructureDefinition:\n   name: name\n   identifier: identifier\n   description: \"\"\n   tags:\n     asda: \"\"\n   orgIdentifier: orgIdentifer\n   projectIdentifier: projectIdentifier\n   environmentRef: environmentIdentifier\n   deploymentType: Kubernetes\n   type: KubernetesDirect\n   spec:\n    connectorRef: account.gfgf\n    namespace: asdasdsa\n    releaseName: release-\u003c+INFRA_KEY\u003e\n    allowSimultaneousDeployments: false\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Infrastructure(\"example\", new()\n    {\n        DeploymentType = \"Kubernetes\",\n        EnvId = \"environmentIdentifier\",\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifer\",\n        ProjectId = \"projectIdentifier\",\n        Type = \"KubernetesDirect\",\n        Yaml = @\"  infrastructureDefinition:\n   name: name\n   identifier: identifier\n   description: \"\"\"\"\n   tags:\n     asda: \"\"\"\"\n   orgIdentifier: orgIdentifer\n   projectIdentifier: projectIdentifier\n   environmentRef: environmentIdentifier\n   deploymentType: Kubernetes\n   type: KubernetesDirect\n   spec:\n    connectorRef: account.gfgf\n    namespace: asdasdsa\n    releaseName: release-\u003c+INFRA_KEY\u003e\n    allowSimultaneousDeployments: false\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewInfrastructure(ctx, \"example\", \u0026platform.InfrastructureArgs{\n\t\t\tDeploymentType: pulumi.String(\"Kubernetes\"),\n\t\t\tEnvId:          pulumi.String(\"environmentIdentifier\"),\n\t\t\tIdentifier:     pulumi.String(\"identifier\"),\n\t\t\tOrgId:          pulumi.String(\"orgIdentifer\"),\n\t\t\tProjectId:      pulumi.String(\"projectIdentifier\"),\n\t\t\tType:           pulumi.String(\"KubernetesDirect\"),\n\t\t\tYaml:           pulumi.String(\"  infrastructureDefinition:\\n   name: name\\n   identifier: identifier\\n   description: \\\"\\\"\\n   tags:\\n     asda: \\\"\\\"\\n   orgIdentifier: orgIdentifer\\n   projectIdentifier: projectIdentifier\\n   environmentRef: environmentIdentifier\\n   deploymentType: Kubernetes\\n   type: KubernetesDirect\\n   spec:\\n    connectorRef: account.gfgf\\n    namespace: asdasdsa\\n    releaseName: release-\u003c+INFRA_KEY\u003e\\n    allowSimultaneousDeployments: false\\n\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Infrastructure;\nimport com.pulumi.harness.platform.InfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Infrastructure(\"example\", InfrastructureArgs.builder()        \n            .deploymentType(\"Kubernetes\")\n            .envId(\"environmentIdentifier\")\n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifer\")\n            .projectId(\"projectIdentifier\")\n            .type(\"KubernetesDirect\")\n            .yaml(\"\"\"\n  infrastructureDefinition:\n   name: name\n   identifier: identifier\n   description: \"\"\n   tags:\n     asda: \"\"\n   orgIdentifier: orgIdentifer\n   projectIdentifier: projectIdentifier\n   environmentRef: environmentIdentifier\n   deploymentType: Kubernetes\n   type: KubernetesDirect\n   spec:\n    connectorRef: account.gfgf\n    namespace: asdasdsa\n    releaseName: release-\u003c+INFRA_KEY\u003e\n    allowSimultaneousDeployments: false\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Infrastructure\n    properties:\n      deploymentType: Kubernetes\n      envId: environmentIdentifier\n      identifier: identifier\n      orgId: orgIdentifer\n      projectId: projectIdentifier\n      type: KubernetesDirect\n      yaml: |2+\n          infrastructureDefinition:\n           name: name\n           identifier: identifier\n           description: \"\"\n           tags:\n             asda: \"\"\n           orgIdentifier: orgIdentifer\n           projectIdentifier: projectIdentifier\n           environmentRef: environmentIdentifier\n           deploymentType: Kubernetes\n           type: KubernetesDirect\n           spec:\n            connectorRef: account.gfgf\n            namespace: asdasdsa\n            releaseName: release-\u003c+INFRA_KEY\u003e\n            allowSimultaneousDeployments: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level infrastructure\n\n```sh\n $ pulumi import harness:platform/infrastructure:Infrastructure example \u003cenv_id\u003e/\u003cinfrastructure_id\u003e\n```\n\n Import org level infrastructure\n\n```sh\n $ pulumi import harness:platform/infrastructure:Infrastructure example \u003corg_id\u003e/\u003cenv_id\u003e/\u003cinfrastructure_id\u003e\n```\n\n Import project level infrastructure\n\n```sh\n $ pulumi import harness:platform/infrastructure:Infrastructure example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cenv_id\u003e/\u003cinfrastructure_id\u003e\n```\n\n ",
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "envId": {
                    "type": "string",
                    "description": "Environment Identifier.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of infrastructure\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Infrastructure YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "deploymentType",
                "envId",
                "forceDelete",
                "identifier",
                "name",
                "tags",
                "type",
                "yaml"
            ],
            "inputProperties": {
                "deploymentType": {
                    "type": "string",
                    "description": "Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "envId": {
                    "type": "string",
                    "description": "Environment Identifier.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of infrastructure\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Infrastructure YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "envId",
                "identifier",
                "type",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Infrastructure resources.\n",
                "properties": {
                    "deploymentType": {
                        "type": "string",
                        "description": "Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "envId": {
                        "type": "string",
                        "description": "Environment Identifier.\n"
                    },
                    "forceDelete": {
                        "type": "string",
                        "description": "Enable this flag for force deletion of infrastructure\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Infrastructure YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/inputSet:InputSet": {
            "description": "Resource for creating a Harness InputSet.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.InputSet(\"example\", {\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    pipelineId: \"pipeline_id\",\n    yaml: `inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"org_id\"\n  projectIdentifier: \"project_id\"\n  pipeline:\n    identifier: \"pipeline_id\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n`,\n});\n// Remote InputSet\nconst test = new harness.platform.InputSet(\"test\", {\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    orgId: harness_platform_organization.test.id,\n    projectId: harness_platform_project.test.id,\n    pipelineId: harness_platform_pipeline.test.id,\n    gitDetails: {\n        branchName: \"main\",\n        commitMessage: \"Commit\",\n        filePath: \".harness/file_path.yaml\",\n        connectorRef: \"account.connector_ref\",\n        storeType: \"REMOTE\",\n        repoName: \"repo_name\",\n    },\n    yaml: `inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"${harness_platform_organization.test.id}\"\n  projectIdentifier: \"${harness_platform_project.test.id}\"\n  pipeline:\n    identifier: \"${harness_platform_pipeline.test.id}\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.InputSet(\"example\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    pipeline_id=\"pipeline_id\",\n    yaml=\"\"\"inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"org_id\"\n  projectIdentifier: \"project_id\"\n  pipeline:\n    identifier: \"pipeline_id\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n\"\"\")\n# Remote InputSet\ntest = harness.platform.InputSet(\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    org_id=harness_platform_organization[\"test\"][\"id\"],\n    project_id=harness_platform_project[\"test\"][\"id\"],\n    pipeline_id=harness_platform_pipeline[\"test\"][\"id\"],\n    git_details=harness.platform.InputSetGitDetailsArgs(\n        branch_name=\"main\",\n        commit_message=\"Commit\",\n        file_path=\".harness/file_path.yaml\",\n        connector_ref=\"account.connector_ref\",\n        store_type=\"REMOTE\",\n        repo_name=\"repo_name\",\n    ),\n    yaml=f\"\"\"inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"{harness_platform_organization[\"test\"][\"id\"]}\"\n  projectIdentifier: \"{harness_platform_project[\"test\"][\"id\"]}\"\n  pipeline:\n    identifier: \"{harness_platform_pipeline[\"test\"][\"id\"]}\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.InputSet(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        PipelineId = \"pipeline_id\",\n        Yaml = @\"inputSet:\n  identifier: \"\"identifier\"\"\n  name: \"\"name\"\"\n  tags:\n    foo: \"\"bar\"\"\n  orgIdentifier: \"\"org_id\"\"\n  projectIdentifier: \"\"project_id\"\"\n  pipeline:\n    identifier: \"\"pipeline_id\"\"\n    variables:\n    - name: \"\"key\"\"\n      type: \"\"String\"\"\n      value: \"\"value\"\"\n\",\n    });\n\n    // Remote InputSet\n    var test = new Harness.Platform.InputSet(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        OrgId = harness_platform_organization.Test.Id,\n        ProjectId = harness_platform_project.Test.Id,\n        PipelineId = harness_platform_pipeline.Test.Id,\n        GitDetails = new Harness.Platform.Inputs.InputSetGitDetailsArgs\n        {\n            BranchName = \"main\",\n            CommitMessage = \"Commit\",\n            FilePath = \".harness/file_path.yaml\",\n            ConnectorRef = \"account.connector_ref\",\n            StoreType = \"REMOTE\",\n            RepoName = \"repo_name\",\n        },\n        Yaml = @$\"inputSet:\n  identifier: \"\"identifier\"\"\n  name: \"\"name\"\"\n  tags:\n    foo: \"\"bar\"\"\n  orgIdentifier: \"\"{harness_platform_organization.Test.Id}\"\"\n  projectIdentifier: \"\"{harness_platform_project.Test.Id}\"\"\n  pipeline:\n    identifier: \"\"{harness_platform_pipeline.Test.Id}\"\"\n    variables:\n    - name: \"\"key\"\"\n      type: \"\"String\"\"\n      value: \"\"value\"\"\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewInputSet(ctx, \"example\", \u0026platform.InputSetArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tPipelineId: pulumi.String(\"pipeline_id\"),\n\t\t\tYaml:       pulumi.String(\"inputSet:\\n  identifier: \\\"identifier\\\"\\n  name: \\\"name\\\"\\n  tags:\\n    foo: \\\"bar\\\"\\n  orgIdentifier: \\\"org_id\\\"\\n  projectIdentifier: \\\"project_id\\\"\\n  pipeline:\\n    identifier: \\\"pipeline_id\\\"\\n    variables:\\n    - name: \\\"key\\\"\\n      type: \\\"String\\\"\\n      value: \\\"value\\\"\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewInputSet(ctx, \"test\", \u0026platform.InputSetArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tOrgId:      pulumi.Any(harness_platform_organization.Test.Id),\n\t\t\tProjectId:  pulumi.Any(harness_platform_project.Test.Id),\n\t\t\tPipelineId: pulumi.Any(harness_platform_pipeline.Test.Id),\n\t\t\tGitDetails: \u0026platform.InputSetGitDetailsArgs{\n\t\t\t\tBranchName:    pulumi.String(\"main\"),\n\t\t\t\tCommitMessage: pulumi.String(\"Commit\"),\n\t\t\t\tFilePath:      pulumi.String(\".harness/file_path.yaml\"),\n\t\t\t\tConnectorRef:  pulumi.String(\"account.connector_ref\"),\n\t\t\t\tStoreType:     pulumi.String(\"REMOTE\"),\n\t\t\t\tRepoName:      pulumi.String(\"repo_name\"),\n\t\t\t},\n\t\t\tYaml: pulumi.String(fmt.Sprintf(`inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"%v\"\n  projectIdentifier: \"%v\"\n  pipeline:\n    identifier: \"%v\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n`, harness_platform_organization.Test.Id, harness_platform_project.Test.Id, harness_platform_pipeline.Test.Id)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.InputSet;\nimport com.pulumi.harness.platform.InputSetArgs;\nimport com.pulumi.harness.platform.inputs.InputSetGitDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new InputSet(\"example\", InputSetArgs.builder()        \n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .pipelineId(\"pipeline_id\")\n            .yaml(\"\"\"\ninputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"org_id\"\n  projectIdentifier: \"project_id\"\n  pipeline:\n    identifier: \"pipeline_id\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n            \"\"\")\n            .build());\n\n        var test = new InputSet(\"test\", InputSetArgs.builder()        \n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .orgId(harness_platform_organization.test().id())\n            .projectId(harness_platform_project.test().id())\n            .pipelineId(harness_platform_pipeline.test().id())\n            .gitDetails(InputSetGitDetailsArgs.builder()\n                .branchName(\"main\")\n                .commitMessage(\"Commit\")\n                .filePath(\".harness/file_path.yaml\")\n                .connectorRef(\"account.connector_ref\")\n                .storeType(\"REMOTE\")\n                .repoName(\"repo_name\")\n                .build())\n            .yaml(\"\"\"\ninputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"%s\"\n  projectIdentifier: \"%s\"\n  pipeline:\n    identifier: \"%s\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n\", harness_platform_organization.test().id(),harness_platform_project.test().id(),harness_platform_pipeline.test().id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:InputSet\n    properties:\n      identifier: identifier\n      tags:\n        - foo:bar\n      orgId: org_id\n      projectId: project_id\n      pipelineId: pipeline_id\n      yaml: |\n        inputSet:\n          identifier: \"identifier\"\n          name: \"name\"\n          tags:\n            foo: \"bar\"\n          orgIdentifier: \"org_id\"\n          projectIdentifier: \"project_id\"\n          pipeline:\n            identifier: \"pipeline_id\"\n            variables:\n            - name: \"key\"\n              type: \"String\"\n              value: \"value\"\n  # Remote InputSet\n  test:\n    type: harness:platform:InputSet\n    properties:\n      identifier: identifier\n      tags:\n        - foo:bar\n      orgId: ${harness_platform_organization.test.id}\n      projectId: ${harness_platform_project.test.id}\n      pipelineId: ${harness_platform_pipeline.test.id}\n      gitDetails:\n        branchName: main\n        commitMessage: Commit\n        filePath: .harness/file_path.yaml\n        connectorRef: account.connector_ref\n        storeType: REMOTE\n        repoName: repo_name\n      yaml: |\n        inputSet:\n          identifier: \"identifier\"\n          name: \"name\"\n          tags:\n            foo: \"bar\"\n          orgIdentifier: \"${harness_platform_organization.test.id}\"\n          projectIdentifier: \"${harness_platform_project.test.id}\"\n          pipeline:\n            identifier: \"${harness_platform_pipeline.test.id}\"\n            variables:\n            - name: \"key\"\n              type: \"String\"\n              value: \"value\"\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport input set\n\n\n\n```sh\n $ pulumi import harness:platform/inputSet:InputSet example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cpipeline_id\u003e/\u003cinput_set_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/InputSetGitDetails:InputSetGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "pipelineId": {
                    "type": "string",
                    "description": "Identifier of the pipeline\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Input Set YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "orgId",
                "pipelineId",
                "projectId",
                "yaml"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/InputSetGitDetails:InputSetGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "pipelineId": {
                    "type": "string",
                    "description": "Identifier of the pipeline\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Input Set YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "pipelineId",
                "projectId",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InputSet resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/InputSetGitDetails:InputSetGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": "Identifier of the pipeline\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Input Set YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/jiraConnector:JiraConnector": {
            "description": "Resource for creating a Jira connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.JiraConnector(\"test\", {\n    auth: {\n        authType: \"UsernamePassword\",\n        usernamePassword: {\n            passwordRef: \"account.secret_id\",\n            username: \"admin\",\n        },\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://jira.com\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.JiraConnector(\"test\",\n    auth=harness.platform.JiraConnectorAuthArgs(\n        auth_type=\"UsernamePassword\",\n        username_password=harness.platform.JiraConnectorAuthUsernamePasswordArgs(\n            password_ref=\"account.secret_id\",\n            username=\"admin\",\n        ),\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://jira.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.JiraConnector(\"test\", new()\n    {\n        Auth = new Harness.Platform.Inputs.JiraConnectorAuthArgs\n        {\n            AuthType = \"UsernamePassword\",\n            UsernamePassword = new Harness.Platform.Inputs.JiraConnectorAuthUsernamePasswordArgs\n            {\n                PasswordRef = \"account.secret_id\",\n                Username = \"admin\",\n            },\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://jira.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewJiraConnector(ctx, \"test\", \u0026platform.JiraConnectorArgs{\n\t\t\tAuth: \u0026platform.JiraConnectorAuthArgs{\n\t\t\t\tAuthType: pulumi.String(\"UsernamePassword\"),\n\t\t\t\tUsernamePassword: \u0026platform.JiraConnectorAuthUsernamePasswordArgs{\n\t\t\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t\t\t\tUsername:    pulumi.String(\"admin\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://jira.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.JiraConnector;\nimport com.pulumi.harness.platform.JiraConnectorArgs;\nimport com.pulumi.harness.platform.inputs.JiraConnectorAuthArgs;\nimport com.pulumi.harness.platform.inputs.JiraConnectorAuthUsernamePasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new JiraConnector(\"test\", JiraConnectorArgs.builder()        \n            .auth(JiraConnectorAuthArgs.builder()\n                .authType(\"UsernamePassword\")\n                .usernamePassword(JiraConnectorAuthUsernamePasswordArgs.builder()\n                    .passwordRef(\"account.secret_id\")\n                    .username(\"admin\")\n                    .build())\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://jira.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:JiraConnector\n    properties:\n      auth:\n        authType: UsernamePassword\n        usernamePassword:\n          passwordRef: account.secret_id\n          username: admin\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://jira.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level jira connector\n\n\n\n```sh\n $ pulumi import harness:platform/jiraConnector:JiraConnector example \u003cconnector_id\u003e\n```\n\n Import org level jira connector\n\n\n\n```sh\n $ pulumi import harness:platform/jiraConnector:JiraConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level jira connector\n\n\n\n```sh\n $ pulumi import harness:platform/jiraConnector:JiraConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "auth": {
                    "$ref": "#/types/harness:platform/JiraConnectorAuth:JiraConnectorAuth",
                    "description": "The credentials to use for the jira authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Jira server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "required": [
                "auth",
                "identifier",
                "name",
                "passwordRef",
                "url",
                "username",
                "usernameRef"
            ],
            "inputProperties": {
                "auth": {
                    "$ref": "#/types/harness:platform/JiraConnectorAuth:JiraConnectorAuth",
                    "description": "The credentials to use for the jira authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Jira server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "requiredInputs": [
                "auth",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering JiraConnector resources.\n",
                "properties": {
                    "auth": {
                        "$ref": "#/types/harness:platform/JiraConnectorAuth:JiraConnectorAuth",
                        "description": "The credentials to use for the jira authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Jira server.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use for authentication.\n"
                    },
                    "usernameRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/kubernetesConnector:KubernetesConnector": {
            "description": "Resource for creating a K8s connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst clientKeyCert = new harness.platform.KubernetesConnector(\"clientKeyCert\", {\n    clientKeyCert: {\n        caCertRef: \"account.TEST_k8ss_client_stuff\",\n        clientCertRef: \"account.test_k8s_client_cert\",\n        clientKeyAlgorithm: \"RSA\",\n        clientKeyPassphraseRef: \"account.TEST_k8s_client_test\",\n        clientKeyRef: \"account.TEST_k8s_client_key\",\n        masterUrl: \"https://kubernetes.example.com\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"description\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\nconst usernamePassword = new harness.platform.KubernetesConnector(\"usernamePassword\", {\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"description\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    usernamePassword: {\n        masterUrl: \"https://kubernetes.example.com\",\n        passwordRef: \"account.TEST_k8s_client_test\",\n        username: \"admin\",\n    },\n});\nconst serviceAccount = new harness.platform.KubernetesConnector(\"serviceAccount\", {\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"description\",\n    identifier: \"identifier\",\n    serviceAccount: {\n        masterUrl: \"https://kubernetes.example.com\",\n        serviceAccountTokenRef: \"account.TEST_k8s_client_test\",\n    },\n    tags: [\"foo:bar\"],\n});\nconst openIDConnect = new harness.platform.KubernetesConnector(\"openIDConnect\", {\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"description\",\n    identifier: \"%[1]s\",\n    openidConnect: {\n        clientIdRef: \"account.TEST_k8s_client_test\",\n        issuerUrl: \"https://oidc.example.com\",\n        masterUrl: \"https://kubernetes.example.com\",\n        passwordRef: \"account.TEST_k8s_client_test\",\n        scopes: [\n            \"scope1\",\n            \"scope2\",\n        ],\n        secretRef: \"account.TEST_k8s_client_test\",\n        usernameRef: \"account.TEST_k8s_client_test\",\n    },\n    tags: [\"foo:bar\"],\n});\nconst inheritFromDelegate = new harness.platform.KubernetesConnector(\"inheritFromDelegate\", {\n    description: \"description\",\n    identifier: \"identifier\",\n    inheritFromDelegate: {\n        delegateSelectors: [\"harness-delegate\"],\n    },\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nclient_key_cert = harness.platform.KubernetesConnector(\"clientKeyCert\",\n    client_key_cert=harness.platform.KubernetesConnectorClientKeyCertArgs(\n        ca_cert_ref=\"account.TEST_k8ss_client_stuff\",\n        client_cert_ref=\"account.test_k8s_client_cert\",\n        client_key_algorithm=\"RSA\",\n        client_key_passphrase_ref=\"account.TEST_k8s_client_test\",\n        client_key_ref=\"account.TEST_k8s_client_key\",\n        master_url=\"https://kubernetes.example.com\",\n    ),\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"description\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\nusername_password = harness.platform.KubernetesConnector(\"usernamePassword\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"description\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    username_password=harness.platform.KubernetesConnectorUsernamePasswordArgs(\n        master_url=\"https://kubernetes.example.com\",\n        password_ref=\"account.TEST_k8s_client_test\",\n        username=\"admin\",\n    ))\nservice_account = harness.platform.KubernetesConnector(\"serviceAccount\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"description\",\n    identifier=\"identifier\",\n    service_account=harness.platform.KubernetesConnectorServiceAccountArgs(\n        master_url=\"https://kubernetes.example.com\",\n        service_account_token_ref=\"account.TEST_k8s_client_test\",\n    ),\n    tags=[\"foo:bar\"])\nopen_id_connect = harness.platform.KubernetesConnector(\"openIDConnect\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"description\",\n    identifier=\"%[1]s\",\n    openid_connect=harness.platform.KubernetesConnectorOpenidConnectArgs(\n        client_id_ref=\"account.TEST_k8s_client_test\",\n        issuer_url=\"https://oidc.example.com\",\n        master_url=\"https://kubernetes.example.com\",\n        password_ref=\"account.TEST_k8s_client_test\",\n        scopes=[\n            \"scope1\",\n            \"scope2\",\n        ],\n        secret_ref=\"account.TEST_k8s_client_test\",\n        username_ref=\"account.TEST_k8s_client_test\",\n    ),\n    tags=[\"foo:bar\"])\ninherit_from_delegate = harness.platform.KubernetesConnector(\"inheritFromDelegate\",\n    description=\"description\",\n    identifier=\"identifier\",\n    inherit_from_delegate=harness.platform.KubernetesConnectorInheritFromDelegateArgs(\n        delegate_selectors=[\"harness-delegate\"],\n    ),\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clientKeyCert = new Harness.Platform.KubernetesConnector(\"clientKeyCert\", new()\n    {\n        ClientKeyCert = new Harness.Platform.Inputs.KubernetesConnectorClientKeyCertArgs\n        {\n            CaCertRef = \"account.TEST_k8ss_client_stuff\",\n            ClientCertRef = \"account.test_k8s_client_cert\",\n            ClientKeyAlgorithm = \"RSA\",\n            ClientKeyPassphraseRef = \"account.TEST_k8s_client_test\",\n            ClientKeyRef = \"account.TEST_k8s_client_key\",\n            MasterUrl = \"https://kubernetes.example.com\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"description\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var usernamePassword = new Harness.Platform.KubernetesConnector(\"usernamePassword\", new()\n    {\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"description\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        UsernamePassword = new Harness.Platform.Inputs.KubernetesConnectorUsernamePasswordArgs\n        {\n            MasterUrl = \"https://kubernetes.example.com\",\n            PasswordRef = \"account.TEST_k8s_client_test\",\n            Username = \"admin\",\n        },\n    });\n\n    var serviceAccount = new Harness.Platform.KubernetesConnector(\"serviceAccount\", new()\n    {\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"description\",\n        Identifier = \"identifier\",\n        ServiceAccount = new Harness.Platform.Inputs.KubernetesConnectorServiceAccountArgs\n        {\n            MasterUrl = \"https://kubernetes.example.com\",\n            ServiceAccountTokenRef = \"account.TEST_k8s_client_test\",\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var openIDConnect = new Harness.Platform.KubernetesConnector(\"openIDConnect\", new()\n    {\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"description\",\n        Identifier = \"%[1]s\",\n        OpenidConnect = new Harness.Platform.Inputs.KubernetesConnectorOpenidConnectArgs\n        {\n            ClientIdRef = \"account.TEST_k8s_client_test\",\n            IssuerUrl = \"https://oidc.example.com\",\n            MasterUrl = \"https://kubernetes.example.com\",\n            PasswordRef = \"account.TEST_k8s_client_test\",\n            Scopes = new[]\n            {\n                \"scope1\",\n                \"scope2\",\n            },\n            SecretRef = \"account.TEST_k8s_client_test\",\n            UsernameRef = \"account.TEST_k8s_client_test\",\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n    var inheritFromDelegate = new Harness.Platform.KubernetesConnector(\"inheritFromDelegate\", new()\n    {\n        Description = \"description\",\n        Identifier = \"identifier\",\n        InheritFromDelegate = new Harness.Platform.Inputs.KubernetesConnectorInheritFromDelegateArgs\n        {\n            DelegateSelectors = new[]\n            {\n                \"harness-delegate\",\n            },\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewKubernetesConnector(ctx, \"clientKeyCert\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tClientKeyCert: \u0026platform.KubernetesConnectorClientKeyCertArgs{\n\t\t\t\tCaCertRef:              pulumi.String(\"account.TEST_k8ss_client_stuff\"),\n\t\t\t\tClientCertRef:          pulumi.String(\"account.test_k8s_client_cert\"),\n\t\t\t\tClientKeyAlgorithm:     pulumi.String(\"RSA\"),\n\t\t\t\tClientKeyPassphraseRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tClientKeyRef:           pulumi.String(\"account.TEST_k8s_client_key\"),\n\t\t\t\tMasterUrl:              pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"usernamePassword\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUsernamePassword: \u0026platform.KubernetesConnectorUsernamePasswordArgs{\n\t\t\t\tMasterUrl:   pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t\tPasswordRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tUsername:    pulumi.String(\"admin\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"serviceAccount\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tServiceAccount: \u0026platform.KubernetesConnectorServiceAccountArgs{\n\t\t\t\tMasterUrl:              pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t\tServiceAccountTokenRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"openIDConnect\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tIdentifier:  pulumi.String(\"%[1]s\"),\n\t\t\tOpenidConnect: \u0026platform.KubernetesConnectorOpenidConnectArgs{\n\t\t\t\tClientIdRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tIssuerUrl:   pulumi.String(\"https://oidc.example.com\"),\n\t\t\t\tMasterUrl:   pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t\tPasswordRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"scope1\"),\n\t\t\t\t\tpulumi.String(\"scope2\"),\n\t\t\t\t},\n\t\t\t\tSecretRef:   pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tUsernameRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"inheritFromDelegate\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tInheritFromDelegate: \u0026platform.KubernetesConnectorInheritFromDelegateArgs{\n\t\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.KubernetesConnector;\nimport com.pulumi.harness.platform.KubernetesConnectorArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorClientKeyCertArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorUsernamePasswordArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorServiceAccountArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorOpenidConnectArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorInheritFromDelegateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var clientKeyCert = new KubernetesConnector(\"clientKeyCert\", KubernetesConnectorArgs.builder()        \n            .clientKeyCert(KubernetesConnectorClientKeyCertArgs.builder()\n                .caCertRef(\"account.TEST_k8ss_client_stuff\")\n                .clientCertRef(\"account.test_k8s_client_cert\")\n                .clientKeyAlgorithm(\"RSA\")\n                .clientKeyPassphraseRef(\"account.TEST_k8s_client_test\")\n                .clientKeyRef(\"account.TEST_k8s_client_key\")\n                .masterUrl(\"https://kubernetes.example.com\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"description\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n        var usernamePassword = new KubernetesConnector(\"usernamePassword\", KubernetesConnectorArgs.builder()        \n            .delegateSelectors(\"harness-delegate\")\n            .description(\"description\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .usernamePassword(KubernetesConnectorUsernamePasswordArgs.builder()\n                .masterUrl(\"https://kubernetes.example.com\")\n                .passwordRef(\"account.TEST_k8s_client_test\")\n                .username(\"admin\")\n                .build())\n            .build());\n\n        var serviceAccount = new KubernetesConnector(\"serviceAccount\", KubernetesConnectorArgs.builder()        \n            .delegateSelectors(\"harness-delegate\")\n            .description(\"description\")\n            .identifier(\"identifier\")\n            .serviceAccount(KubernetesConnectorServiceAccountArgs.builder()\n                .masterUrl(\"https://kubernetes.example.com\")\n                .serviceAccountTokenRef(\"account.TEST_k8s_client_test\")\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n        var openIDConnect = new KubernetesConnector(\"openIDConnect\", KubernetesConnectorArgs.builder()        \n            .delegateSelectors(\"harness-delegate\")\n            .description(\"description\")\n            .identifier(\"%[1]s\")\n            .openidConnect(KubernetesConnectorOpenidConnectArgs.builder()\n                .clientIdRef(\"account.TEST_k8s_client_test\")\n                .issuerUrl(\"https://oidc.example.com\")\n                .masterUrl(\"https://kubernetes.example.com\")\n                .passwordRef(\"account.TEST_k8s_client_test\")\n                .scopes(                \n                    \"scope1\",\n                    \"scope2\")\n                .secretRef(\"account.TEST_k8s_client_test\")\n                .usernameRef(\"account.TEST_k8s_client_test\")\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n        var inheritFromDelegate = new KubernetesConnector(\"inheritFromDelegate\", KubernetesConnectorArgs.builder()        \n            .description(\"description\")\n            .identifier(\"identifier\")\n            .inheritFromDelegate(KubernetesConnectorInheritFromDelegateArgs.builder()\n                .delegateSelectors(\"harness-delegate\")\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  clientKeyCert:\n    type: harness:platform:KubernetesConnector\n    properties:\n      clientKeyCert:\n        caCertRef: account.TEST_k8ss_client_stuff\n        clientCertRef: account.test_k8s_client_cert\n        clientKeyAlgorithm: RSA\n        clientKeyPassphraseRef: account.TEST_k8s_client_test\n        clientKeyRef: account.TEST_k8s_client_key\n        masterUrl: https://kubernetes.example.com\n      delegateSelectors:\n        - harness-delegate\n      description: description\n      identifier: identifier\n      tags:\n        - foo:bar\n  usernamePassword:\n    type: harness:platform:KubernetesConnector\n    properties:\n      delegateSelectors:\n        - harness-delegate\n      description: description\n      identifier: identifier\n      tags:\n        - foo:bar\n      usernamePassword:\n        masterUrl: https://kubernetes.example.com\n        passwordRef: account.TEST_k8s_client_test\n        username: admin\n  serviceAccount:\n    type: harness:platform:KubernetesConnector\n    properties:\n      delegateSelectors:\n        - harness-delegate\n      description: description\n      identifier: identifier\n      serviceAccount:\n        masterUrl: https://kubernetes.example.com\n        serviceAccountTokenRef: account.TEST_k8s_client_test\n      tags:\n        - foo:bar\n  openIDConnect:\n    type: harness:platform:KubernetesConnector\n    properties:\n      delegateSelectors:\n        - harness-delegate\n      description: description\n      identifier: '%[1]s'\n      openidConnect:\n        clientIdRef: account.TEST_k8s_client_test\n        issuerUrl: https://oidc.example.com\n        masterUrl: https://kubernetes.example.com\n        passwordRef: account.TEST_k8s_client_test\n        scopes:\n          - scope1\n          - scope2\n        secretRef: account.TEST_k8s_client_test\n        usernameRef: account.TEST_k8s_client_test\n      tags:\n        - foo:bar\n  inheritFromDelegate:\n    type: harness:platform:KubernetesConnector\n    properties:\n      description: description\n      identifier: identifier\n      inheritFromDelegate:\n        delegateSelectors:\n          - harness-delegate\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level kubernetes connector\n\n\n\n```sh\n $ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example \u003cconnector_id\u003e\n```\n\n Import org level kubernetes connector\n\n\n\n```sh\n $ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level kubernetes connector\n\n\n\n```sh\n $ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "clientKeyCert": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert",
                    "description": "Client key and certificate config for the connector.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate",
                    "description": "Credentials are inherited from the delegate.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "openidConnect": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect",
                    "description": "OpenID configuration for the connector.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceAccount": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount",
                    "description": "Service account for the connector.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword",
                    "description": "Username and password for the connector.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "clientKeyCert": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert",
                    "description": "Client key and certificate config for the connector.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate",
                    "description": "Credentials are inherited from the delegate.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "openidConnect": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect",
                    "description": "OpenID configuration for the connector.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceAccount": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount",
                    "description": "Service account for the connector.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword",
                    "description": "Username and password for the connector.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesConnector resources.\n",
                "properties": {
                    "clientKeyCert": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert",
                        "description": "Client key and certificate config for the connector.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Selectors to use for the delegate.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "inheritFromDelegate": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate",
                        "description": "Credentials are inherited from the delegate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "openidConnect": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect",
                        "description": "OpenID configuration for the connector.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceAccount": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount",
                        "description": "Service account for the connector.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "usernamePassword": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword",
                        "description": "Username and password for the connector.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/manualFreeze:ManualFreeze": {
            "description": "Resource for Manual Deployment Freeze Window.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.ManualFreeze(\"example\", {\n    accountId: \"accountIdentifier\",\n    identifier: \"identifier\",\n    orgId: \"orgIdentifier\",\n    projectId: \"projectIdentifier\",\n    yaml: `freeze:\n  name: freezeName\n  identifier: identifier\n  entityConfigs:\n    - name: r1\n      entities:\n        - filterType: All\n          type: Org\n        - filterType: All\n          type: Project\n        - filterType: All\n          type: Service\n        - filterType: All\n          type: EnvType\n  status: Disabled\n  description: hi\n  windows:\n  - timeZone: Asia/Calcutta\n    startTime: 2023-05-03 04:16 PM\n    duration: 30m\n    recurrence:\n      type: Daily\n  notificationRules: []\n  tags: {}\n\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.ManualFreeze(\"example\",\n    account_id=\"accountIdentifier\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifier\",\n    project_id=\"projectIdentifier\",\n    yaml=\"\"\"freeze:\n  name: freezeName\n  identifier: identifier\n  entityConfigs:\n    - name: r1\n      entities:\n        - filterType: All\n          type: Org\n        - filterType: All\n          type: Project\n        - filterType: All\n          type: Service\n        - filterType: All\n          type: EnvType\n  status: Disabled\n  description: hi\n  windows:\n  - timeZone: Asia/Calcutta\n    startTime: 2023-05-03 04:16 PM\n    duration: 30m\n    recurrence:\n      type: Daily\n  notificationRules: []\n  tags: {}\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.ManualFreeze(\"example\", new()\n    {\n        AccountId = \"accountIdentifier\",\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifier\",\n        ProjectId = \"projectIdentifier\",\n        Yaml = @\"freeze:\n  name: freezeName\n  identifier: identifier\n  entityConfigs:\n    - name: r1\n      entities:\n        - filterType: All\n          type: Org\n        - filterType: All\n          type: Project\n        - filterType: All\n          type: Service\n        - filterType: All\n          type: EnvType\n  status: Disabled\n  description: hi\n  windows:\n  - timeZone: Asia/Calcutta\n    startTime: 2023-05-03 04:16 PM\n    duration: 30m\n    recurrence:\n      type: Daily\n  notificationRules: []\n  tags: {}\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewManualFreeze(ctx, \"example\", \u0026platform.ManualFreezeArgs{\n\t\t\tAccountId:  pulumi.String(\"accountIdentifier\"),\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifier\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t\tYaml:       pulumi.String(\"freeze:\\n  name: freezeName\\n  identifier: identifier\\n  entityConfigs:\\n    - name: r1\\n      entities:\\n        - filterType: All\\n          type: Org\\n        - filterType: All\\n          type: Project\\n        - filterType: All\\n          type: Service\\n        - filterType: All\\n          type: EnvType\\n  status: Disabled\\n  description: hi\\n  windows:\\n  - timeZone: Asia/Calcutta\\n    startTime: 2023-05-03 04:16 PM\\n    duration: 30m\\n    recurrence:\\n      type: Daily\\n  notificationRules: []\\n  tags: {}\\n\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ManualFreeze;\nimport com.pulumi.harness.platform.ManualFreezeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ManualFreeze(\"example\", ManualFreezeArgs.builder()        \n            .accountId(\"accountIdentifier\")\n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifier\")\n            .projectId(\"projectIdentifier\")\n            .yaml(\"\"\"\nfreeze:\n  name: freezeName\n  identifier: identifier\n  entityConfigs:\n    - name: r1\n      entities:\n        - filterType: All\n          type: Org\n        - filterType: All\n          type: Project\n        - filterType: All\n          type: Service\n        - filterType: All\n          type: EnvType\n  status: Disabled\n  description: hi\n  windows:\n  - timeZone: Asia/Calcutta\n    startTime: 2023-05-03 04:16 PM\n    duration: 30m\n    recurrence:\n      type: Daily\n  notificationRules: []\n  tags: {}\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:ManualFreeze\n    properties:\n      accountId: accountIdentifier\n      identifier: identifier\n      orgId: orgIdentifier\n      projectId: projectIdentifier\n      yaml: |+\n        freeze:\n          name: freezeName\n          identifier: identifier\n          entityConfigs:\n            - name: r1\n              entities:\n                - filterType: All\n                  type: Org\n                - filterType: All\n                  type: Project\n                - filterType: All\n                  type: Service\n                - filterType: All\n                  type: EnvType\n          status: Disabled\n          description: hi\n          windows:\n          - timeZone: Asia/Calcutta\n            startTime: 2023-05-03 04:16 PM\n            duration: 30m\n            recurrence:\n              type: Daily\n          notificationRules: []\n          tags: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport an account level freeze\n\n```sh\n $ pulumi import harness:platform/manualFreeze:ManualFreeze example \u003cfreeze_id\u003e\n```\n\n Import an organization level freeze\n\n```sh\n $ pulumi import harness:platform/manualFreeze:ManualFreeze example \u003corg_id\u003e/\u003cfreeze_id\u003e\n```\n\n Import project level freeze\n\n```sh\n $ pulumi import harness:platform/manualFreeze:ManualFreeze example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cfreeze_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the freeze\n"
                },
                "currentOrUpcomingWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ManualFreezeCurrentOrUpcomingWindow:ManualFreezeCurrentOrUpcomingWindow"
                    },
                    "description": "Current or upcoming windows\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the freeze\n"
                },
                "freezeWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ManualFreezeFreezeWindow:ManualFreezeFreezeWindow"
                    },
                    "description": "Freeze windows in the freeze response\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the freeze\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the freeze\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the freeze\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the freeze\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope of the freeze\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the freeze\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the freeze\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of freeze\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Yaml of the freeze\n"
                }
            },
            "required": [
                "accountId",
                "currentOrUpcomingWindows",
                "description",
                "freezeWindows",
                "identifier",
                "name",
                "scope",
                "status",
                "tags",
                "type",
                "yaml"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the freeze\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the freeze\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the freeze\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the freeze\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Yaml of the freeze\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "identifier",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManualFreeze resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier of the freeze\n"
                    },
                    "currentOrUpcomingWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/ManualFreezeCurrentOrUpcomingWindow:ManualFreezeCurrentOrUpcomingWindow"
                        },
                        "description": "Current or upcoming windows\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the freeze\n"
                    },
                    "freezeWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/ManualFreezeFreezeWindow:ManualFreezeFreezeWindow"
                        },
                        "description": "Freeze windows in the freeze response\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the freeze\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the freeze\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the freeze\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the freeze\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope of the freeze\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the freeze\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with the freeze\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of freeze\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Yaml of the freeze\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/monitoredService:MonitoredService": {
            "description": "Resource for creating a monitored service.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.MonitoredService;\nimport com.pulumi.harness.platform.MonitoredServiceArgs;\nimport com.pulumi.harness.platform.inputs.MonitoredServiceRequestArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MonitoredService(\"example\", MonitoredServiceArgs.builder()        \n            .accountId(\"account_id\")\n            .orgId(\"default\")\n            .projectId(\"default_project\")\n            .identifier(\"Terraform\")\n            .request(MonitoredServiceRequestArgs.builder()\n                .name(\"name\")\n                .type(\"Application\")\n                .description(\"description\")\n                .serviceRef(\"service_ref\")\n                .environmentRef(\"environment_ref\")\n                .tags(                \n                    \"foo:bar\",\n                    \"bar:foo\")\n                .healthSources(MonitoredServiceRequestHealthSourceArgs.builder()\n                    .name(\"name\")\n                    .identifier(\"identifier\")\n                    .type(\"ElasticSearch\")\n                    .spec(serializeJson(\n                        jsonObject(\n                            jsonProperty(\"connectorRef\", \"connectorRef\"),\n                            jsonProperty(\"feature\", \"feature\"),\n                            jsonProperty(\"queries\", jsonArray(\n                                jsonObject(\n                                    jsonProperty(\"name\", \"name\"),\n                                    jsonProperty(\"query\", \"query\"),\n                                    jsonProperty(\"index\", \"index\"),\n                                    jsonProperty(\"serviceInstanceIdentifier\", \"serviceInstanceIdentifier\"),\n                                    jsonProperty(\"timeStampIdentifier\", \"timeStampIdentifier\"),\n                                    jsonProperty(\"timeStampFormat\", \"timeStampFormat\"),\n                                    jsonProperty(\"messageIdentifier\", \"messageIdentifier\")\n                                ), \n                                jsonObject(\n                                    jsonProperty(\"name\", \"name2\"),\n                                    jsonProperty(\"query\", \"query2\"),\n                                    jsonProperty(\"index\", \"index2\"),\n                                    jsonProperty(\"serviceInstanceIdentifier\", \"serviceInstanceIdentifier2\"),\n                                    jsonProperty(\"timeStampIdentifier\", \"timeStampIdentifier2\"),\n                                    jsonProperty(\"timeStampFormat\", \"timeStampFormat2\"),\n                                    jsonProperty(\"messageIdentifier\", \"messageIdentifier2\")\n                                )\n                            ))\n                        )))\n                    .build())\n                .changeSources(MonitoredServiceRequestChangeSourceArgs.builder()\n                    .name(\"csName1\")\n                    .identifier(\"harness_cd_next_gen\")\n                    .type(\"HarnessCDNextGen\")\n                    .enabled(true)\n                    .spec(serializeJson(\n                        jsonObject(\n\n                        )))\n                    .category(\"Deployment\")\n                    .build())\n                .notificationRuleRefs(                \n                    MonitoredServiceRequestNotificationRuleRefArgs.builder()\n                        .notificationRuleRef(\"notification_rule_ref\")\n                        .enabled(true)\n                        .build(),\n                    MonitoredServiceRequestNotificationRuleRefArgs.builder()\n                        .notificationRuleRef(\"notification_rule_ref1\")\n                        .enabled(false)\n                        .build())\n                .enabled(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:MonitoredService\n    properties:\n      accountId: account_id\n      orgId: default\n      projectId: default_project\n      identifier: Terraform\n      request:\n        name: name\n        type: Application\n        description: description\n        serviceRef: service_ref\n        environmentRef: environment_ref\n        tags:\n          - foo:bar\n          - bar:foo\n        healthSources:\n          - name: name\n            identifier: identifier\n            type: ElasticSearch\n            spec:\n              fn::toJSON:\n                connectorRef: connectorRef\n                feature: feature\n                queries:\n                  - name: name\n                    query: query\n                    index: index\n                    serviceInstanceIdentifier: serviceInstanceIdentifier\n                    timeStampIdentifier: timeStampIdentifier\n                    timeStampFormat: timeStampFormat\n                    messageIdentifier: messageIdentifier\n                  - name: name2\n                    query: query2\n                    index: index2\n                    serviceInstanceIdentifier: serviceInstanceIdentifier2\n                    timeStampIdentifier: timeStampIdentifier2\n                    timeStampFormat: timeStampFormat2\n                    messageIdentifier: messageIdentifier2\n        changeSources:\n          - name: csName1\n            identifier: harness_cd_next_gen\n            type: HarnessCDNextGen\n            enabled: true\n            spec:\n              fn::toJSON: {}\n            category: Deployment\n        notificationRuleRefs:\n          - notificationRuleRef: notification_rule_ref\n            enabled: true\n          - notificationRuleRef: notification_rule_ref1\n            enabled: false\n        enabled: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level monitored_service\n\n```sh\n $ pulumi import harness:platform/monitoredService:MonitoredService example \u003cmonitored_service_id\u003e\n```\n\n Import organization level monitored_service\n\n```sh\n $ pulumi import harness:platform/monitoredService:MonitoredService example \u003corg_id\u003e/\u003cmonitored_service_id\u003e\n```\n\n Import project level monitored_service\n\n```sh\n $ pulumi import harness:platform/monitoredService:MonitoredService example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cmonitored_service_id\u003e\n```\n\n ",
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the monitored service.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Identifier of the organization in which the monitored service is configured.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Identifier of the project in which the monitored service is configured.\n"
                },
                "request": {
                    "$ref": "#/types/harness:platform/MonitoredServiceRequest:MonitoredServiceRequest",
                    "description": "Request for creating or updating a monitored service.\n"
                }
            },
            "required": [
                "identifier",
                "orgId",
                "projectId"
            ],
            "inputProperties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the monitored service.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Identifier of the organization in which the monitored service is configured.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Identifier of the project in which the monitored service is configured.\n"
                },
                "request": {
                    "$ref": "#/types/harness:platform/MonitoredServiceRequest:MonitoredServiceRequest",
                    "description": "Request for creating or updating a monitored service.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredService resources.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the monitored service.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Identifier of the organization in which the monitored service is configured.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier of the project in which the monitored service is configured.\n"
                    },
                    "request": {
                        "$ref": "#/types/harness:platform/MonitoredServiceRequest:MonitoredServiceRequest",
                        "description": "Request for creating or updating a monitored service.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/newrelicConnector:NewrelicConnector": {
            "description": "Resource for creating a New Relic connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.NewrelicConnector(\"test\", {\n    accountId: \"nr_account_id\",\n    apiKeyRef: \"account.secret_id\",\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://newrelic.com/\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.NewrelicConnector(\"test\",\n    account_id=\"nr_account_id\",\n    api_key_ref=\"account.secret_id\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://newrelic.com/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.NewrelicConnector(\"test\", new()\n    {\n        AccountId = \"nr_account_id\",\n        ApiKeyRef = \"account.secret_id\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://newrelic.com/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewNewrelicConnector(ctx, \"test\", \u0026platform.NewrelicConnectorArgs{\n\t\t\tAccountId: pulumi.String(\"nr_account_id\"),\n\t\t\tApiKeyRef: pulumi.String(\"account.secret_id\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://newrelic.com/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.NewrelicConnector;\nimport com.pulumi.harness.platform.NewrelicConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new NewrelicConnector(\"test\", NewrelicConnectorArgs.builder()        \n            .accountId(\"nr_account_id\")\n            .apiKeyRef(\"account.secret_id\")\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://newrelic.com/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:NewrelicConnector\n    properties:\n      accountId: nr_account_id\n      apiKeyRef: account.secret_id\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://newrelic.com/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level newrelic connector\n\n\n\n```sh\n $ pulumi import harness:platform/newrelicConnector:NewrelicConnector example \u003cconnector_id\u003e\n```\n\n Import org level newrelic connector\n\n\n\n```sh\n $ pulumi import harness:platform/newrelicConnector:NewrelicConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level newrelic connector\n\n\n\n```sh\n $ pulumi import harness:platform/newrelicConnector:NewrelicConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account ID of the NewRelic account.\n"
                },
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the NewRelic server.\n"
                }
            },
            "required": [
                "accountId",
                "apiKeyRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account ID of the NewRelic account.\n"
                },
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the NewRelic server.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "apiKeyRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NewrelicConnector resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account ID of the NewRelic account.\n"
                    },
                    "apiKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the NewRelic server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/nexusConnector:NexusConnector": {
            "description": "Resource for creating a Nexus connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Credentials anonymous\nconst test = new harness.platform.NexusConnector(\"test\", {\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://nexus.example.com\",\n    version: \"version\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Credentials anonymous\ntest = harness.platform.NexusConnector(\"test\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://nexus.example.com\",\n    version=\"version\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Credentials anonymous\n    var test = new Harness.Platform.NexusConnector(\"test\", new()\n    {\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://nexus.example.com\",\n        Version = \"version\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewNexusConnector(ctx, \"test\", \u0026platform.NexusConnectorArgs{\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl:     pulumi.String(\"https://nexus.example.com\"),\n\t\t\tVersion: pulumi.String(\"version\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.NexusConnector;\nimport com.pulumi.harness.platform.NexusConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new NexusConnector(\"test\", NexusConnectorArgs.builder()        \n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://nexus.example.com\")\n            .version(\"version\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Credentials anonymous\n  test:\n    type: harness:platform:NexusConnector\n    properties:\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://nexus.example.com\n      version: version\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level nexus connector\n\n\n\n```sh\n $ pulumi import harness:platform/nexusConnector:NexusConnector example \u003cconnector_id\u003e\n```\n\n Import org level nexus connector\n\n\n\n```sh\n $ pulumi import harness:platform/nexusConnector:NexusConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level nexus connector\n\n\n\n```sh\n $ pulumi import harness:platform/nexusConnector:NexusConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/NexusConnectorCredentials:NexusConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Nexus server.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url",
                "version"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/NexusConnectorCredentials:NexusConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Nexus server.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NexusConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/NexusConnectorCredentials:NexusConnectorCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Nexus server.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/organization:Organization": {
            "description": "Resource for creating a Harness organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst _this = new harness.platform.Organization(\"this\", {\n    description: \"An example organization\",\n    identifier: \"MyOrg\",\n    tags: [\n        \"foo:bar\",\n        \"baz:qux\",\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nthis = harness.platform.Organization(\"this\",\n    description=\"An example organization\",\n    identifier=\"MyOrg\",\n    tags=[\n        \"foo:bar\",\n        \"baz:qux\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Harness.Platform.Organization(\"this\", new()\n    {\n        Description = \"An example organization\",\n        Identifier = \"MyOrg\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n            \"baz:qux\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewOrganization(ctx, \"this\", \u0026platform.OrganizationArgs{\n\t\t\tDescription: pulumi.String(\"An example organization\"),\n\t\t\tIdentifier:  pulumi.String(\"MyOrg\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\tpulumi.String(\"baz:qux\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Organization;\nimport com.pulumi.harness.platform.OrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Organization(\"this\", OrganizationArgs.builder()        \n            .description(\"An example organization\")\n            .identifier(\"MyOrg\")\n            .tags(            \n                \"foo:bar\",\n                \"baz:qux\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: harness:platform:Organization\n    properties:\n      description: An example organization\n      identifier: MyOrg\n      tags:\n        - foo:bar\n        - baz:qux\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using organization id\n\n```sh\n $ pulumi import harness:platform/organization:Organization example \u003corganization_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/pagerdutyConnector:PagerdutyConnector": {
            "description": "Resource for creating a PagerDuty connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.PagerdutyConnector(\"test\", {\n    apiTokenRef: \"account.secret_id\",\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.PagerdutyConnector(\"test\",\n    api_token_ref=\"account.secret_id\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.PagerdutyConnector(\"test\", new()\n    {\n        ApiTokenRef = \"account.secret_id\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewPagerdutyConnector(ctx, \"test\", \u0026platform.PagerdutyConnectorArgs{\n\t\t\tApiTokenRef: pulumi.String(\"account.secret_id\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PagerdutyConnector;\nimport com.pulumi.harness.platform.PagerdutyConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PagerdutyConnector(\"test\", PagerdutyConnectorArgs.builder()        \n            .apiTokenRef(\"account.secret_id\")\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:PagerdutyConnector\n    properties:\n      apiTokenRef: account.secret_id\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level pagerduty connector\n\n\n\n```sh\n $ pulumi import harness:platform/pagerdutyConnector:PagerdutyConnector example \u003cconnector_id\u003e\n```\n\n Import org level pagerduty connector\n\n\n\n```sh\n $ pulumi import harness:platform/pagerdutyConnector:PagerdutyConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level pagerduty connector\n\n\n\n```sh\n $ pulumi import harness:platform/pagerdutyConnector:PagerdutyConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "apiTokenRef",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "apiTokenRef",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PagerdutyConnector resources.\n",
                "properties": {
                    "apiTokenRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/pipeline:Pipeline": {
            "description": "Resource for creating a Harness pipeline.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.Pipeline(\"example\", {\n    gitDetails: {\n        branchName: \"branchName\",\n        commitMessage: \"commitMessage\",\n        connectorRef: \"connectorRef\",\n        filePath: \"filePath\",\n        repoName: \"repoName\",\n        storeType: \"REMOTE\",\n    },\n    identifier: \"identifier\",\n    orgId: \"orgIdentifier\",\n    projectId: \"projectIdentifier\",\n    yaml: `    pipeline:\n        name: name\n        identifier: identifier\n        allowStageExecutions: false\n        projectIdentifier: projectIdentifier\n        orgIdentifier: orgIdentifier\n        tags: {}\n        stages:\n            - stage:\n                name: dep\n                identifier: dep\n                description: \"\"\n                type: Deployment\n                spec:\n                    serviceConfig:\n                        serviceRef: service\n                        serviceDefinition:\n                            type: Kubernetes\n                            spec:\n                                variables: []\n                    infrastructure:\n                        environmentRef: testenv\n                        infrastructureDefinition:\n                            type: KubernetesDirect\n                            spec:\n                                connectorRef: testconf\n                                namespace: test\n                                releaseName: release-\u003c+INFRA_KEY\u003e\n                        allowSimultaneousDeployments: false\n                    execution:\n                        steps:\n                            - stepGroup:\n                                    name: Canary Deployment\n                                    identifier: canaryDepoyment\n                                    steps:\n                                        - step:\n                                            name: Canary Deployment\n                                            identifier: canaryDeployment\n                                            type: K8sCanaryDeploy\n                                            timeout: 10m\n                                            spec:\n                                                instanceSelection:\n                                                    type: Count\n                                                    spec:\n                                                        count: 1\n                                                skipDryRun: false\n                                        - step:\n                                            name: Canary Delete\n                                            identifier: canaryDelete\n                                            type: K8sCanaryDelete\n                                            timeout: 10m\n                                            spec: {}\n                                    rollbackSteps:\n                                        - step:\n                                            name: Canary Delete\n                                            identifier: rollbackCanaryDelete\n                                            type: K8sCanaryDelete\n                                            timeout: 10m\n                                            spec: {}\n                            - stepGroup:\n                                    name: Primary Deployment\n                                    identifier: primaryDepoyment\n                                    steps:\n                                        - step:\n                                            name: Rolling Deployment\n                                            identifier: rollingDeployment\n                                            type: K8sRollingDeploy\n                                            timeout: 10m\n                                            spec:\n                                                skipDryRun: false\n                                    rollbackSteps:\n                                        - step:\n                                            name: Rolling Rollback\n                                            identifier: rollingRollback\n                                            type: K8sRollingRollback\n                                            timeout: 10m\n                                            spec: {}\n                        rollbackSteps: []\n                tags: {}\n                failureStrategies:\n                    - onFailure:\n                            errors:\n                                - AllErrors\n                            action:\n                                type: StageRollback\n\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.Pipeline(\"example\",\n    git_details=harness.platform.PipelineGitDetailsArgs(\n        branch_name=\"branchName\",\n        commit_message=\"commitMessage\",\n        connector_ref=\"connectorRef\",\n        file_path=\"filePath\",\n        repo_name=\"repoName\",\n        store_type=\"REMOTE\",\n    ),\n    identifier=\"identifier\",\n    org_id=\"orgIdentifier\",\n    project_id=\"projectIdentifier\",\n    yaml=\"\"\"    pipeline:\n        name: name\n        identifier: identifier\n        allowStageExecutions: false\n        projectIdentifier: projectIdentifier\n        orgIdentifier: orgIdentifier\n        tags: {}\n        stages:\n            - stage:\n                name: dep\n                identifier: dep\n                description: \"\"\n                type: Deployment\n                spec:\n                    serviceConfig:\n                        serviceRef: service\n                        serviceDefinition:\n                            type: Kubernetes\n                            spec:\n                                variables: []\n                    infrastructure:\n                        environmentRef: testenv\n                        infrastructureDefinition:\n                            type: KubernetesDirect\n                            spec:\n                                connectorRef: testconf\n                                namespace: test\n                                releaseName: release-\u003c+INFRA_KEY\u003e\n                        allowSimultaneousDeployments: false\n                    execution:\n                        steps:\n                            - stepGroup:\n                                    name: Canary Deployment\n                                    identifier: canaryDepoyment\n                                    steps:\n                                        - step:\n                                            name: Canary Deployment\n                                            identifier: canaryDeployment\n                                            type: K8sCanaryDeploy\n                                            timeout: 10m\n                                            spec:\n                                                instanceSelection:\n                                                    type: Count\n                                                    spec:\n                                                        count: 1\n                                                skipDryRun: false\n                                        - step:\n                                            name: Canary Delete\n                                            identifier: canaryDelete\n                                            type: K8sCanaryDelete\n                                            timeout: 10m\n                                            spec: {}\n                                    rollbackSteps:\n                                        - step:\n                                            name: Canary Delete\n                                            identifier: rollbackCanaryDelete\n                                            type: K8sCanaryDelete\n                                            timeout: 10m\n                                            spec: {}\n                            - stepGroup:\n                                    name: Primary Deployment\n                                    identifier: primaryDepoyment\n                                    steps:\n                                        - step:\n                                            name: Rolling Deployment\n                                            identifier: rollingDeployment\n                                            type: K8sRollingDeploy\n                                            timeout: 10m\n                                            spec:\n                                                skipDryRun: false\n                                    rollbackSteps:\n                                        - step:\n                                            name: Rolling Rollback\n                                            identifier: rollingRollback\n                                            type: K8sRollingRollback\n                                            timeout: 10m\n                                            spec: {}\n                        rollbackSteps: []\n                tags: {}\n                failureStrategies:\n                    - onFailure:\n                            errors:\n                                - AllErrors\n                            action:\n                                type: StageRollback\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Pipeline(\"example\", new()\n    {\n        GitDetails = new Harness.Platform.Inputs.PipelineGitDetailsArgs\n        {\n            BranchName = \"branchName\",\n            CommitMessage = \"commitMessage\",\n            ConnectorRef = \"connectorRef\",\n            FilePath = \"filePath\",\n            RepoName = \"repoName\",\n            StoreType = \"REMOTE\",\n        },\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifier\",\n        ProjectId = \"projectIdentifier\",\n        Yaml = @\"    pipeline:\n        name: name\n        identifier: identifier\n        allowStageExecutions: false\n        projectIdentifier: projectIdentifier\n        orgIdentifier: orgIdentifier\n        tags: {}\n        stages:\n            - stage:\n                name: dep\n                identifier: dep\n                description: \"\"\"\"\n                type: Deployment\n                spec:\n                    serviceConfig:\n                        serviceRef: service\n                        serviceDefinition:\n                            type: Kubernetes\n                            spec:\n                                variables: []\n                    infrastructure:\n                        environmentRef: testenv\n                        infrastructureDefinition:\n                            type: KubernetesDirect\n                            spec:\n                                connectorRef: testconf\n                                namespace: test\n                                releaseName: release-\u003c+INFRA_KEY\u003e\n                        allowSimultaneousDeployments: false\n                    execution:\n                        steps:\n                            - stepGroup:\n                                    name: Canary Deployment\n                                    identifier: canaryDepoyment\n                                    steps:\n                                        - step:\n                                            name: Canary Deployment\n                                            identifier: canaryDeployment\n                                            type: K8sCanaryDeploy\n                                            timeout: 10m\n                                            spec:\n                                                instanceSelection:\n                                                    type: Count\n                                                    spec:\n                                                        count: 1\n                                                skipDryRun: false\n                                        - step:\n                                            name: Canary Delete\n                                            identifier: canaryDelete\n                                            type: K8sCanaryDelete\n                                            timeout: 10m\n                                            spec: {}\n                                    rollbackSteps:\n                                        - step:\n                                            name: Canary Delete\n                                            identifier: rollbackCanaryDelete\n                                            type: K8sCanaryDelete\n                                            timeout: 10m\n                                            spec: {}\n                            - stepGroup:\n                                    name: Primary Deployment\n                                    identifier: primaryDepoyment\n                                    steps:\n                                        - step:\n                                            name: Rolling Deployment\n                                            identifier: rollingDeployment\n                                            type: K8sRollingDeploy\n                                            timeout: 10m\n                                            spec:\n                                                skipDryRun: false\n                                    rollbackSteps:\n                                        - step:\n                                            name: Rolling Rollback\n                                            identifier: rollingRollback\n                                            type: K8sRollingRollback\n                                            timeout: 10m\n                                            spec: {}\n                        rollbackSteps: []\n                tags: {}\n                failureStrategies:\n                    - onFailure:\n                            errors:\n                                - AllErrors\n                            action:\n                                type: StageRollback\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewPipeline(ctx, \"example\", \u0026platform.PipelineArgs{\n\t\t\tGitDetails: \u0026platform.PipelineGitDetailsArgs{\n\t\t\t\tBranchName:    pulumi.String(\"branchName\"),\n\t\t\t\tCommitMessage: pulumi.String(\"commitMessage\"),\n\t\t\t\tConnectorRef:  pulumi.String(\"connectorRef\"),\n\t\t\t\tFilePath:      pulumi.String(\"filePath\"),\n\t\t\t\tRepoName:      pulumi.String(\"repoName\"),\n\t\t\t\tStoreType:     pulumi.String(\"REMOTE\"),\n\t\t\t},\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifier\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t\tYaml:       pulumi.String(\"    pipeline:\\n        name: name\\n        identifier: identifier\\n        allowStageExecutions: false\\n        projectIdentifier: projectIdentifier\\n        orgIdentifier: orgIdentifier\\n        tags: {}\\n        stages:\\n            - stage:\\n                name: dep\\n                identifier: dep\\n                description: \\\"\\\"\\n                type: Deployment\\n                spec:\\n                    serviceConfig:\\n                        serviceRef: service\\n                        serviceDefinition:\\n                            type: Kubernetes\\n                            spec:\\n                                variables: []\\n                    infrastructure:\\n                        environmentRef: testenv\\n                        infrastructureDefinition:\\n                            type: KubernetesDirect\\n                            spec:\\n                                connectorRef: testconf\\n                                namespace: test\\n                                releaseName: release-\u003c+INFRA_KEY\u003e\\n                        allowSimultaneousDeployments: false\\n                    execution:\\n                        steps:\\n                            - stepGroup:\\n                                    name: Canary Deployment\\n                                    identifier: canaryDepoyment\\n                                    steps:\\n                                        - step:\\n                                            name: Canary Deployment\\n                                            identifier: canaryDeployment\\n                                            type: K8sCanaryDeploy\\n                                            timeout: 10m\\n                                            spec:\\n                                                instanceSelection:\\n                                                    type: Count\\n                                                    spec:\\n                                                        count: 1\\n                                                skipDryRun: false\\n                                        - step:\\n                                            name: Canary Delete\\n                                            identifier: canaryDelete\\n                                            type: K8sCanaryDelete\\n                                            timeout: 10m\\n                                            spec: {}\\n                                    rollbackSteps:\\n                                        - step:\\n                                            name: Canary Delete\\n                                            identifier: rollbackCanaryDelete\\n                                            type: K8sCanaryDelete\\n                                            timeout: 10m\\n                                            spec: {}\\n                            - stepGroup:\\n                                    name: Primary Deployment\\n                                    identifier: primaryDepoyment\\n                                    steps:\\n                                        - step:\\n                                            name: Rolling Deployment\\n                                            identifier: rollingDeployment\\n                                            type: K8sRollingDeploy\\n                                            timeout: 10m\\n                                            spec:\\n                                                skipDryRun: false\\n                                    rollbackSteps:\\n                                        - step:\\n                                            name: Rolling Rollback\\n                                            identifier: rollingRollback\\n                                            type: K8sRollingRollback\\n                                            timeout: 10m\\n                                            spec: {}\\n                        rollbackSteps: []\\n                tags: {}\\n                failureStrategies:\\n                    - onFailure:\\n                            errors:\\n                                - AllErrors\\n                            action:\\n                                type: StageRollback\\n\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Pipeline;\nimport com.pulumi.harness.platform.PipelineArgs;\nimport com.pulumi.harness.platform.inputs.PipelineGitDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Pipeline(\"example\", PipelineArgs.builder()        \n            .gitDetails(PipelineGitDetailsArgs.builder()\n                .branchName(\"branchName\")\n                .commitMessage(\"commitMessage\")\n                .connectorRef(\"connectorRef\")\n                .filePath(\"filePath\")\n                .repoName(\"repoName\")\n                .storeType(\"REMOTE\")\n                .build())\n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifier\")\n            .projectId(\"projectIdentifier\")\n            .yaml(\"\"\"\n    pipeline:\n        name: name\n        identifier: identifier\n        allowStageExecutions: false\n        projectIdentifier: projectIdentifier\n        orgIdentifier: orgIdentifier\n        tags: {}\n        stages:\n            - stage:\n                name: dep\n                identifier: dep\n                description: \"\"\n                type: Deployment\n                spec:\n                    serviceConfig:\n                        serviceRef: service\n                        serviceDefinition:\n                            type: Kubernetes\n                            spec:\n                                variables: []\n                    infrastructure:\n                        environmentRef: testenv\n                        infrastructureDefinition:\n                            type: KubernetesDirect\n                            spec:\n                                connectorRef: testconf\n                                namespace: test\n                                releaseName: release-\u003c+INFRA_KEY\u003e\n                        allowSimultaneousDeployments: false\n                    execution:\n                        steps:\n                            - stepGroup:\n                                    name: Canary Deployment\n                                    identifier: canaryDepoyment\n                                    steps:\n                                        - step:\n                                            name: Canary Deployment\n                                            identifier: canaryDeployment\n                                            type: K8sCanaryDeploy\n                                            timeout: 10m\n                                            spec:\n                                                instanceSelection:\n                                                    type: Count\n                                                    spec:\n                                                        count: 1\n                                                skipDryRun: false\n                                        - step:\n                                            name: Canary Delete\n                                            identifier: canaryDelete\n                                            type: K8sCanaryDelete\n                                            timeout: 10m\n                                            spec: {}\n                                    rollbackSteps:\n                                        - step:\n                                            name: Canary Delete\n                                            identifier: rollbackCanaryDelete\n                                            type: K8sCanaryDelete\n                                            timeout: 10m\n                                            spec: {}\n                            - stepGroup:\n                                    name: Primary Deployment\n                                    identifier: primaryDepoyment\n                                    steps:\n                                        - step:\n                                            name: Rolling Deployment\n                                            identifier: rollingDeployment\n                                            type: K8sRollingDeploy\n                                            timeout: 10m\n                                            spec:\n                                                skipDryRun: false\n                                    rollbackSteps:\n                                        - step:\n                                            name: Rolling Rollback\n                                            identifier: rollingRollback\n                                            type: K8sRollingRollback\n                                            timeout: 10m\n                                            spec: {}\n                        rollbackSteps: []\n                tags: {}\n                failureStrategies:\n                    - onFailure:\n                            errors:\n                                - AllErrors\n                            action:\n                                type: StageRollback\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Pipeline\n    properties:\n      gitDetails:\n        branchName: branchName\n        commitMessage: commitMessage\n        connectorRef: connectorRef\n        filePath: filePath\n        repoName: repoName\n        storeType: REMOTE\n      identifier: identifier\n      orgId: orgIdentifier\n      projectId: projectIdentifier\n      yaml: |2+\n            pipeline:\n                name: name\n                identifier: identifier\n                allowStageExecutions: false\n                projectIdentifier: projectIdentifier\n                orgIdentifier: orgIdentifier\n                tags: {}\n                stages:\n                    - stage:\n                        name: dep\n                        identifier: dep\n                        description: \"\"\n                        type: Deployment\n                        spec:\n                            serviceConfig:\n                                serviceRef: service\n                                serviceDefinition:\n                                    type: Kubernetes\n                                    spec:\n                                        variables: []\n                            infrastructure:\n                                environmentRef: testenv\n                                infrastructureDefinition:\n                                    type: KubernetesDirect\n                                    spec:\n                                        connectorRef: testconf\n                                        namespace: test\n                                        releaseName: release-\u003c+INFRA_KEY\u003e\n                                allowSimultaneousDeployments: false\n                            execution:\n                                steps:\n                                    - stepGroup:\n                                            name: Canary Deployment\n                                            identifier: canaryDepoyment\n                                            steps:\n                                                - step:\n                                                    name: Canary Deployment\n                                                    identifier: canaryDeployment\n                                                    type: K8sCanaryDeploy\n                                                    timeout: 10m\n                                                    spec:\n                                                        instanceSelection:\n                                                            type: Count\n                                                            spec:\n                                                                count: 1\n                                                        skipDryRun: false\n                                                - step:\n                                                    name: Canary Delete\n                                                    identifier: canaryDelete\n                                                    type: K8sCanaryDelete\n                                                    timeout: 10m\n                                                    spec: {}\n                                            rollbackSteps:\n                                                - step:\n                                                    name: Canary Delete\n                                                    identifier: rollbackCanaryDelete\n                                                    type: K8sCanaryDelete\n                                                    timeout: 10m\n                                                    spec: {}\n                                    - stepGroup:\n                                            name: Primary Deployment\n                                            identifier: primaryDepoyment\n                                            steps:\n                                                - step:\n                                                    name: Rolling Deployment\n                                                    identifier: rollingDeployment\n                                                    type: K8sRollingDeploy\n                                                    timeout: 10m\n                                                    spec:\n                                                        skipDryRun: false\n                                            rollbackSteps:\n                                                - step:\n                                                    name: Rolling Rollback\n                                                    identifier: rollingRollback\n                                                    type: K8sRollingRollback\n                                                    timeout: 10m\n                                                    spec: {}\n                                rollbackSteps: []\n                        tags: {}\n                        failureStrategies:\n                            - onFailure:\n                                    errors:\n                                        - AllErrors\n                                    action:\n                                        type: StageRollback\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport pipeline\n\n```sh\n $ pulumi import harness:platform/pipeline:Pipeline example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cpipeline_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/PipelineGitDetails:PipelineGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "templateApplied": {
                    "type": "boolean",
                    "description": "If true, returns Pipeline YAML with Templates applied on it.\n"
                },
                "templateAppliedPipelineYaml": {
                    "type": "string",
                    "description": "Pipeline YAML after resolving Templates (returned as a String).\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "orgId",
                "projectId",
                "yaml"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/PipelineGitDetails:PipelineGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "templateApplied": {
                    "type": "boolean",
                    "description": "If true, returns Pipeline YAML with Templates applied on it.\n"
                },
                "templateAppliedPipelineYaml": {
                    "type": "string",
                    "description": "Pipeline YAML after resolving Templates (returned as a String).\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pipeline resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/PipelineGitDetails:PipelineGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "templateApplied": {
                        "type": "boolean",
                        "description": "If true, returns Pipeline YAML with Templates applied on it.\n"
                    },
                    "templateAppliedPipelineYaml": {
                        "type": "string",
                        "description": "Pipeline YAML after resolving Templates (returned as a String).\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/pipelineFilters:PipelineFilters": {
            "description": "Resource for creating Harness Pipeline Filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.PipelineFilters(\"test\", {\n    filterProperties: {\n        filterType: \"PipelineExecution\",\n        tags: [\"foo:bar\"],\n    },\n    filterVisibility: \"EveryOne\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"PipelineExecution\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.PipelineFilters(\"test\",\n    filter_properties=harness.platform.PipelineFiltersFilterPropertiesArgs(\n        filter_type=\"PipelineExecution\",\n        tags=[\"foo:bar\"],\n    ),\n    filter_visibility=\"EveryOne\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"PipelineExecution\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.PipelineFilters(\"test\", new()\n    {\n        FilterProperties = new Harness.Platform.Inputs.PipelineFiltersFilterPropertiesArgs\n        {\n            FilterType = \"PipelineExecution\",\n            Tags = new[]\n            {\n                \"foo:bar\",\n            },\n        },\n        FilterVisibility = \"EveryOne\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"PipelineExecution\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewPipelineFilters(ctx, \"test\", \u0026platform.PipelineFiltersArgs{\n\t\t\tFilterProperties: \u0026platform.PipelineFiltersFilterPropertiesArgs{\n\t\t\t\tFilterType: pulumi.String(\"PipelineExecution\"),\n\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilterVisibility: pulumi.String(\"EveryOne\"),\n\t\t\tIdentifier:       pulumi.String(\"identifier\"),\n\t\t\tOrgId:            pulumi.String(\"org_id\"),\n\t\t\tProjectId:        pulumi.String(\"project_id\"),\n\t\t\tType:             pulumi.String(\"PipelineExecution\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PipelineFilters;\nimport com.pulumi.harness.platform.PipelineFiltersArgs;\nimport com.pulumi.harness.platform.inputs.PipelineFiltersFilterPropertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PipelineFilters(\"test\", PipelineFiltersArgs.builder()        \n            .filterProperties(PipelineFiltersFilterPropertiesArgs.builder()\n                .filterType(\"PipelineExecution\")\n                .tags(\"foo:bar\")\n                .build())\n            .filterVisibility(\"EveryOne\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"PipelineExecution\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:PipelineFilters\n    properties:\n      filterProperties:\n        filterType: PipelineExecution\n        tags:\n          - foo:bar\n      filterVisibility: EveryOne\n      identifier: identifier\n      orgId: org_id\n      projectId: project_id\n      type: PipelineExecution\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level pipeline filter\n\n```sh\n $ pulumi import harness:platform/pipelineFilters:PipelineFilters example \u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n Import org level pipeline filter\n\n```sh\n $ pulumi import harness:platform/pipelineFilters:PipelineFilters example \u003cord_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n Import project level pipeline filter\n\n```sh\n $ pulumi import harness:platform/pipelineFilters:PipelineFilters example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n ",
            "properties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/PipelineFiltersFilterProperties:PipelineFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the pipeline filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of pipeline filters. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}\n"
                }
            },
            "required": [
                "filterProperties",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/PipelineFiltersFilterProperties:PipelineFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the pipeline filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of pipeline filters. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}\n"
                }
            },
            "requiredInputs": [
                "filterProperties",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineFilters resources.\n",
                "properties": {
                    "filterProperties": {
                        "$ref": "#/types/harness:platform/PipelineFiltersFilterProperties:PipelineFiltersFilterProperties",
                        "description": "Properties of the filters entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the pipeline filters.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of pipeline filters. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/policy:Policy": {
            "description": "Resource for creating a Harness Policy.\n\n\n## Import\n\nImport using the organization id\n\n```sh\n $ pulumi import harness:platform/policy:Policy example \u003corganization_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "rego": {
                    "type": "string",
                    "description": "Rego code for the policy.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "rego"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "rego": {
                    "type": "string",
                    "description": "Rego code for the policy.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "rego"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "rego": {
                        "type": "string",
                        "description": "Rego code for the policy.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/policyset:Policyset": {
            "description": "Resource for creating a Harness Policyset.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.Policyset(\"test\", {\n    action: \"onrun\",\n    enabled: true,\n    identifier: \"harness_platform_policyset.test.identifier\",\n    policies: [{\n        identifier: \"always_run\",\n        severity: \"warning\",\n    }],\n    type: \"pipeline\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.Policyset(\"test\",\n    action=\"onrun\",\n    enabled=True,\n    identifier=\"harness_platform_policyset.test.identifier\",\n    policies=[harness.platform.PolicysetPolicyArgs(\n        identifier=\"always_run\",\n        severity=\"warning\",\n    )],\n    type=\"pipeline\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.Policyset(\"test\", new()\n    {\n        Action = \"onrun\",\n        Enabled = true,\n        Identifier = \"harness_platform_policyset.test.identifier\",\n        Policies = new[]\n        {\n            new Harness.Platform.Inputs.PolicysetPolicyArgs\n            {\n                Identifier = \"always_run\",\n                Severity = \"warning\",\n            },\n        },\n        Type = \"pipeline\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewPolicyset(ctx, \"test\", \u0026platform.PolicysetArgs{\n\t\t\tAction:     pulumi.String(\"onrun\"),\n\t\t\tEnabled:    pulumi.Bool(true),\n\t\t\tIdentifier: pulumi.String(\"harness_platform_policyset.test.identifier\"),\n\t\t\tPolicies: platform.PolicysetPolicyArray{\n\t\t\t\t\u0026platform.PolicysetPolicyArgs{\n\t\t\t\t\tIdentifier: pulumi.String(\"always_run\"),\n\t\t\t\t\tSeverity:   pulumi.String(\"warning\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"pipeline\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Policyset;\nimport com.pulumi.harness.platform.PolicysetArgs;\nimport com.pulumi.harness.platform.inputs.PolicysetPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Policyset(\"test\", PolicysetArgs.builder()        \n            .action(\"onrun\")\n            .enabled(true)\n            .identifier(\"harness_platform_policyset.test.identifier\")\n            .policies(PolicysetPolicyArgs.builder()\n                .identifier(\"always_run\")\n                .severity(\"warning\")\n                .build())\n            .type(\"pipeline\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:Policyset\n    properties:\n      action: onrun\n      enabled: true\n      identifier: harness_platform_policyset.test.identifier\n      policies:\n        - identifier: always_run\n          severity: warning\n      type: pipeline\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the organization id\n\n```sh\n $ pulumi import harness:platform/policyset:Policyset example \u003corganization_id\u003e\n```\n\n ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action for the policyset.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled for the policyset.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/PolicysetPolicy:PolicysetPolicy"
                    },
                    "description": "List of policy identifiers / severity for the policyset.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type for the policyset.\n"
                }
            },
            "required": [
                "action",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Action for the policyset.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled for the policyset.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/PolicysetPolicy:PolicysetPolicy"
                    },
                    "description": "List of policy identifiers / severity for the policyset.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type for the policyset.\n"
                }
            },
            "requiredInputs": [
                "action",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policyset resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action for the policyset.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled for the policyset.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/PolicysetPolicy:PolicysetPolicy"
                        },
                        "description": "List of policy identifiers / severity for the policyset.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type for the policyset.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/project:Project": {
            "description": "Resource for creating a Harness project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.Project(\"test\", {\n    color: \"#0063F7\",\n    identifier: \"testproject\",\n    orgId: \"org_id\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.Project(\"test\",\n    color=\"#0063F7\",\n    identifier=\"testproject\",\n    org_id=\"org_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.Project(\"test\", new()\n    {\n        Color = \"#0063F7\",\n        Identifier = \"testproject\",\n        OrgId = \"org_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewProject(ctx, \"test\", \u0026platform.ProjectArgs{\n\t\t\tColor:      pulumi.String(\"#0063F7\"),\n\t\t\tIdentifier: pulumi.String(\"testproject\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Project;\nimport com.pulumi.harness.platform.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Project(\"test\", ProjectArgs.builder()        \n            .color(\"#0063F7\")\n            .identifier(\"testproject\")\n            .orgId(\"org_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:Project\n    properties:\n      color: '#0063F7'\n      identifier: testproject\n      orgId: org_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the organization id and the project id\n\n```sh\n $ pulumi import harness:platform/project:Project example \u003corganization_id\u003e/\u003cproject_id\u003e\n```\n\n ",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color of the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Modules in the project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "color",
                "identifier",
                "modules",
                "name",
                "orgId"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Color of the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "modules": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Modules in the project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/prometheusConnector:PrometheusConnector": {
            "description": "Resource for creating a Prometheus connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.PrometheusConnector(\"example\", {\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    headers: [{\n        encryptedValueRef: \"account.secret_identifier\",\n        key: \"key\",\n        value: \"value\",\n        valueEncrypted: true,\n    }],\n    identifier: \"idntifier\",\n    passwordRef: \"account.secret_identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://prometheus.com/\",\n    userName: \"user_name\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.PrometheusConnector(\"example\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    headers=[harness.platform.PrometheusConnectorHeaderArgs(\n        encrypted_value_ref=\"account.secret_identifier\",\n        key=\"key\",\n        value=\"value\",\n        value_encrypted=True,\n    )],\n    identifier=\"idntifier\",\n    password_ref=\"account.secret_identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://prometheus.com/\",\n    user_name=\"user_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.PrometheusConnector(\"example\", new()\n    {\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Headers = new[]\n        {\n            new Harness.Platform.Inputs.PrometheusConnectorHeaderArgs\n            {\n                EncryptedValueRef = \"account.secret_identifier\",\n                Key = \"key\",\n                Value = \"value\",\n                ValueEncrypted = true,\n            },\n        },\n        Identifier = \"idntifier\",\n        PasswordRef = \"account.secret_identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://prometheus.com/\",\n        UserName = \"user_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewPrometheusConnector(ctx, \"example\", \u0026platform.PrometheusConnectorArgs{\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tHeaders: platform.PrometheusConnectorHeaderArray{\n\t\t\t\t\u0026platform.PrometheusConnectorHeaderArgs{\n\t\t\t\t\tEncryptedValueRef: pulumi.String(\"account.secret_identifier\"),\n\t\t\t\t\tKey:               pulumi.String(\"key\"),\n\t\t\t\t\tValue:             pulumi.String(\"value\"),\n\t\t\t\t\tValueEncrypted:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tIdentifier:  pulumi.String(\"idntifier\"),\n\t\t\tPasswordRef: pulumi.String(\"account.secret_identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl:      pulumi.String(\"https://prometheus.com/\"),\n\t\t\tUserName: pulumi.String(\"user_name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PrometheusConnector;\nimport com.pulumi.harness.platform.PrometheusConnectorArgs;\nimport com.pulumi.harness.platform.inputs.PrometheusConnectorHeaderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new PrometheusConnector(\"example\", PrometheusConnectorArgs.builder()        \n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .headers(PrometheusConnectorHeaderArgs.builder()\n                .encryptedValueRef(\"account.secret_identifier\")\n                .key(\"key\")\n                .value(\"value\")\n                .valueEncrypted(true)\n                .build())\n            .identifier(\"idntifier\")\n            .passwordRef(\"account.secret_identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://prometheus.com/\")\n            .userName(\"user_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:PrometheusConnector\n    properties:\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      headers:\n        - encryptedValueRef: account.secret_identifier\n          key: key\n          value: value\n          valueEncrypted: true\n      identifier: idntifier\n      passwordRef: account.secret_identifier\n      tags:\n        - foo:bar\n      url: https://prometheus.com/\n      userName: user_name\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level prometheus connector\n\n\n\n```sh\n $ pulumi import harness:platform/prometheusConnector:PrometheusConnector example \u003cconnector_id\u003e\n```\n\n Import org level prometheus connector\n\n\n\n```sh\n $ pulumi import harness:platform/prometheusConnector:PrometheusConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level prometheus connector\n\n\n\n```sh\n $ pulumi import harness:platform/prometheusConnector:PrometheusConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/PrometheusConnectorHeader:PrometheusConnectorHeader"
                    },
                    "description": "Headers.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Prometheus server.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/PrometheusConnectorHeader:PrometheusConnectorHeader"
                    },
                    "description": "Headers.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Prometheus server.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrometheusConnector resources.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/PrometheusConnectorHeader:PrometheusConnectorHeader"
                        },
                        "description": "Headers.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Prometheus server.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/resourceGroup:ResourceGroup": {
            "description": "Resource for creating a Harness Resource Group\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ResourceGroup;\nimport com.pulumi.harness.platform.ResourceGroupArgs;\nimport com.pulumi.harness.platform.inputs.ResourceGroupIncludedScopeArgs;\nimport com.pulumi.harness.platform.inputs.ResourceGroupResourceFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ResourceGroup(\"test\", ResourceGroupArgs.builder()        \n            .accountId(\"account_id\")\n            .allowedScopeLevels(\"account\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .includedScopes(ResourceGroupIncludedScopeArgs.builder()\n                .accountId(\"account_id\")\n                .filter(\"EXCLUDING_CHILD_SCOPES\")\n                .build())\n            .resourceFilters(ResourceGroupResourceFilterArgs.builder()\n                .includeAllResources(false)\n                .resources(ResourceGroupResourceFilterResourceArgs.builder()\n                    .attributeFilter(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .resourceType(\"CONNECTOR\")\n                    .build())\n                .build())\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:ResourceGroup\n    properties:\n      accountId: account_id\n      allowedScopeLevels:\n        - account\n      description: test\n      identifier: identifier\n      includedScopes:\n        - accountId: account_id\n          filter: EXCLUDING_CHILD_SCOPES\n      resourceFilters:\n        - includeAllResources: false\n          resources:\n            - attributeFilter:\n                - attributeName: category\n                  attributeValues:\n                    - value\n              resourceType: CONNECTOR\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level resource group\n\n```sh\n $ pulumi import harness:platform/resourceGroup:ResourceGroup example \u003cresource_group_id\u003e\n```\n\n Import org level resource group\n\n```sh\n $ pulumi import harness:platform/resourceGroup:ResourceGroup example \u003cord_id\u003e/\u003cresource_group_id\u003e\n```\n\n Import project level resource group\n\n```sh\n $ pulumi import harness:platform/resourceGroup:ResourceGroup example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cresource_group_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this resource group can be used\n"
                },
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "includedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope"
                    },
                    "description": "Included scopes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "resourceFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter"
                    },
                    "description": "Contains resource filter for a resource group\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "accountId",
                "allowedScopeLevels",
                "color",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this resource group can be used\n"
                },
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "includedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope"
                    },
                    "description": "Included scopes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "resourceFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter"
                    },
                    "description": "Contains resource filter for a resource group\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceGroup resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier of the account\n"
                    },
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this resource group can be used\n"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of the environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "includedScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope"
                        },
                        "description": "Included scopes\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "resourceFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter"
                        },
                        "description": "Contains resource filter for a resource group\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/roleAssignments:RoleAssignments": {
            "description": "Resource for creating role assignments in Harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n//To create a role binding in service account\nconst example1RoleAssignments = new harness.platform.RoleAssignments(\"example1RoleAssignments\", {\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    resourceGroupIdentifier: \"_all_project_level_resources\",\n    roleIdentifier: \"_project_viewer\",\n    principals: [{\n        identifier: harness_platform_service_account.test.id,\n        type: \"SERVICE_ACCOUNT\",\n    }],\n    disabled: false,\n    managed: false,\n});\n//To create a role binding in user group \nconst example1Platform_roleAssignmentsRoleAssignments = new harness.platform.RoleAssignments(\"example1Platform/roleAssignmentsRoleAssignments\", {\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    resourceGroupIdentifier: \"_all_project_level_resources\",\n    roleIdentifier: \"_project_viewer\",\n    principals: [{\n        identifier: harness_platform_usergroup.test.id,\n        type: \"USER_GROUP\",\n    }],\n    disabled: false,\n    managed: false,\n});\nconst example2RoleAssignments = new harness.platform.RoleAssignments(\"example2RoleAssignments\", {\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    resourceGroupIdentifier: \"_all_project_level_resources\",\n    roleIdentifier: \"_project_viewer\",\n    principals: [{\n        identifier: \"user_id\",\n        type: \"USER\",\n    }],\n    disabled: false,\n    managed: false,\n});\nconst example2Platform_roleAssignmentsRoleAssignments = new harness.platform.RoleAssignments(\"example2Platform/roleAssignmentsRoleAssignments\", {\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    resourceGroupIdentifier: \"_all_project_level_resources\",\n    roleIdentifier: \"_project_viewer\",\n    principals: [{\n        identifier: \"service_id\",\n        type: \"SERVICE\",\n    }],\n    disabled: false,\n    managed: false,\n});\nconst example2HarnessPlatform_roleAssignmentsRoleAssignments = new harness.platform.RoleAssignments(\"example2HarnessPlatform/roleAssignmentsRoleAssignments\", {\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    resourceGroupIdentifier: \"_all_project_level_resources\",\n    roleIdentifier: \"_project_viewer\",\n    principals: [{\n        identifier: \"api_key_id\",\n        type: \"API_KEY\",\n    }],\n    disabled: false,\n    managed: false,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n#To create a role binding in service account\nexample1_role_assignments = harness.platform.RoleAssignments(\"example1RoleAssignments\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    resource_group_identifier=\"_all_project_level_resources\",\n    role_identifier=\"_project_viewer\",\n    principals=[harness.platform.RoleAssignmentsPrincipalArgs(\n        identifier=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n        type=\"SERVICE_ACCOUNT\",\n    )],\n    disabled=False,\n    managed=False)\n#To create a role binding in user group \nexample1_platform_role_assignments_role_assignments = harness.platform.RoleAssignments(\"example1Platform/roleAssignmentsRoleAssignments\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    resource_group_identifier=\"_all_project_level_resources\",\n    role_identifier=\"_project_viewer\",\n    principals=[harness.platform.RoleAssignmentsPrincipalArgs(\n        identifier=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n        type=\"USER_GROUP\",\n    )],\n    disabled=False,\n    managed=False)\nexample2_role_assignments = harness.platform.RoleAssignments(\"example2RoleAssignments\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    resource_group_identifier=\"_all_project_level_resources\",\n    role_identifier=\"_project_viewer\",\n    principals=[harness.platform.RoleAssignmentsPrincipalArgs(\n        identifier=\"user_id\",\n        type=\"USER\",\n    )],\n    disabled=False,\n    managed=False)\nexample2_platform_role_assignments_role_assignments = harness.platform.RoleAssignments(\"example2Platform/roleAssignmentsRoleAssignments\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    resource_group_identifier=\"_all_project_level_resources\",\n    role_identifier=\"_project_viewer\",\n    principals=[harness.platform.RoleAssignmentsPrincipalArgs(\n        identifier=\"service_id\",\n        type=\"SERVICE\",\n    )],\n    disabled=False,\n    managed=False)\nexample2_harness_platform_role_assignments_role_assignments = harness.platform.RoleAssignments(\"example2HarnessPlatform/roleAssignmentsRoleAssignments\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    resource_group_identifier=\"_all_project_level_resources\",\n    role_identifier=\"_project_viewer\",\n    principals=[harness.platform.RoleAssignmentsPrincipalArgs(\n        identifier=\"api_key_id\",\n        type=\"API_KEY\",\n    )],\n    disabled=False,\n    managed=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    //To create a role binding in service account\n    var example1RoleAssignments = new Harness.Platform.RoleAssignments(\"example1RoleAssignments\", new()\n    {\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        ResourceGroupIdentifier = \"_all_project_level_resources\",\n        RoleIdentifier = \"_project_viewer\",\n        Principals = new[]\n        {\n            new Harness.Platform.Inputs.RoleAssignmentsPrincipalArgs\n            {\n                Identifier = harness_platform_service_account.Test.Id,\n                Type = \"SERVICE_ACCOUNT\",\n            },\n        },\n        Disabled = false,\n        Managed = false,\n    });\n\n    //To create a role binding in user group \n    var example1Platform_roleAssignmentsRoleAssignments = new Harness.Platform.RoleAssignments(\"example1Platform/roleAssignmentsRoleAssignments\", new()\n    {\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        ResourceGroupIdentifier = \"_all_project_level_resources\",\n        RoleIdentifier = \"_project_viewer\",\n        Principals = new[]\n        {\n            new Harness.Platform.Inputs.RoleAssignmentsPrincipalArgs\n            {\n                Identifier = harness_platform_usergroup.Test.Id,\n                Type = \"USER_GROUP\",\n            },\n        },\n        Disabled = false,\n        Managed = false,\n    });\n\n    var example2RoleAssignments = new Harness.Platform.RoleAssignments(\"example2RoleAssignments\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        ResourceGroupIdentifier = \"_all_project_level_resources\",\n        RoleIdentifier = \"_project_viewer\",\n        Principals = new[]\n        {\n            new Harness.Platform.Inputs.RoleAssignmentsPrincipalArgs\n            {\n                Identifier = \"user_id\",\n                Type = \"USER\",\n            },\n        },\n        Disabled = false,\n        Managed = false,\n    });\n\n    var example2Platform_roleAssignmentsRoleAssignments = new Harness.Platform.RoleAssignments(\"example2Platform/roleAssignmentsRoleAssignments\", new()\n    {\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        ResourceGroupIdentifier = \"_all_project_level_resources\",\n        RoleIdentifier = \"_project_viewer\",\n        Principals = new[]\n        {\n            new Harness.Platform.Inputs.RoleAssignmentsPrincipalArgs\n            {\n                Identifier = \"service_id\",\n                Type = \"SERVICE\",\n            },\n        },\n        Disabled = false,\n        Managed = false,\n    });\n\n    var example2HarnessPlatform_roleAssignmentsRoleAssignments = new Harness.Platform.RoleAssignments(\"example2HarnessPlatform/roleAssignmentsRoleAssignments\", new()\n    {\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        ResourceGroupIdentifier = \"_all_project_level_resources\",\n        RoleIdentifier = \"_project_viewer\",\n        Principals = new[]\n        {\n            new Harness.Platform.Inputs.RoleAssignmentsPrincipalArgs\n            {\n                Identifier = \"api_key_id\",\n                Type = \"API_KEY\",\n            },\n        },\n        Disabled = false,\n        Managed = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewRoleAssignments(ctx, \"example1RoleAssignments\", \u0026platform.RoleAssignmentsArgs{\n\t\t\tOrgId:                   pulumi.String(\"org_id\"),\n\t\t\tProjectId:               pulumi.String(\"project_id\"),\n\t\t\tResourceGroupIdentifier: pulumi.String(\"_all_project_level_resources\"),\n\t\t\tRoleIdentifier:          pulumi.String(\"_project_viewer\"),\n\t\t\tPrincipals: platform.RoleAssignmentsPrincipalArray{\n\t\t\t\t\u0026platform.RoleAssignmentsPrincipalArgs{\n\t\t\t\t\tIdentifier: pulumi.Any(harness_platform_service_account.Test.Id),\n\t\t\t\t\tType:       pulumi.String(\"SERVICE_ACCOUNT\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDisabled: pulumi.Bool(false),\n\t\t\tManaged:  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewRoleAssignments(ctx, \"example1Platform/roleAssignmentsRoleAssignments\", \u0026platform.RoleAssignmentsArgs{\n\t\t\tOrgId:                   pulumi.String(\"org_id\"),\n\t\t\tProjectId:               pulumi.String(\"project_id\"),\n\t\t\tResourceGroupIdentifier: pulumi.String(\"_all_project_level_resources\"),\n\t\t\tRoleIdentifier:          pulumi.String(\"_project_viewer\"),\n\t\t\tPrincipals: platform.RoleAssignmentsPrincipalArray{\n\t\t\t\t\u0026platform.RoleAssignmentsPrincipalArgs{\n\t\t\t\t\tIdentifier: pulumi.Any(harness_platform_usergroup.Test.Id),\n\t\t\t\t\tType:       pulumi.String(\"USER_GROUP\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDisabled: pulumi.Bool(false),\n\t\t\tManaged:  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewRoleAssignments(ctx, \"example2RoleAssignments\", \u0026platform.RoleAssignmentsArgs{\n\t\t\tIdentifier:              pulumi.String(\"identifier\"),\n\t\t\tOrgId:                   pulumi.String(\"org_id\"),\n\t\t\tProjectId:               pulumi.String(\"project_id\"),\n\t\t\tResourceGroupIdentifier: pulumi.String(\"_all_project_level_resources\"),\n\t\t\tRoleIdentifier:          pulumi.String(\"_project_viewer\"),\n\t\t\tPrincipals: platform.RoleAssignmentsPrincipalArray{\n\t\t\t\t\u0026platform.RoleAssignmentsPrincipalArgs{\n\t\t\t\t\tIdentifier: pulumi.String(\"user_id\"),\n\t\t\t\t\tType:       pulumi.String(\"USER\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDisabled: pulumi.Bool(false),\n\t\t\tManaged:  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewRoleAssignments(ctx, \"example2Platform/roleAssignmentsRoleAssignments\", \u0026platform.RoleAssignmentsArgs{\n\t\t\tOrgId:                   pulumi.String(\"org_id\"),\n\t\t\tProjectId:               pulumi.String(\"project_id\"),\n\t\t\tResourceGroupIdentifier: pulumi.String(\"_all_project_level_resources\"),\n\t\t\tRoleIdentifier:          pulumi.String(\"_project_viewer\"),\n\t\t\tPrincipals: platform.RoleAssignmentsPrincipalArray{\n\t\t\t\t\u0026platform.RoleAssignmentsPrincipalArgs{\n\t\t\t\t\tIdentifier: pulumi.String(\"service_id\"),\n\t\t\t\t\tType:       pulumi.String(\"SERVICE\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDisabled: pulumi.Bool(false),\n\t\t\tManaged:  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewRoleAssignments(ctx, \"example2HarnessPlatform/roleAssignmentsRoleAssignments\", \u0026platform.RoleAssignmentsArgs{\n\t\t\tOrgId:                   pulumi.String(\"org_id\"),\n\t\t\tProjectId:               pulumi.String(\"project_id\"),\n\t\t\tResourceGroupIdentifier: pulumi.String(\"_all_project_level_resources\"),\n\t\t\tRoleIdentifier:          pulumi.String(\"_project_viewer\"),\n\t\t\tPrincipals: platform.RoleAssignmentsPrincipalArray{\n\t\t\t\t\u0026platform.RoleAssignmentsPrincipalArgs{\n\t\t\t\t\tIdentifier: pulumi.String(\"api_key_id\"),\n\t\t\t\t\tType:       pulumi.String(\"API_KEY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDisabled: pulumi.Bool(false),\n\t\t\tManaged:  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.RoleAssignments;\nimport com.pulumi.harness.platform.RoleAssignmentsArgs;\nimport com.pulumi.harness.platform.inputs.RoleAssignmentsPrincipalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example1RoleAssignments = new RoleAssignments(\"example1RoleAssignments\", RoleAssignmentsArgs.builder()        \n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .resourceGroupIdentifier(\"_all_project_level_resources\")\n            .roleIdentifier(\"_project_viewer\")\n            .principals(RoleAssignmentsPrincipalArgs.builder()\n                .identifier(harness_platform_service_account.test().id())\n                .type(\"SERVICE_ACCOUNT\")\n                .build())\n            .disabled(false)\n            .managed(false)\n            .build());\n\n        var example1Platform_roleAssignmentsRoleAssignments = new RoleAssignments(\"example1Platform/roleAssignmentsRoleAssignments\", RoleAssignmentsArgs.builder()        \n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .resourceGroupIdentifier(\"_all_project_level_resources\")\n            .roleIdentifier(\"_project_viewer\")\n            .principals(RoleAssignmentsPrincipalArgs.builder()\n                .identifier(harness_platform_usergroup.test().id())\n                .type(\"USER_GROUP\")\n                .build())\n            .disabled(false)\n            .managed(false)\n            .build());\n\n        var example2RoleAssignments = new RoleAssignments(\"example2RoleAssignments\", RoleAssignmentsArgs.builder()        \n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .resourceGroupIdentifier(\"_all_project_level_resources\")\n            .roleIdentifier(\"_project_viewer\")\n            .principals(RoleAssignmentsPrincipalArgs.builder()\n                .identifier(\"user_id\")\n                .type(\"USER\")\n                .build())\n            .disabled(false)\n            .managed(false)\n            .build());\n\n        var example2Platform_roleAssignmentsRoleAssignments = new RoleAssignments(\"example2Platform/roleAssignmentsRoleAssignments\", RoleAssignmentsArgs.builder()        \n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .resourceGroupIdentifier(\"_all_project_level_resources\")\n            .roleIdentifier(\"_project_viewer\")\n            .principals(RoleAssignmentsPrincipalArgs.builder()\n                .identifier(\"service_id\")\n                .type(\"SERVICE\")\n                .build())\n            .disabled(false)\n            .managed(false)\n            .build());\n\n        var example2HarnessPlatform_roleAssignmentsRoleAssignments = new RoleAssignments(\"example2HarnessPlatform/roleAssignmentsRoleAssignments\", RoleAssignmentsArgs.builder()        \n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .resourceGroupIdentifier(\"_all_project_level_resources\")\n            .roleIdentifier(\"_project_viewer\")\n            .principals(RoleAssignmentsPrincipalArgs.builder()\n                .identifier(\"api_key_id\")\n                .type(\"API_KEY\")\n                .build())\n            .disabled(false)\n            .managed(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # To create a role binding in service account\n  example1RoleAssignments:\n    type: harness:platform:RoleAssignments\n    properties:\n      orgId: org_id\n      projectId: project_id\n      resourceGroupIdentifier: _all_project_level_resources\n      roleIdentifier: _project_viewer\n      principals:\n        - identifier: ${harness_platform_service_account.test.id}\n          type: SERVICE_ACCOUNT\n      disabled: false\n      managed: false\n  # To create a role binding in user group\n  example1Platform/roleAssignmentsRoleAssignments:\n    type: harness:platform:RoleAssignments\n    properties:\n      orgId: org_id\n      projectId: project_id\n      resourceGroupIdentifier: _all_project_level_resources\n      roleIdentifier: _project_viewer\n      principals:\n        - identifier: ${harness_platform_usergroup.test.id}\n          type: USER_GROUP\n      disabled: false\n      managed: false\n  example2RoleAssignments:\n    type: harness:platform:RoleAssignments\n    properties:\n      identifier: identifier\n      orgId: org_id\n      projectId: project_id\n      resourceGroupIdentifier: _all_project_level_resources\n      roleIdentifier: _project_viewer\n      principals:\n        - identifier: user_id\n          type: USER\n      disabled: false\n      managed: false\n  example2Platform/roleAssignmentsRoleAssignments:\n    type: harness:platform:RoleAssignments\n    properties:\n      orgId: org_id\n      projectId: project_id\n      resourceGroupIdentifier: _all_project_level_resources\n      roleIdentifier: _project_viewer\n      principals:\n        - identifier: service_id\n          type: SERVICE\n      disabled: false\n      managed: false\n  example2HarnessPlatform/roleAssignmentsRoleAssignments:\n    type: harness:platform:RoleAssignments\n    properties:\n      orgId: org_id\n      projectId: project_id\n      resourceGroupIdentifier: _all_project_level_resources\n      roleIdentifier: _project_viewer\n      principals:\n        - identifier: api_key_id\n          type: API_KEY\n      disabled: false\n      managed: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level role assignments\n\n```sh\n $ pulumi import harness:platform/roleAssignments:RoleAssignments example \u003crole_assignments_id\u003e\n```\n\n Import org level role assignments\n\n```sh\n $ pulumi import harness:platform/roleAssignments:RoleAssignments example \u003cord_id\u003e/\u003crole_assignments_id\u003e\n```\n\n Import project level role assignments\n\n```sh\n $ pulumi import harness:platform/roleAssignments:RoleAssignments example \u003corg_id\u003e/\u003cproject_id\u003e/\u003crole_assignments_id\u003e\n```\n\n ",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Disabled or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier for role assignment.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Managed or not.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Org identifier.\n"
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/RoleAssignmentsPrincipal:RoleAssignmentsPrincipal"
                    },
                    "description": "Principal.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                },
                "resourceGroupIdentifier": {
                    "type": "string",
                    "description": "Resource group identifier.\n"
                },
                "roleIdentifier": {
                    "type": "string",
                    "description": "Role identifier.\n"
                }
            },
            "required": [
                "identifier",
                "principals",
                "resourceGroupIdentifier",
                "roleIdentifier"
            ],
            "inputProperties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Disabled or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier for role assignment.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Managed or not.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Org identifier.\n"
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/RoleAssignmentsPrincipal:RoleAssignmentsPrincipal"
                    },
                    "description": "Principal.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                },
                "resourceGroupIdentifier": {
                    "type": "string",
                    "description": "Resource group identifier.\n"
                },
                "roleIdentifier": {
                    "type": "string",
                    "description": "Role identifier.\n"
                }
            },
            "requiredInputs": [
                "principals",
                "resourceGroupIdentifier",
                "roleIdentifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleAssignments resources.\n",
                "properties": {
                    "disabled": {
                        "type": "boolean",
                        "description": "Disabled or not.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for role assignment.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Managed or not.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Org identifier.\n"
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/RoleAssignmentsPrincipal:RoleAssignmentsPrincipal"
                        },
                        "description": "Principal.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n"
                    },
                    "resourceGroupIdentifier": {
                        "type": "string",
                        "description": "Resource group identifier.\n"
                    },
                    "roleIdentifier": {
                        "type": "string",
                        "description": "Role identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/roles:Roles": {
            "description": "Resource for creating roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.Roles(\"example\", {\n    allowedScopeLevels: [\"account\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    permissions: [\"core_resourcegroup_view\"],\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.Roles(\"example\",\n    allowed_scope_levels=[\"account\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    permissions=[\"core_resourcegroup_view\"],\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Roles(\"example\", new()\n    {\n        AllowedScopeLevels = new[]\n        {\n            \"account\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Permissions = new[]\n        {\n            \"core_resourcegroup_view\",\n        },\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewRoles(ctx, \"example\", \u0026platform.RolesArgs{\n\t\t\tAllowedScopeLevels: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"account\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"core_resourcegroup_view\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Roles;\nimport com.pulumi.harness.platform.RolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Roles(\"example\", RolesArgs.builder()        \n            .allowedScopeLevels(\"account\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .permissions(\"core_resourcegroup_view\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Roles\n    properties:\n      allowedScopeLevels:\n        - account\n      description: test\n      identifier: identifier\n      permissions:\n        - core_resourcegroup_view\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level roles\n\n```sh\n $ pulumi import harness:platform/roles:Roles example \u003croles_id\u003e\n```\n\n Import org level roles\n\n```sh\n $ pulumi import harness:platform/roles:Roles example \u003cord_id\u003e/\u003croles_id\u003e\n```\n\n Import project level roles\n\n```sh\n $ pulumi import harness:platform/roles:Roles example \u003corg_id\u003e/\u003cproject_id\u003e/\u003croles_id\u003e\n```\n\n ",
            "properties": {
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this role can be used\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the permission identifiers\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "allowedScopeLevels",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this role can be used\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the permission identifiers\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Roles resources.\n",
                "properties": {
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this role can be used\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the permission identifiers\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/secretFile:SecretFile": {
            "description": "Resource for creating a secret of type secret file in Harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.SecretFile(\"example\", {\n    description: \"test\",\n    filePath: \"file_path\",\n    identifier: \"identifier\",\n    secretManagerIdentifier: \"harnessSecretManager\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.SecretFile(\"example\",\n    description=\"test\",\n    file_path=\"file_path\",\n    identifier=\"identifier\",\n    secret_manager_identifier=\"harnessSecretManager\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.SecretFile(\"example\", new()\n    {\n        Description = \"test\",\n        FilePath = \"file_path\",\n        Identifier = \"identifier\",\n        SecretManagerIdentifier = \"harnessSecretManager\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSecretFile(ctx, \"example\", \u0026platform.SecretFileArgs{\n\t\t\tDescription:             pulumi.String(\"test\"),\n\t\t\tFilePath:                pulumi.String(\"file_path\"),\n\t\t\tIdentifier:              pulumi.String(\"identifier\"),\n\t\t\tSecretManagerIdentifier: pulumi.String(\"harnessSecretManager\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SecretFile;\nimport com.pulumi.harness.platform.SecretFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new SecretFile(\"example\", SecretFileArgs.builder()        \n            .description(\"test\")\n            .filePath(\"file_path\")\n            .identifier(\"identifier\")\n            .secretManagerIdentifier(\"harnessSecretManager\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:SecretFile\n    properties:\n      description: test\n      filePath: file_path\n      identifier: identifier\n      secretManagerIdentifier: harnessSecretManager\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level secret file\n\n```sh\n $ pulumi import harness:platform/secretFile:SecretFile example \u003csecret_file_id\u003e\n```\n\n Import org level secret file\n\n```sh\n $ pulumi import harness:platform/secretFile:SecretFile example \u003cord_id\u003e/\u003csecret_file_id\u003e\n```\n\n Import project level secret file\n\n```sh\n $ pulumi import harness:platform/secretFile:SecretFile example \u003corg_id\u003e/\u003cproject_id\u003e/\u003csecret_file_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "Path of the file containing secret value\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "filePath",
                "identifier",
                "name",
                "secretManagerIdentifier"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "Path of the file containing secret value\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "filePath",
                "identifier",
                "secretManagerIdentifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretFile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "Path of the file containing secret value\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretManagerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the Secret Manager used to manage the secret.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/secretSshkey:SecretSshkey": {
            "description": "Resource for creating an ssh key type secret.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst keyTabFilePath = new harness.platform.SecretSshkey(\"keyTabFilePath\", {\n    identifier: \"identifier\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    port: 22,\n    kerberos: {\n        tgtKeyTabFilePathSpec: {\n            keyPath: \"key_path\",\n        },\n        principal: \"principal\",\n        realm: \"realm\",\n        tgtGenerationMethod: \"KeyTabFilePath\",\n    },\n});\nconst _tgtPassword = new harness.platform.SecretSshkey(\" tgtPassword\", {\n    identifier: \"identifier\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    port: 22,\n    kerberos: {\n        tgtPasswordSpec: {\n            password: `account.${secret.id}`,\n        },\n        principal: \"principal\",\n        realm: \"realm\",\n        tgtGenerationMethod: \"Password\",\n    },\n});\nconst sshkeyReference = new harness.platform.SecretSshkey(\"sshkeyReference\", {\n    identifier: \"identifier\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    port: 22,\n    ssh: {\n        sshkeyReferenceCredential: {\n            userName: \"user_name\",\n            key: `account.${key.id}`,\n            encryptedPassphrase: `account.${secret.id}`,\n        },\n        credentialType: \"KeyReference\",\n    },\n});\nconst _sshkeyPath = new harness.platform.SecretSshkey(\" sshkeyPath\", {\n    identifier: \"identifier\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    port: 22,\n    ssh: {\n        sshkeyPathCredential: {\n            userName: \"user_name\",\n            keyPath: \"key_path\",\n            encryptedPassphrase: \"encrypted_passphrase\",\n        },\n        credentialType: \"KeyPath\",\n    },\n});\nconst sshPassword = new harness.platform.SecretSshkey(\"sshPassword\", {\n    identifier: \"identifier\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    port: 22,\n    ssh: {\n        sshPasswordCredential: {\n            userName: \"user_name\",\n            password: `account.${secret.id}`,\n        },\n        credentialType: \"Password\",\n    },\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nkey_tab_file_path = harness.platform.SecretSshkey(\"keyTabFilePath\",\n    identifier=\"identifier\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    port=22,\n    kerberos=harness.platform.SecretSshkeyKerberosArgs(\n        tgt_key_tab_file_path_spec=harness.platform.SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs(\n            key_path=\"key_path\",\n        ),\n        principal=\"principal\",\n        realm=\"realm\",\n        tgt_generation_method=\"KeyTabFilePath\",\n    ))\n_tgt_password = harness.platform.SecretSshkey(\" tgtPassword\",\n    identifier=\"identifier\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    port=22,\n    kerberos=harness.platform.SecretSshkeyKerberosArgs(\n        tgt_password_spec=harness.platform.SecretSshkeyKerberosTgtPasswordSpecArgs(\n            password=f\"account.{secret['id']}\",\n        ),\n        principal=\"principal\",\n        realm=\"realm\",\n        tgt_generation_method=\"Password\",\n    ))\nsshkey_reference = harness.platform.SecretSshkey(\"sshkeyReference\",\n    identifier=\"identifier\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    port=22,\n    ssh=harness.platform.SecretSshkeySshArgs(\n        sshkey_reference_credential=harness.platform.SecretSshkeySshSshkeyReferenceCredentialArgs(\n            user_name=\"user_name\",\n            key=f\"account.{key['id']}\",\n            encrypted_passphrase=f\"account.{secret['id']}\",\n        ),\n        credential_type=\"KeyReference\",\n    ))\n_sshkey_path = harness.platform.SecretSshkey(\" sshkeyPath\",\n    identifier=\"identifier\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    port=22,\n    ssh=harness.platform.SecretSshkeySshArgs(\n        sshkey_path_credential=harness.platform.SecretSshkeySshSshkeyPathCredentialArgs(\n            user_name=\"user_name\",\n            key_path=\"key_path\",\n            encrypted_passphrase=\"encrypted_passphrase\",\n        ),\n        credential_type=\"KeyPath\",\n    ))\nssh_password = harness.platform.SecretSshkey(\"sshPassword\",\n    identifier=\"identifier\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    port=22,\n    ssh=harness.platform.SecretSshkeySshArgs(\n        ssh_password_credential=harness.platform.SecretSshkeySshSshPasswordCredentialArgs(\n            user_name=\"user_name\",\n            password=f\"account.{secret['id']}\",\n        ),\n        credential_type=\"Password\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var keyTabFilePath = new Harness.Platform.SecretSshkey(\"keyTabFilePath\", new()\n    {\n        Identifier = \"identifier\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Port = 22,\n        Kerberos = new Harness.Platform.Inputs.SecretSshkeyKerberosArgs\n        {\n            TgtKeyTabFilePathSpec = new Harness.Platform.Inputs.SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs\n            {\n                KeyPath = \"key_path\",\n            },\n            Principal = \"principal\",\n            Realm = \"realm\",\n            TgtGenerationMethod = \"KeyTabFilePath\",\n        },\n    });\n\n    var _tgtPassword = new Harness.Platform.SecretSshkey(\" tgtPassword\", new()\n    {\n        Identifier = \"identifier\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Port = 22,\n        Kerberos = new Harness.Platform.Inputs.SecretSshkeyKerberosArgs\n        {\n            TgtPasswordSpec = new Harness.Platform.Inputs.SecretSshkeyKerberosTgtPasswordSpecArgs\n            {\n                Password = $\"account.{secret.Id}\",\n            },\n            Principal = \"principal\",\n            Realm = \"realm\",\n            TgtGenerationMethod = \"Password\",\n        },\n    });\n\n    var sshkeyReference = new Harness.Platform.SecretSshkey(\"sshkeyReference\", new()\n    {\n        Identifier = \"identifier\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Port = 22,\n        Ssh = new Harness.Platform.Inputs.SecretSshkeySshArgs\n        {\n            SshkeyReferenceCredential = new Harness.Platform.Inputs.SecretSshkeySshSshkeyReferenceCredentialArgs\n            {\n                UserName = \"user_name\",\n                Key = $\"account.{key.Id}\",\n                EncryptedPassphrase = $\"account.{secret.Id}\",\n            },\n            CredentialType = \"KeyReference\",\n        },\n    });\n\n    var _sshkeyPath = new Harness.Platform.SecretSshkey(\" sshkeyPath\", new()\n    {\n        Identifier = \"identifier\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Port = 22,\n        Ssh = new Harness.Platform.Inputs.SecretSshkeySshArgs\n        {\n            SshkeyPathCredential = new Harness.Platform.Inputs.SecretSshkeySshSshkeyPathCredentialArgs\n            {\n                UserName = \"user_name\",\n                KeyPath = \"key_path\",\n                EncryptedPassphrase = \"encrypted_passphrase\",\n            },\n            CredentialType = \"KeyPath\",\n        },\n    });\n\n    var sshPassword = new Harness.Platform.SecretSshkey(\"sshPassword\", new()\n    {\n        Identifier = \"identifier\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Port = 22,\n        Ssh = new Harness.Platform.Inputs.SecretSshkeySshArgs\n        {\n            SshPasswordCredential = new Harness.Platform.Inputs.SecretSshkeySshSshPasswordCredentialArgs\n            {\n                UserName = \"user_name\",\n                Password = $\"account.{secret.Id}\",\n            },\n            CredentialType = \"Password\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSecretSshkey(ctx, \"keyTabFilePath\", \u0026platform.SecretSshkeyArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tPort: pulumi.Int(22),\n\t\t\tKerberos: \u0026platform.SecretSshkeyKerberosArgs{\n\t\t\t\tTgtKeyTabFilePathSpec: \u0026platform.SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs{\n\t\t\t\t\tKeyPath: pulumi.String(\"key_path\"),\n\t\t\t\t},\n\t\t\t\tPrincipal:           pulumi.String(\"principal\"),\n\t\t\t\tRealm:               pulumi.String(\"realm\"),\n\t\t\t\tTgtGenerationMethod: pulumi.String(\"KeyTabFilePath\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewSecretSshkey(ctx, \" tgtPassword\", \u0026platform.SecretSshkeyArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tPort: pulumi.Int(22),\n\t\t\tKerberos: \u0026platform.SecretSshkeyKerberosArgs{\n\t\t\t\tTgtPasswordSpec: \u0026platform.SecretSshkeyKerberosTgtPasswordSpecArgs{\n\t\t\t\t\tPassword: pulumi.String(fmt.Sprintf(\"account.%v\", secret.Id)),\n\t\t\t\t},\n\t\t\t\tPrincipal:           pulumi.String(\"principal\"),\n\t\t\t\tRealm:               pulumi.String(\"realm\"),\n\t\t\t\tTgtGenerationMethod: pulumi.String(\"Password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewSecretSshkey(ctx, \"sshkeyReference\", \u0026platform.SecretSshkeyArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tPort: pulumi.Int(22),\n\t\t\tSsh: \u0026platform.SecretSshkeySshArgs{\n\t\t\t\tSshkeyReferenceCredential: \u0026platform.SecretSshkeySshSshkeyReferenceCredentialArgs{\n\t\t\t\t\tUserName:            pulumi.String(\"user_name\"),\n\t\t\t\t\tKey:                 pulumi.String(fmt.Sprintf(\"account.%v\", key.Id)),\n\t\t\t\t\tEncryptedPassphrase: pulumi.String(fmt.Sprintf(\"account.%v\", secret.Id)),\n\t\t\t\t},\n\t\t\t\tCredentialType: pulumi.String(\"KeyReference\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewSecretSshkey(ctx, \" sshkeyPath\", \u0026platform.SecretSshkeyArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tPort: pulumi.Int(22),\n\t\t\tSsh: \u0026platform.SecretSshkeySshArgs{\n\t\t\t\tSshkeyPathCredential: \u0026platform.SecretSshkeySshSshkeyPathCredentialArgs{\n\t\t\t\t\tUserName:            pulumi.String(\"user_name\"),\n\t\t\t\t\tKeyPath:             pulumi.String(\"key_path\"),\n\t\t\t\t\tEncryptedPassphrase: pulumi.String(\"encrypted_passphrase\"),\n\t\t\t\t},\n\t\t\t\tCredentialType: pulumi.String(\"KeyPath\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewSecretSshkey(ctx, \"sshPassword\", \u0026platform.SecretSshkeyArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tPort: pulumi.Int(22),\n\t\t\tSsh: \u0026platform.SecretSshkeySshArgs{\n\t\t\t\tSshPasswordCredential: \u0026platform.SecretSshkeySshSshPasswordCredentialArgs{\n\t\t\t\t\tUserName: pulumi.String(\"user_name\"),\n\t\t\t\t\tPassword: pulumi.String(fmt.Sprintf(\"account.%v\", secret.Id)),\n\t\t\t\t},\n\t\t\t\tCredentialType: pulumi.String(\"Password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SecretSshkey;\nimport com.pulumi.harness.platform.SecretSshkeyArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeyKerberosArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeyKerberosTgtPasswordSpecArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeySshArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeySshSshkeyReferenceCredentialArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeySshSshkeyPathCredentialArgs;\nimport com.pulumi.harness.platform.inputs.SecretSshkeySshSshPasswordCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var keyTabFilePath = new SecretSshkey(\"keyTabFilePath\", SecretSshkeyArgs.builder()        \n            .identifier(\"identifier\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .port(22)\n            .kerberos(SecretSshkeyKerberosArgs.builder()\n                .tgtKeyTabFilePathSpec(SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs.builder()\n                    .keyPath(\"key_path\")\n                    .build())\n                .principal(\"principal\")\n                .realm(\"realm\")\n                .tgtGenerationMethod(\"KeyTabFilePath\")\n                .build())\n            .build());\n\n        var _tgtPassword = new SecretSshkey(\" tgtPassword\", SecretSshkeyArgs.builder()        \n            .identifier(\"identifier\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .port(22)\n            .kerberos(SecretSshkeyKerberosArgs.builder()\n                .tgtPasswordSpec(SecretSshkeyKerberosTgtPasswordSpecArgs.builder()\n                    .password(String.format(\"account.%s\", secret.id()))\n                    .build())\n                .principal(\"principal\")\n                .realm(\"realm\")\n                .tgtGenerationMethod(\"Password\")\n                .build())\n            .build());\n\n        var sshkeyReference = new SecretSshkey(\"sshkeyReference\", SecretSshkeyArgs.builder()        \n            .identifier(\"identifier\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .port(22)\n            .ssh(SecretSshkeySshArgs.builder()\n                .sshkeyReferenceCredential(SecretSshkeySshSshkeyReferenceCredentialArgs.builder()\n                    .userName(\"user_name\")\n                    .key(String.format(\"account.%s\", key.id()))\n                    .encryptedPassphrase(String.format(\"account.%s\", secret.id()))\n                    .build())\n                .credentialType(\"KeyReference\")\n                .build())\n            .build());\n\n        var _sshkeyPath = new SecretSshkey(\" sshkeyPath\", SecretSshkeyArgs.builder()        \n            .identifier(\"identifier\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .port(22)\n            .ssh(SecretSshkeySshArgs.builder()\n                .sshkeyPathCredential(SecretSshkeySshSshkeyPathCredentialArgs.builder()\n                    .userName(\"user_name\")\n                    .keyPath(\"key_path\")\n                    .encryptedPassphrase(\"encrypted_passphrase\")\n                    .build())\n                .credentialType(\"KeyPath\")\n                .build())\n            .build());\n\n        var sshPassword = new SecretSshkey(\"sshPassword\", SecretSshkeyArgs.builder()        \n            .identifier(\"identifier\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .port(22)\n            .ssh(SecretSshkeySshArgs.builder()\n                .sshPasswordCredential(SecretSshkeySshSshPasswordCredentialArgs.builder()\n                    .userName(\"user_name\")\n                    .password(String.format(\"account.%s\", secret.id()))\n                    .build())\n                .credentialType(\"Password\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  keyTabFilePath:\n    type: harness:platform:SecretSshkey\n    properties:\n      identifier: identifier\n      description: test\n      tags:\n        - foo:bar\n      port: 22\n      kerberos:\n        tgtKeyTabFilePathSpec:\n          keyPath: key_path\n        principal: principal\n        realm: realm\n        tgtGenerationMethod: KeyTabFilePath\n  ' tgtPassword':\n    type: harness:platform:SecretSshkey\n    properties:\n      identifier: identifier\n      description: test\n      tags:\n        - foo:bar\n      port: 22\n      kerberos:\n        tgtPasswordSpec:\n          password: account.${secret.id}\n        principal: principal\n        realm: realm\n        tgtGenerationMethod: Password\n  sshkeyReference:\n    type: harness:platform:SecretSshkey\n    properties:\n      identifier: identifier\n      description: test\n      tags:\n        - foo:bar\n      port: 22\n      ssh:\n        sshkeyReferenceCredential:\n          userName: user_name\n          key: account.${key.id}\n          encryptedPassphrase: account.${secret.id}\n        credentialType: KeyReference\n  ' sshkeyPath':\n    type: harness:platform:SecretSshkey\n    properties:\n      identifier: identifier\n      description: test\n      tags:\n        - foo:bar\n      port: 22\n      ssh:\n        sshkeyPathCredential:\n          userName: user_name\n          keyPath: key_path\n          encryptedPassphrase: encrypted_passphrase\n        credentialType: KeyPath\n  sshPassword:\n    type: harness:platform:SecretSshkey\n    properties:\n      identifier: identifier\n      description: test\n      tags:\n        - foo:bar\n      port: 22\n      ssh:\n        sshPasswordCredential:\n          userName: user_name\n          password: account.${secret.id}\n        credentialType: Password\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level secret sshkey\n\n```sh\n $ pulumi import harness:platform/secretSshkey:SecretSshkey example \u003csecret_sshkey_id\u003e\n```\n\n Import org level secret sshkey\n\n```sh\n $ pulumi import harness:platform/secretSshkey:SecretSshkey example \u003cord_id\u003e/\u003csecret_sshkey_id\u003e\n```\n\n Import project level secret sshkey\n\n```sh\n $ pulumi import harness:platform/secretSshkey:SecretSshkey example \u003corg_id\u003e/\u003cproject_id\u003e/\u003csecret_sshkey_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "kerberos": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos",
                    "description": "Kerberos authentication scheme\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "SSH port\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/SecretSshkeySsh:SecretSshkeySsh",
                    "description": "Kerberos authentication scheme\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "kerberos": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos",
                    "description": "Kerberos authentication scheme\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "SSH port\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/SecretSshkeySsh:SecretSshkeySsh",
                    "description": "Kerberos authentication scheme\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSshkey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "kerberos": {
                        "$ref": "#/types/harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos",
                        "description": "Kerberos authentication scheme\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "SSH port\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "ssh": {
                        "$ref": "#/types/harness:platform/SecretSshkeySsh:SecretSshkeySsh",
                        "description": "Kerberos authentication scheme\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/secretText:SecretText": {
            "description": "Resource for creating secret of type secret text\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst inline = new harness.platform.SecretText(\"inline\", {\n    description: \"example\",\n    identifier: \"identifier\",\n    secretManagerIdentifier: \"harnessSecretManager\",\n    tags: [\"foo:bar\"],\n    value: \"secret\",\n    valueType: \"Inline\",\n});\nconst reference = new harness.platform.SecretText(\"reference\", {\n    description: \"example\",\n    identifier: \"identifier\",\n    secretManagerIdentifier: \"azureSecretManager\",\n    tags: [\"foo:bar\"],\n    value: \"secret\",\n    valueType: \"Reference\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ninline = harness.platform.SecretText(\"inline\",\n    description=\"example\",\n    identifier=\"identifier\",\n    secret_manager_identifier=\"harnessSecretManager\",\n    tags=[\"foo:bar\"],\n    value=\"secret\",\n    value_type=\"Inline\")\nreference = harness.platform.SecretText(\"reference\",\n    description=\"example\",\n    identifier=\"identifier\",\n    secret_manager_identifier=\"azureSecretManager\",\n    tags=[\"foo:bar\"],\n    value=\"secret\",\n    value_type=\"Reference\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var inline = new Harness.Platform.SecretText(\"inline\", new()\n    {\n        Description = \"example\",\n        Identifier = \"identifier\",\n        SecretManagerIdentifier = \"harnessSecretManager\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Value = \"secret\",\n        ValueType = \"Inline\",\n    });\n\n    var reference = new Harness.Platform.SecretText(\"reference\", new()\n    {\n        Description = \"example\",\n        Identifier = \"identifier\",\n        SecretManagerIdentifier = \"azureSecretManager\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Value = \"secret\",\n        ValueType = \"Reference\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSecretText(ctx, \"inline\", \u0026platform.SecretTextArgs{\n\t\t\tDescription:             pulumi.String(\"example\"),\n\t\t\tIdentifier:              pulumi.String(\"identifier\"),\n\t\t\tSecretManagerIdentifier: pulumi.String(\"harnessSecretManager\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tValue:     pulumi.String(\"secret\"),\n\t\t\tValueType: pulumi.String(\"Inline\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewSecretText(ctx, \"reference\", \u0026platform.SecretTextArgs{\n\t\t\tDescription:             pulumi.String(\"example\"),\n\t\t\tIdentifier:              pulumi.String(\"identifier\"),\n\t\t\tSecretManagerIdentifier: pulumi.String(\"azureSecretManager\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tValue:     pulumi.String(\"secret\"),\n\t\t\tValueType: pulumi.String(\"Reference\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SecretText;\nimport com.pulumi.harness.platform.SecretTextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var inline = new SecretText(\"inline\", SecretTextArgs.builder()        \n            .description(\"example\")\n            .identifier(\"identifier\")\n            .secretManagerIdentifier(\"harnessSecretManager\")\n            .tags(\"foo:bar\")\n            .value(\"secret\")\n            .valueType(\"Inline\")\n            .build());\n\n        var reference = new SecretText(\"reference\", SecretTextArgs.builder()        \n            .description(\"example\")\n            .identifier(\"identifier\")\n            .secretManagerIdentifier(\"azureSecretManager\")\n            .tags(\"foo:bar\")\n            .value(\"secret\")\n            .valueType(\"Reference\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  inline:\n    type: harness:platform:SecretText\n    properties:\n      description: example\n      identifier: identifier\n      secretManagerIdentifier: harnessSecretManager\n      tags:\n        - foo:bar\n      value: secret\n      valueType: Inline\n  reference:\n    type: harness:platform:SecretText\n    properties:\n      description: example\n      identifier: identifier\n      secretManagerIdentifier: azureSecretManager\n      tags:\n        - foo:bar\n      value: secret\n      valueType: Reference\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level secret text\n\n```sh\n $ pulumi import harness:platform/secretText:SecretText example \u003csecret_text_id\u003e\n```\n\n Import org level secret text\n\n```sh\n $ pulumi import harness:platform/secretText:SecretText example \u003cord_id\u003e/\u003csecret_text_id\u003e\n```\n\n Import project level secret text\n\n```sh\n $ pulumi import harness:platform/secretText:SecretText example \u003corg_id\u003e/\u003cproject_id\u003e/\u003csecret_text_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Secret\n",
                    "secret": true
                },
                "valueType": {
                    "type": "string",
                    "description": "This has details to specify if the secret value is Inline or Reference.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "secretManagerIdentifier",
                "value",
                "valueType"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Secret\n",
                    "secret": true
                },
                "valueType": {
                    "type": "string",
                    "description": "This has details to specify if the secret value is Inline or Reference.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "secretManagerIdentifier",
                "value",
                "valueType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretText resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretManagerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the Secret Manager used to manage the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the Secret\n",
                        "secret": true
                    },
                    "valueType": {
                        "type": "string",
                        "description": "This has details to specify if the secret value is Inline or Reference.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/service:Service": {
            "description": "Resource for creating a Harness project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.Service(\"example\", {\n    description: \"test\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    yaml: `  service:\n    name: name\n    identifier: identifier\n    serviceDefinition:\n      spec:\n        manifests:\n          - manifest:\n              identifier: manifest1\n              type: K8sManifest\n              spec:\n                store:\n                  type: Github\n                  spec:\n                    connectorRef: \u003c+input\u003e\n                    gitFetchType: Branch\n                    paths:\n                      - files1\n                    repoName: \u003c+input\u003e\n                    branch: master\n                skipResourceVersioning: false\n        configFiles:\n          - configFile:\n              identifier: configFile1\n              spec:\n                store:\n                  type: Harness\n                  spec:\n                    files:\n                      - \u003c+org.description\u003e\n        variables:\n          - name: var1\n            type: String\n            value: val1\n          - name: var2\n            type: String\n            value: val2\n      type: Kubernetes\n    gitOpsEnabled: false\n\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.Service(\"example\",\n    description=\"test\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    yaml=\"\"\"  service:\n    name: name\n    identifier: identifier\n    serviceDefinition:\n      spec:\n        manifests:\n          - manifest:\n              identifier: manifest1\n              type: K8sManifest\n              spec:\n                store:\n                  type: Github\n                  spec:\n                    connectorRef: \u003c+input\u003e\n                    gitFetchType: Branch\n                    paths:\n                      - files1\n                    repoName: \u003c+input\u003e\n                    branch: master\n                skipResourceVersioning: false\n        configFiles:\n          - configFile:\n              identifier: configFile1\n              spec:\n                store:\n                  type: Harness\n                  spec:\n                    files:\n                      - \u003c+org.description\u003e\n        variables:\n          - name: var1\n            type: String\n            value: val1\n          - name: var2\n            type: String\n            value: val2\n      type: Kubernetes\n    gitOpsEnabled: false\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Service(\"example\", new()\n    {\n        Description = \"test\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Yaml = @\"  service:\n    name: name\n    identifier: identifier\n    serviceDefinition:\n      spec:\n        manifests:\n          - manifest:\n              identifier: manifest1\n              type: K8sManifest\n              spec:\n                store:\n                  type: Github\n                  spec:\n                    connectorRef: \u003c+input\u003e\n                    gitFetchType: Branch\n                    paths:\n                      - files1\n                    repoName: \u003c+input\u003e\n                    branch: master\n                skipResourceVersioning: false\n        configFiles:\n          - configFile:\n              identifier: configFile1\n              spec:\n                store:\n                  type: Harness\n                  spec:\n                    files:\n                      - \u003c+org.description\u003e\n        variables:\n          - name: var1\n            type: String\n            value: val1\n          - name: var2\n            type: String\n            value: val2\n      type: Kubernetes\n    gitOpsEnabled: false\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewService(ctx, \"example\", \u0026platform.ServiceArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tOrgId:       pulumi.String(\"org_id\"),\n\t\t\tProjectId:   pulumi.String(\"project_id\"),\n\t\t\tYaml:        pulumi.String(\"  service:\\n    name: name\\n    identifier: identifier\\n    serviceDefinition:\\n      spec:\\n        manifests:\\n          - manifest:\\n              identifier: manifest1\\n              type: K8sManifest\\n              spec:\\n                store:\\n                  type: Github\\n                  spec:\\n                    connectorRef: \u003c+input\u003e\\n                    gitFetchType: Branch\\n                    paths:\\n                      - files1\\n                    repoName: \u003c+input\u003e\\n                    branch: master\\n                skipResourceVersioning: false\\n        configFiles:\\n          - configFile:\\n              identifier: configFile1\\n              spec:\\n                store:\\n                  type: Harness\\n                  spec:\\n                    files:\\n                      - \u003c+org.description\u003e\\n        variables:\\n          - name: var1\\n            type: String\\n            value: val1\\n          - name: var2\\n            type: String\\n            value: val2\\n      type: Kubernetes\\n    gitOpsEnabled: false\\n\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Service;\nimport com.pulumi.harness.platform.ServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Service(\"example\", ServiceArgs.builder()        \n            .description(\"test\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .yaml(\"\"\"\n  service:\n    name: name\n    identifier: identifier\n    serviceDefinition:\n      spec:\n        manifests:\n          - manifest:\n              identifier: manifest1\n              type: K8sManifest\n              spec:\n                store:\n                  type: Github\n                  spec:\n                    connectorRef: \u003c+input\u003e\n                    gitFetchType: Branch\n                    paths:\n                      - files1\n                    repoName: \u003c+input\u003e\n                    branch: master\n                skipResourceVersioning: false\n        configFiles:\n          - configFile:\n              identifier: configFile1\n              spec:\n                store:\n                  type: Harness\n                  spec:\n                    files:\n                      - \u003c+org.description\u003e\n        variables:\n          - name: var1\n            type: String\n            value: val1\n          - name: var2\n            type: String\n            value: val2\n      type: Kubernetes\n    gitOpsEnabled: false\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Service\n    properties:\n      description: test\n      identifier: identifier\n      orgId: org_id\n      projectId: project_id\n      yaml: |2+\n          service:\n            name: name\n            identifier: identifier\n            serviceDefinition:\n              spec:\n                manifests:\n                  - manifest:\n                      identifier: manifest1\n                      type: K8sManifest\n                      spec:\n                        store:\n                          type: Github\n                          spec:\n                            connectorRef: \u003c+input\u003e\n                            gitFetchType: Branch\n                            paths:\n                              - files1\n                            repoName: \u003c+input\u003e\n                            branch: master\n                        skipResourceVersioning: false\n                configFiles:\n                  - configFile:\n                      identifier: configFile1\n                      spec:\n                        store:\n                          type: Harness\n                          spec:\n                            files:\n                              - \u003c+org.description\u003e\n                variables:\n                  - name: var1\n                    type: String\n                    value: val1\n                  - name: var2\n                    type: String\n                    value: val2\n              type: Kubernetes\n            gitOpsEnabled: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level service\n\n\n\n```sh\n $ pulumi import harness:platform/service:Service example \u003cservice_id\u003e\n```\n\n Import org level service\n\n\n\n```sh\n $ pulumi import harness:platform/service:Service example \u003corg_id\u003e/\u003cservice_id\u003e\n```\n\n Import project level service\n\n\n\n```sh\n $ pulumi import harness:platform/service:Service example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cservice_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of service\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Service YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "forceDelete",
                "identifier",
                "name",
                "yaml"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of service\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Service YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "forceDelete": {
                        "type": "string",
                        "description": "Enable this flag for force deletion of service\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Service YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/serviceAccount:ServiceAccount": {
            "description": "Resource for creating service account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.ServiceAccount(\"example\", {\n    accountId: \"account_id\",\n    description: \"test\",\n    email: \"email@service.harness.io\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.ServiceAccount(\"example\",\n    account_id=\"account_id\",\n    description=\"test\",\n    email=\"email@service.harness.io\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.ServiceAccount(\"example\", new()\n    {\n        AccountId = \"account_id\",\n        Description = \"test\",\n        Email = \"email@service.harness.io\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewServiceAccount(ctx, \"example\", \u0026platform.ServiceAccountArgs{\n\t\t\tAccountId:   pulumi.String(\"account_id\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tEmail:       pulumi.String(\"email@service.harness.io\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ServiceAccount;\nimport com.pulumi.harness.platform.ServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ServiceAccount(\"example\", ServiceAccountArgs.builder()        \n            .accountId(\"account_id\")\n            .description(\"test\")\n            .email(\"email@service.harness.io\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:ServiceAccount\n    properties:\n      accountId: account_id\n      description: test\n      email: email@service.harness.io\n      identifier: identifier\n      tags:\n        - foo:bar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level service account\n\n```sh\n $ pulumi import harness:platform/serviceAccount:ServiceAccount example \u003cservice_account_id\u003e\n```\n\n Import org level service account\n\n```sh\n $ pulumi import harness:platform/serviceAccount:ServiceAccount example \u003cord_id\u003e/\u003cservice_account_id\u003e\n```\n\n Import project level service account\n\n```sh\n $ pulumi import harness:platform/serviceAccount:ServiceAccount example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cservice_account_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email of the Service Account.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "accountId",
                "email",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email of the Service Account.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "email",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the Entity.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of the Service Account.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/slo:Slo": {
            "description": "Resource for creating an SLO.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Slo;\nimport com.pulumi.harness.platform.SloArgs;\nimport com.pulumi.harness.platform.inputs.SloRequestArgs;\nimport com.pulumi.harness.platform.inputs.SloRequestSloTargetArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Slo(\"example\", SloArgs.builder()        \n            .accountId(\"account_id\")\n            .orgId(\"default\")\n            .projectId(\"default_project\")\n            .identifier(\"TerraformSLO\")\n            .request(SloRequestArgs.builder()\n                .name(\"TSLO\")\n                .description(\"description\")\n                .tags(                \n                    \"foo:bar\",\n                    \"bar:foo\")\n                .userJourneyRefs(                \n                    \"one\",\n                    \"two\")\n                .sloTarget(SloRequestSloTargetArgs.builder()\n                    .type(\"Rolling\")\n                    .sloTargetPercentage(10)\n                    .spec(serializeJson(\n                        jsonObject(\n                            jsonProperty(\"periodLength\", \"28d\")\n                        )))\n                    .build())\n                .type(\"Simple\")\n                .spec(serializeJson(\n                    jsonObject(\n                        jsonProperty(\"monitoredServiceRef\", \"monitoredServiceRef\"),\n                        jsonProperty(\"healthSourceRef\", \"healthSourceRef\"),\n                        jsonProperty(\"serviceLevelIndicatorType\", \"serviceLevelIndicatorType\")\n                    )))\n                .notificationRuleRefs(SloRequestNotificationRuleRefArgs.builder()\n                    .notificationRuleRef(\"notification_rule_ref\")\n                    .enabled(true)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Slo\n    properties:\n      accountId: account_id\n      orgId: default\n      projectId: default_project\n      identifier: TerraformSLO\n      request:\n        name: TSLO\n        description: description\n        tags:\n          - foo:bar\n          - bar:foo\n        userJourneyRefs:\n          - one\n          - two\n        sloTarget:\n          type: Rolling\n          sloTargetPercentage: 10\n          spec:\n            fn::toJSON:\n              periodLength: 28d\n        type: Simple\n        spec:\n          fn::toJSON:\n            monitoredServiceRef: monitoredServiceRef\n            healthSourceRef: healthSourceRef\n            serviceLevelIndicatorType: serviceLevelIndicatorType\n        notificationRuleRefs:\n          - notificationRuleRef: notification_rule_ref\n            enabled: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level SLO\n\n```sh\n $ pulumi import harness:platform/slo:Slo example \u003cslo_id\u003e\n```\n\n Import organization level SLO\n\n```sh\n $ pulumi import harness:platform/slo:Slo example \u003corg_id\u003e/\u003cslo_id\u003e\n```\n\n Import project level SLO\n\n```sh\n $ pulumi import harness:platform/slo:Slo example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cslo_id\u003e\n```\n\n ",
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the SLO.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Identifier of the organization in which the SLO is configured.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Identifier of the project in which the SLO is configured.\n"
                },
                "request": {
                    "$ref": "#/types/harness:platform/SloRequest:SloRequest",
                    "description": "Request for creating or updating SLO.\n"
                }
            },
            "required": [
                "identifier",
                "orgId",
                "projectId"
            ],
            "inputProperties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the SLO.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Identifier of the organization in which the SLO is configured.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Identifier of the project in which the SLO is configured.\n"
                },
                "request": {
                    "$ref": "#/types/harness:platform/SloRequest:SloRequest",
                    "description": "Request for creating or updating SLO.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Slo resources.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the SLO.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Identifier of the organization in which the SLO is configured.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier of the project in which the SLO is configured.\n"
                    },
                    "request": {
                        "$ref": "#/types/harness:platform/SloRequest:SloRequest",
                        "description": "Request for creating or updating SLO.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/splunkConnector:SplunkConnector": {
            "description": "Resource for creating a Splunk connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.SplunkConnector(\"test\", {\n    accountId: \"splunk_account_id\",\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    passwordRef: \"account.secret_id\",\n    tags: [\"foo:bar\"],\n    url: \"https://splunk.com/\",\n    username: \"username\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.SplunkConnector(\"test\",\n    account_id=\"splunk_account_id\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    password_ref=\"account.secret_id\",\n    tags=[\"foo:bar\"],\n    url=\"https://splunk.com/\",\n    username=\"username\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.SplunkConnector(\"test\", new()\n    {\n        AccountId = \"splunk_account_id\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        PasswordRef = \"account.secret_id\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://splunk.com/\",\n        Username = \"username\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSplunkConnector(ctx, \"test\", \u0026platform.SplunkConnectorArgs{\n\t\t\tAccountId: pulumi.String(\"splunk_account_id\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl:      pulumi.String(\"https://splunk.com/\"),\n\t\t\tUsername: pulumi.String(\"username\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SplunkConnector;\nimport com.pulumi.harness.platform.SplunkConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new SplunkConnector(\"test\", SplunkConnectorArgs.builder()        \n            .accountId(\"splunk_account_id\")\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .passwordRef(\"account.secret_id\")\n            .tags(\"foo:bar\")\n            .url(\"https://splunk.com/\")\n            .username(\"username\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:SplunkConnector\n    properties:\n      accountId: splunk_account_id\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      passwordRef: account.secret_id\n      tags:\n        - foo:bar\n      url: https://splunk.com/\n      username: username\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level splunk connector\n\n\n\n```sh\n $ pulumi import harness:platform/splunkConnector:SplunkConnector example \u003cconnector_id\u003e\n```\n\n Import org level splunk connector\n\n\n\n```sh\n $ pulumi import harness:platform/splunkConnector:SplunkConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level splunk connector\n\n\n\n```sh\n $ pulumi import harness:platform/splunkConnector:SplunkConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Splunk account id.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the Splunk password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Splunk server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for connecting to Splunk.\n"
                }
            },
            "required": [
                "accountId",
                "identifier",
                "name",
                "passwordRef",
                "url",
                "username"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Splunk account id.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the Splunk password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Splunk server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for connecting to Splunk.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "identifier",
                "passwordRef",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SplunkConnector resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Splunk account id.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "The reference to the Harness secret containing the Splunk password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Splunk server.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username used for connecting to Splunk.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/sumologicConnector:SumologicConnector": {
            "description": "Resource for creating a Sumologic connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.SumologicConnector(\"test\", {\n    accessIdRef: \"account.secret_id\",\n    accessKeyRef: \"account.secret_id\",\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    tags: [\"foo:bar\"],\n    url: \"https://api.us2.sumologic.com/\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.SumologicConnector(\"test\",\n    access_id_ref=\"account.secret_id\",\n    access_key_ref=\"account.secret_id\",\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    tags=[\"foo:bar\"],\n    url=\"https://api.us2.sumologic.com/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.SumologicConnector(\"test\", new()\n    {\n        AccessIdRef = \"account.secret_id\",\n        AccessKeyRef = \"account.secret_id\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://api.us2.sumologic.com/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSumologicConnector(ctx, \"test\", \u0026platform.SumologicConnectorArgs{\n\t\t\tAccessIdRef:  pulumi.String(\"account.secret_id\"),\n\t\t\tAccessKeyRef: pulumi.String(\"account.secret_id\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://api.us2.sumologic.com/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SumologicConnector;\nimport com.pulumi.harness.platform.SumologicConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new SumologicConnector(\"test\", SumologicConnectorArgs.builder()        \n            .accessIdRef(\"account.secret_id\")\n            .accessKeyRef(\"account.secret_id\")\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .tags(\"foo:bar\")\n            .url(\"https://api.us2.sumologic.com/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:SumologicConnector\n    properties:\n      accessIdRef: account.secret_id\n      accessKeyRef: account.secret_id\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      tags:\n        - foo:bar\n      url: https://api.us2.sumologic.com/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level sumologic connector\n\n\n\n```sh\n $ pulumi import harness:platform/sumologicConnector:SumologicConnector example \u003cconnector_id\u003e\n```\n\n Import org level sumologic connector\n\n\n\n```sh\n $ pulumi import harness:platform/sumologicConnector:SumologicConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level sumologic connector\n\n\n\n```sh\n $ pulumi import harness:platform/sumologicConnector:SumologicConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "accessIdRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "accessKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the SumoLogic server.\n"
                }
            },
            "required": [
                "accessIdRef",
                "accessKeyRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "accessIdRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "accessKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the SumoLogic server.\n"
                }
            },
            "requiredInputs": [
                "accessIdRef",
                "accessKeyRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SumologicConnector resources.\n",
                "properties": {
                    "accessIdRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the access id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "accessKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the SumoLogic server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/template:Template": {
            "description": "Resource for creating a Template.\n\n## Remote Pipeline template\n\nresource \"harness.platform.Template\" \"pipeline_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"main\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Pipeline\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    stages:\n      - stage:\n          identifier: dvvdvd\n          name: dvvdvd\n          description: \"\"\n          type: Deployment\n          spec:\n            deploymentType: Kubernetes\n            service:\n              serviceRef: \u003c+input\u003e\n              serviceInputs: \u003c+input\u003e\n            environment:\n              environmentRef: \u003c+input\u003e\n              deployToAll: false\n              environmentInputs: \u003c+input\u003e\n              serviceOverrideInputs: \u003c+input\u003e\n              infrastructureDefinitions: \u003c+input\u003e\n            execution:\n              steps:\n                - step:\n                    name: Rollout Deployment\n                    identifier: rolloutDeployment\n                    type: K8sRollingDeploy\n                    timeout: 10m\n                    spec:\n                      skipDryRun: false\n                      pruningEnabled: false\n              rollbackSteps:\n                - step:\n                    name: Rollback Rollout Deployment\n                    identifier: rollbackRolloutDeployment\n                    type: K8sRollingRollback\n                    timeout: 10m\n                    spec:\n                      pruningEnabled: false\n          tags: {}\n          failureStrategies:\n            - onFailure:\n                errors:\n                  - AllErrors\n                action:\n                  type: StageRollback\n\n  EOT\n}\n\n## Inline Pipeline template\n\nresource \"harness.platform.Template\" \"pipeline_template_inline\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Pipeline\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    stages:\n      - stage:\n          identifier: dvvdvd\n          name: dvvdvd\n          description: \"\"\n          type: Deployment\n          spec:\n            deploymentType: Kubernetes\n            service:\n              serviceRef: \u003c+input\u003e\n              serviceInputs: \u003c+input\u003e\n            environment:\n              environmentRef: \u003c+input\u003e\n              deployToAll: false\n              environmentInputs: \u003c+input\u003e\n              serviceOverrideInputs: \u003c+input\u003e\n              infrastructureDefinitions: \u003c+input\u003e\n            execution:\n              steps:\n                - step:\n                    name: Rollout Deployment\n                    identifier: rolloutDeployment\n                    type: K8sRollingDeploy\n                    timeout: 10m\n                    spec:\n                      skipDryRun: false\n                      pruningEnabled: false\n              rollbackSteps:\n                - step:\n                    name: Rollback Rollout Deployment\n                    identifier: rollbackRolloutDeployment\n                    type: K8sRollingRollback\n                    timeout: 10m\n                    spec:\n                      pruningEnabled: false\n          tags: {}\n          failureStrategies:\n            - onFailure:\n                errors:\n                  - AllErrors\n                action:\n                  type: StageRollback\n    \n  EOT\n}\n\n## Inline Step template\n\nresource \"harness.platform.Template\" \"step_template_inline\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Step\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    timeout: 10m\n    type: ShellScript\n    spec:\n      shell: Bash\n      onDelegate: true\n      source:\n        type: Inline\n        spec:\n          script: \u003c+input\u003e\n      environmentVariables: []\n      outputVariables: []\n\n  EOT\n}\n\n## Remote Step template\n\nresource \"harness.platform.Template\" \"step_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"main\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Step\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    timeout: 10m\n    type: ShellScript\n    spec:\n      shell: Bash\n      onDelegate: true\n      source:\n        type: Inline\n        spec:\n          script: \u003c+input\u003e\n      environmentVariables: []\n      outputVariables: []\n\n  EOT\n}\n\n## Inline Stage template\n\nresource \"harness.platform.Template\" \"stage_template_inline\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Stage\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    type: Deployment\n    spec:\n      deploymentType: Kubernetes\n      service:\n        serviceRef: \u003c+input\u003e\n        serviceInputs: \u003c+input\u003e\n      environment:\n        environmentRef: \u003c+input\u003e\n        deployToAll: false\n        environmentInputs: \u003c+input\u003e\n        infrastructureDefinitions: \u003c+input\u003e\n      execution:\n        steps:\n          - step:\n              type: ShellScript\n              name: Shell Script_1\n              identifier: ShellScript_1\n              spec:\n                shell: Bash\n                onDelegate: true\n                source:\n                  type: Inline\n                  spec:\n                    script: \u003c+input\u003e\n                environmentVariables: []\n                outputVariables: []\n              timeout: \u003c+input\u003e\n        rollbackSteps: []\n    failureStrategies:\n      - onFailure:\n          errors:\n            - AllErrors\n          action:\n            type: StageRollback\n\n  EOT\n}\n\n## Remote Stage template\n\nresource \"harness.platform.Template\" \"stage_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"main\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Stage\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    type: Deployment\n    spec:\n      deploymentType: Kubernetes\n      service:\n        serviceRef: \u003c+input\u003e\n        serviceInputs: \u003c+input\u003e\n      environment:\n        environmentRef: \u003c+input\u003e\n        deployToAll: false\n        environmentInputs: \u003c+input\u003e\n        infrastructureDefinitions: \u003c+input\u003e\n      execution:\n        steps:\n          - step:\n              type: ShellScript\n              name: Shell Script_1\n              identifier: ShellScript_1\n              spec:\n                shell: Bash\n                onDelegate: true\n                source:\n                  type: Inline\n                  spec:\n                    script: \u003c+input\u003e\n                environmentVariables: []\n                outputVariables: []\n              timeout: \u003c+input\u003e\n        rollbackSteps: []\n    failureStrategies:\n      - onFailure:\n          errors:\n            - AllErrors\n          action:\n            type: StageRollback\n\n  EOT\n}\n\n## Inline StepGroup template\n\nresource \"harness.platform.Template\" \"stepgroup_template_inline\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: StepGroup\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    stageType: Deployment\n    steps:\n      - step:\n          type: ShellScript\n          name: Shell Script_1\n          identifier: ShellScript_1\n          spec:\n            shell: Bash\n            onDelegate: true\n            source:\n              type: Inline\n              spec:\n                script: \u003c+input\u003e\n            environmentVariables: []\n            outputVariables: []\n          timeout: 10m\n\n  EOT\n}\n\n## Remote StepGroup template\n\nresource \"harness.platform.Template\" \"stepgroup_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"main\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: StepGroup\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    stageType: Deployment\n    steps:\n      - step:\n          type: ShellScript\n          name: Shell Script_1\n          identifier: ShellScript_1\n          spec:\n            shell: Bash\n            onDelegate: true\n            source:\n              type: Inline\n              spec:\n                script: \u003c+input\u003e\n            environmentVariables: []\n            outputVariables: []\n          timeout: 10m\n\n  EOT\n}\n\n## Inline Monitered Service template\n\nresource \"harness.platform.Template\" \"monitered_service_template_inline\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: MonitoredService\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    serviceRef: \u003c+input\u003e\n    environmentRef: \u003c+input\u003e\n    type: Application\n    sources:\n      changeSources:\n        - name: Harness CD Next Gen\n          identifier: harness_cd_next_gen\n          type: HarnessCDNextGen\n          enabled: true\n          category: Deployment\n          spec: {}\n      healthSources:\n        - name: health\n          identifier: health\n          type: AppDynamics\n          spec:\n            applicationName: \u003c+input\u003e\n            tierName: \u003c+input\u003e\n            metricData:\n              Errors: true\n              Performance: true\n            metricDefinitions: []\n            feature: Application Monitoring\n            connectorRef: \u003c+input\u003e\n            metricPacks:\n              - identifier: Errors\n              - identifier: Performance\n\n  EOT\n}\n\n## Artifact Source template\n\nresource \"harness.platform.Template\" \"artifact_source_template\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: ArtifactSource\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    type: DockerRegistry\n    spec:\n      imagePath: library/nginx\n      tag: \u003c+input\u003e\n      connectorRef: account.Harness_DockerHub\n\n  EOT\n}\n\n## Deployment template\n\nresource \"harness.platform.Template\" \"deployment_template\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: CustomDeployment\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    infrastructure:\n      variables:\n        - name: kubeConnector\n          type: Connector\n          value: \u003c+input\u003e\n          description: \"\"\n      fetchInstancesScript:\n        store:\n          type: Inline\n          spec:\n            content: |\n              #\n              # Script is expected to query Infrastructure and dump json\n              # in $INSTANCE_OUTPUT_PATH file path\n              #\n              # Harness is expected to initialize ${INSTANCE_OUTPUT_PATH}\n              # environment variable - a random unique file path on delegate,\n              # so script execution can save the result.\n              #\n              /opt/harness-delegate/client-tools/kubectl/v1.19.2/kubectl get pods --namespace=harness-delegate-ng -o json \u003e $INSTANCE_OUTPUT_PATH\n      instanceAttributes:\n        - name: instancename\n          jsonPath: metadata.name\n          description: \"\"\n      instancesListPath: items\n    execution:\n      stepTemplateRefs: []\n\n  EOT\n}\n\n\n## Import\n\nImport account level template\n\n```sh\n $ pulumi import harness:platform/template:Template example \u003ctemplate_id\u003e\n```\n\n Import org level template\n\n```sh\n $ pulumi import harness:platform/template:Template example \u003cord_id\u003e/\u003ctemplate_id\u003e\n```\n\n Import project level template\n\n```sh\n $ pulumi import harness:platform/template:Template example \u003corg_id\u003e/\u003cproject_id\u003e/\u003ctemplate_id\u003e\n```\n\n ",
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Specify comment with respect to changes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of template\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/TemplateGitDetails:TemplateGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "isStable": {
                    "type": "boolean",
                    "description": "True if given version for template to be set as stable.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "templateYaml": {
                    "type": "string",
                    "description": "Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version Label for Template.\n"
                }
            },
            "required": [
                "forceDelete",
                "gitDetails",
                "identifier",
                "name",
                "templateYaml"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string",
                    "description": "Specify comment with respect to changes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of template\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/TemplateGitDetails:TemplateGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "isStable": {
                    "type": "boolean",
                    "description": "True if given version for template to be set as stable.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "templateYaml": {
                    "type": "string",
                    "description": "Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version Label for Template.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "templateYaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Template resources.\n",
                "properties": {
                    "comments": {
                        "type": "string",
                        "description": "Specify comment with respect to changes.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "forceDelete": {
                        "type": "string",
                        "description": "Enable this flag for force deletion of template\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/TemplateGitDetails:TemplateGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "isStable": {
                        "type": "boolean",
                        "description": "True if given version for template to be set as stable.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "templateYaml": {
                        "type": "string",
                        "description": "Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version Label for Template.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/templateFilters:TemplateFilters": {
            "description": "Resource for creating a Harness Template Filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.TemplateFilters(\"test\", {\n    filterProperties: {\n        filterType: \"Template\",\n        tags: [\"foo:bar\"],\n    },\n    filterVisibility: \"EveryOne\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"Template\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.TemplateFilters(\"test\",\n    filter_properties=harness.platform.TemplateFiltersFilterPropertiesArgs(\n        filter_type=\"Template\",\n        tags=[\"foo:bar\"],\n    ),\n    filter_visibility=\"EveryOne\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"Template\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.TemplateFilters(\"test\", new()\n    {\n        FilterProperties = new Harness.Platform.Inputs.TemplateFiltersFilterPropertiesArgs\n        {\n            FilterType = \"Template\",\n            Tags = new[]\n            {\n                \"foo:bar\",\n            },\n        },\n        FilterVisibility = \"EveryOne\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"Template\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewTemplateFilters(ctx, \"test\", \u0026platform.TemplateFiltersArgs{\n\t\t\tFilterProperties: \u0026platform.TemplateFiltersFilterPropertiesArgs{\n\t\t\t\tFilterType: pulumi.String(\"Template\"),\n\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilterVisibility: pulumi.String(\"EveryOne\"),\n\t\t\tIdentifier:       pulumi.String(\"identifier\"),\n\t\t\tOrgId:            pulumi.String(\"org_id\"),\n\t\t\tProjectId:        pulumi.String(\"project_id\"),\n\t\t\tType:             pulumi.String(\"Template\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.TemplateFilters;\nimport com.pulumi.harness.platform.TemplateFiltersArgs;\nimport com.pulumi.harness.platform.inputs.TemplateFiltersFilterPropertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new TemplateFilters(\"test\", TemplateFiltersArgs.builder()        \n            .filterProperties(TemplateFiltersFilterPropertiesArgs.builder()\n                .filterType(\"Template\")\n                .tags(\"foo:bar\")\n                .build())\n            .filterVisibility(\"EveryOne\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"Template\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:TemplateFilters\n    properties:\n      filterProperties:\n        filterType: Template\n        tags:\n          - foo:bar\n      filterVisibility: EveryOne\n      identifier: identifier\n      orgId: org_id\n      projectId: project_id\n      type: Template\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level template filter\n\n```sh\n $ pulumi import harness:platform/templateFilters:TemplateFilters example \u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n Import org level template filter\n\n```sh\n $ pulumi import harness:platform/templateFilters:TemplateFilters example \u003corg_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n Import project level template filter\n\n```sh\n $ pulumi import harness:platform/templateFilters:TemplateFilters example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n ",
            "properties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/TemplateFiltersFilterProperties:TemplateFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the template filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of template filters. Currently supported types are { Template}\n"
                }
            },
            "required": [
                "filterProperties",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/TemplateFiltersFilterProperties:TemplateFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the template filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of template filters. Currently supported types are { Template}\n"
                }
            },
            "requiredInputs": [
                "filterProperties",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TemplateFilters resources.\n",
                "properties": {
                    "filterProperties": {
                        "$ref": "#/types/harness:platform/TemplateFiltersFilterProperties:TemplateFiltersFilterProperties",
                        "description": "Properties of the filters entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the template filters.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of template filters. Currently supported types are { Template}\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/triggers:Triggers": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst example = new harness.platform.Triggers(\"example\", {\n    identifier: \"identifier\",\n    orgId: \"orgIdentifer\",\n    projectId: \"projectIdentifier\",\n    targetId: \"pipelineIdentifier\",\n    yaml: `  trigger:\n    name: \"name\"\n    identifier: \"identifier\"\n    enabled: true\n    description: \"\"\n    tags: {}\n    projectIdentifier: \"projectIdentifier\"\n    orgIdentifier: \"orgIdentifer\"\n    pipelineIdentifier: \"pipelineIdentifier\"\n    source:\n      type: \"Webhook\"\n      spec:\n        type: \"Github\"\n        spec:\n          type: \"Push\"\n          spec:\n            connectorRef: \"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\n            autoAbortPreviousExecutions: false\n            payloadConditions:\n            - key: \"changedFiles\"\n              operator: \"Equals\"\n              value: \"value\"\n            - key: \"targetBranch\"\n              operator: \"Equals\"\n              value: \"value\"\n            headerConditions: []\n            repoName: \"repoName\"\n            actions: []\n    inputYaml: \"pipeline: {}\\\\n\"\n\n`,\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample = harness.platform.Triggers(\"example\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifer\",\n    project_id=\"projectIdentifier\",\n    target_id=\"pipelineIdentifier\",\n    yaml=\"\"\"  trigger:\n    name: \"name\"\n    identifier: \"identifier\"\n    enabled: true\n    description: \"\"\n    tags: {}\n    projectIdentifier: \"projectIdentifier\"\n    orgIdentifier: \"orgIdentifer\"\n    pipelineIdentifier: \"pipelineIdentifier\"\n    source:\n      type: \"Webhook\"\n      spec:\n        type: \"Github\"\n        spec:\n          type: \"Push\"\n          spec:\n            connectorRef: \"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\n            autoAbortPreviousExecutions: false\n            payloadConditions:\n            - key: \"changedFiles\"\n              operator: \"Equals\"\n              value: \"value\"\n            - key: \"targetBranch\"\n              operator: \"Equals\"\n              value: \"value\"\n            headerConditions: []\n            repoName: \"repoName\"\n            actions: []\n    inputYaml: \"pipeline: {}\\n\"\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Triggers(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifer\",\n        ProjectId = \"projectIdentifier\",\n        TargetId = \"pipelineIdentifier\",\n        Yaml = @\"  trigger:\n    name: \"\"name\"\"\n    identifier: \"\"identifier\"\"\n    enabled: true\n    description: \"\"\"\"\n    tags: {}\n    projectIdentifier: \"\"projectIdentifier\"\"\n    orgIdentifier: \"\"orgIdentifer\"\"\n    pipelineIdentifier: \"\"pipelineIdentifier\"\"\n    source:\n      type: \"\"Webhook\"\"\n      spec:\n        type: \"\"Github\"\"\n        spec:\n          type: \"\"Push\"\"\n          spec:\n            connectorRef: \"\"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\"\n            autoAbortPreviousExecutions: false\n            payloadConditions:\n            - key: \"\"changedFiles\"\"\n              operator: \"\"Equals\"\"\n              value: \"\"value\"\"\n            - key: \"\"targetBranch\"\"\n              operator: \"\"Equals\"\"\n              value: \"\"value\"\"\n            headerConditions: []\n            repoName: \"\"repoName\"\"\n            actions: []\n    inputYaml: \"\"pipeline: {}\\n\"\"\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewTriggers(ctx, \"example\", \u0026platform.TriggersArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifer\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t\tTargetId:   pulumi.String(\"pipelineIdentifier\"),\n\t\t\tYaml:       pulumi.String(\"  trigger:\\n    name: \\\"name\\\"\\n    identifier: \\\"identifier\\\"\\n    enabled: true\\n    description: \\\"\\\"\\n    tags: {}\\n    projectIdentifier: \\\"projectIdentifier\\\"\\n    orgIdentifier: \\\"orgIdentifer\\\"\\n    pipelineIdentifier: \\\"pipelineIdentifier\\\"\\n    source:\\n      type: \\\"Webhook\\\"\\n      spec:\\n        type: \\\"Github\\\"\\n        spec:\\n          type: \\\"Push\\\"\\n          spec:\\n            connectorRef: \\\"account.TestAccResourceConnectorGithub_Ssh_IZBeG\\\"\\n            autoAbortPreviousExecutions: false\\n            payloadConditions:\\n            - key: \\\"changedFiles\\\"\\n              operator: \\\"Equals\\\"\\n              value: \\\"value\\\"\\n            - key: \\\"targetBranch\\\"\\n              operator: \\\"Equals\\\"\\n              value: \\\"value\\\"\\n            headerConditions: []\\n            repoName: \\\"repoName\\\"\\n            actions: []\\n    inputYaml: \\\"pipeline: {}\\\\n\\\"\\n\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Triggers;\nimport com.pulumi.harness.platform.TriggersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Triggers(\"example\", TriggersArgs.builder()        \n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifer\")\n            .projectId(\"projectIdentifier\")\n            .targetId(\"pipelineIdentifier\")\n            .yaml(\"\"\"\n  trigger:\n    name: \"name\"\n    identifier: \"identifier\"\n    enabled: true\n    description: \"\"\n    tags: {}\n    projectIdentifier: \"projectIdentifier\"\n    orgIdentifier: \"orgIdentifer\"\n    pipelineIdentifier: \"pipelineIdentifier\"\n    source:\n      type: \"Webhook\"\n      spec:\n        type: \"Github\"\n        spec:\n          type: \"Push\"\n          spec:\n            connectorRef: \"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\n            autoAbortPreviousExecutions: false\n            payloadConditions:\n            - key: \"changedFiles\"\n              operator: \"Equals\"\n              value: \"value\"\n            - key: \"targetBranch\"\n              operator: \"Equals\"\n              value: \"value\"\n            headerConditions: []\n            repoName: \"repoName\"\n            actions: []\n    inputYaml: \"pipeline: {}\\n\"\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Triggers\n    properties:\n      identifier: identifier\n      orgId: orgIdentifer\n      projectId: projectIdentifier\n      targetId: pipelineIdentifier\n      yaml: |2+\n          trigger:\n            name: \"name\"\n            identifier: \"identifier\"\n            enabled: true\n            description: \"\"\n            tags: {}\n            projectIdentifier: \"projectIdentifier\"\n            orgIdentifier: \"orgIdentifer\"\n            pipelineIdentifier: \"pipelineIdentifier\"\n            source:\n              type: \"Webhook\"\n              spec:\n                type: \"Github\"\n                spec:\n                  type: \"Push\"\n                  spec:\n                    connectorRef: \"account.TestAccResourceConnectorGithub_Ssh_IZBeG\"\n                    autoAbortPreviousExecutions: false\n                    payloadConditions:\n                    - key: \"changedFiles\"\n                      operator: \"Equals\"\n                      value: \"value\"\n                    - key: \"targetBranch\"\n                      operator: \"Equals\"\n                      value: \"value\"\n                    headerConditions: []\n                    repoName: \"repoName\"\n                    actions: []\n            inputYaml: \"pipeline: {}\\n\"\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport trigger\n\n\n\n```sh\n $ pulumi import harness:platform/triggers:Triggers example \u003corg_id\u003e/\u003cproject_id\u003e/\u003ctarget_id\u003e/\u003ctriggers_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "ifMatch": {
                    "type": "string",
                    "description": "if-Match\n"
                },
                "ignoreError": {
                    "type": "boolean",
                    "description": "ignore error default false\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "Identifier of the target pipeline\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "trigger yaml. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "orgId",
                "projectId",
                "targetId",
                "yaml"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "ifMatch": {
                    "type": "string",
                    "description": "if-Match\n"
                },
                "ignoreError": {
                    "type": "boolean",
                    "description": "ignore error default false\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "Identifier of the target pipeline\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "trigger yaml. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId",
                "targetId",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Triggers resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "ifMatch": {
                        "type": "string",
                        "description": "if-Match\n"
                    },
                    "ignoreError": {
                        "type": "boolean",
                        "description": "ignore error default false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "Identifier of the target pipeline\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "trigger yaml. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/user:User": {
            "description": "Resource for creating a Harness User. This requires your authentication mechanism to be set to SAML, LDAP, or OAuth, and the feature flag AUTO_ACCEPT_SAML_ACCOUNT_INVITES to be enabled.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\n// Create user at account level\nconst example = new harness.platform.User(\"example\", {\n    email: \"john.doe@harness.io\",\n    roleBindings: [{\n        managedRole: true,\n        resourceGroupIdentifier: \"_all_project_level_resources\",\n        resourceGroupName: \"All Project Level Resources\",\n        roleIdentifier: \"_project_viewer\",\n        roleName: \"Project Viewer\",\n    }],\n    userGroups: [\"_project_all_users\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\n# Create user at account level\nexample = harness.platform.User(\"example\",\n    email=\"john.doe@harness.io\",\n    role_bindings=[harness.platform.UserRoleBindingArgs(\n        managed_role=True,\n        resource_group_identifier=\"_all_project_level_resources\",\n        resource_group_name=\"All Project Level Resources\",\n        role_identifier=\"_project_viewer\",\n        role_name=\"Project Viewer\",\n    )],\n    user_groups=[\"_project_all_users\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create user at account level\n    var example = new Harness.Platform.User(\"example\", new()\n    {\n        Email = \"john.doe@harness.io\",\n        RoleBindings = new[]\n        {\n            new Harness.Platform.Inputs.UserRoleBindingArgs\n            {\n                ManagedRole = true,\n                ResourceGroupIdentifier = \"_all_project_level_resources\",\n                ResourceGroupName = \"All Project Level Resources\",\n                RoleIdentifier = \"_project_viewer\",\n                RoleName = \"Project Viewer\",\n            },\n        },\n        UserGroups = new[]\n        {\n            \"_project_all_users\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewUser(ctx, \"example\", \u0026platform.UserArgs{\n\t\t\tEmail: pulumi.String(\"john.doe@harness.io\"),\n\t\t\tRoleBindings: platform.UserRoleBindingArray{\n\t\t\t\t\u0026platform.UserRoleBindingArgs{\n\t\t\t\t\tManagedRole:             pulumi.Bool(true),\n\t\t\t\t\tResourceGroupIdentifier: pulumi.String(\"_all_project_level_resources\"),\n\t\t\t\t\tResourceGroupName:       pulumi.String(\"All Project Level Resources\"),\n\t\t\t\t\tRoleIdentifier:          pulumi.String(\"_project_viewer\"),\n\t\t\t\t\tRoleName:                pulumi.String(\"Project Viewer\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUserGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"_project_all_users\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.User;\nimport com.pulumi.harness.platform.UserArgs;\nimport com.pulumi.harness.platform.inputs.UserRoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()        \n            .email(\"john.doe@harness.io\")\n            .roleBindings(UserRoleBindingArgs.builder()\n                .managedRole(true)\n                .resourceGroupIdentifier(\"_all_project_level_resources\")\n                .resourceGroupName(\"All Project Level Resources\")\n                .roleIdentifier(\"_project_viewer\")\n                .roleName(\"Project Viewer\")\n                .build())\n            .userGroups(\"_project_all_users\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create user at account level\n  example:\n    type: harness:platform:User\n    properties:\n      email: john.doe@harness.io\n      roleBindings:\n        - managedRole: true\n          resourceGroupIdentifier: _all_project_level_resources\n          resourceGroupName: All Project Level Resources\n          roleIdentifier: _project_viewer\n          roleName: Project Viewer\n      userGroups:\n        - _project_all_users\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level\n\n```sh\n $ pulumi import harness:platform/user:User john_doe \u003cemail_id\u003e\n```\n\n Import org level\n\n\n\n```sh\n $ pulumi import harness:platform/user:User john_doe \u003cemail_id\u003e/\u003corg_id\u003e\n```\n\n Import project level\n\n```sh\n $ pulumi import harness:platform/user:User john_doe \u003cemail_id\u003e/\u003corg_id\u003e/\u003cproject_id\u003e\n```\n\n ",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Whether or not the user account is disabled.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "externallyManaged": {
                    "type": "boolean",
                    "description": "Whether or not the user account is externally managed.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the user.\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Whether or not the user account is locked.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the user.\n"
                },
                "roleBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/UserRoleBinding:UserRoleBinding"
                    },
                    "description": "Role Bindings of the user. Cannot be updated.\n"
                },
                "userGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The user group of the user. Cannot be updated.\n"
                }
            },
            "required": [
                "disabled",
                "email",
                "externallyManaged",
                "identifier",
                "locked",
                "name",
                "userGroups"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the user.\n"
                },
                "roleBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/UserRoleBinding:UserRoleBinding"
                    },
                    "description": "Role Bindings of the user. Cannot be updated.\n"
                },
                "userGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The user group of the user. Cannot be updated.\n"
                }
            },
            "requiredInputs": [
                "email",
                "userGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "disabled": {
                        "type": "boolean",
                        "description": "Whether or not the user account is disabled.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "externallyManaged": {
                        "type": "boolean",
                        "description": "Whether or not the user account is externally managed.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the user.\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Whether or not the user account is locked.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the user.\n"
                    },
                    "roleBindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/UserRoleBinding:UserRoleBinding"
                        },
                        "description": "Role Bindings of the user. Cannot be updated.\n"
                    },
                    "userGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The user group of the user. Cannot be updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/usergroup:Usergroup": {
            "description": "Resource for creating a Harness User Group. Linking SSO providers with User Groups:\n\n\t\tThe following fields need to be populated for LDAP SSO Providers:\n\t\t\n\t\t- linked_sso_id\n\t\t\n\t\t- linked_sso_display_name\n\t\t\n\t\t- sso_group_id\n\t\t\n\t\t- sso_group_name\n\t\t\n\t\t- linked_sso_type\n\t\t\n\t\t- sso_linked\n\t\t\n\t\tThe following fields need to be populated for SAML SSO Providers:\n\t\t\n\t\t- linked_sso_id\n\t\t\n\t\t- linked_sso_display_name\n\t\t\n\t\t- sso_group_name\n\t\t\n\t\t- sso_group_id // same as sso_group_name\n\t\t\n\t\t- linked_sso_type\n\t\t\n\t\t- sso_linked\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst ssoTypeSaml = new harness.platform.Usergroup(\"ssoTypeSaml\", {\n    externallyManaged: false,\n    identifier: \"identifier\",\n    linkedSsoDisplayName: \"linked_sso_display_name\",\n    linkedSsoId: \"linked_sso_id\",\n    linkedSsoType: \"SAML\",\n    notificationConfigs: [\n        {\n            slackWebhookUrl: \"https://google.com\",\n            type: \"SLACK\",\n        },\n        {\n            groupEmail: \"email@email.com\",\n            sendEmailToAllUsers: true,\n            type: \"EMAIL\",\n        },\n        {\n            microsoftTeamsWebhookUrl: \"https://google.com\",\n            type: \"MSTEAMS\",\n        },\n        {\n            pagerDutyKey: \"pagerDutyKey\",\n            type: \"PAGERDUTY\",\n        },\n    ],\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    ssoGroupId: \"sso_group_name\",\n    ssoGroupName: \"sso_group_name\",\n    ssoLinked: true,\n    users: [\"user_id\"],\n});\nconst ssoTypeLdap = new harness.platform.Usergroup(\"ssoTypeLdap\", {\n    externallyManaged: false,\n    identifier: \"identifier\",\n    linkedSsoDisplayName: \"linked_sso_display_name\",\n    linkedSsoId: \"linked_sso_id\",\n    linkedSsoType: \"LDAP\",\n    notificationConfigs: [\n        {\n            slackWebhookUrl: \"https://google.com\",\n            type: \"SLACK\",\n        },\n        {\n            groupEmail: \"email@email.com\",\n            sendEmailToAllUsers: true,\n            type: \"EMAIL\",\n        },\n        {\n            microsoftTeamsWebhookUrl: \"https://google.com\",\n            type: \"MSTEAMS\",\n        },\n        {\n            pagerDutyKey: \"pagerDutyKey\",\n            type: \"PAGERDUTY\",\n        },\n    ],\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    ssoGroupId: \"sso_group_id\",\n    ssoGroupName: \"sso_group_name\",\n    ssoLinked: true,\n    users: [\"user_id\"],\n});\n// Create user group by adding user emails\nconst example = new harness.platform.Usergroup(\"example\", {\n    externallyManaged: false,\n    identifier: \"identifier\",\n    linkedSsoDisplayName: \"linked_sso_display_name\",\n    linkedSsoId: \"linked_sso_id\",\n    linkedSsoType: \"SAML\",\n    notificationConfigs: [\n        {\n            slackWebhookUrl: \"https://google.com\",\n            type: \"SLACK\",\n        },\n        {\n            groupEmail: \"email@email.com\",\n            sendEmailToAllUsers: true,\n            type: \"EMAIL\",\n        },\n        {\n            microsoftTeamsWebhookUrl: \"https://google.com\",\n            type: \"MSTEAMS\",\n        },\n        {\n            pagerDutyKey: \"pagerDutyKey\",\n            type: \"PAGERDUTY\",\n        },\n    ],\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    ssoGroupId: \"sso_group_name\",\n    ssoGroupName: \"sso_group_name\",\n    ssoLinked: true,\n    userEmails: [\"user@email.com\"],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nsso_type_saml = harness.platform.Usergroup(\"ssoTypeSaml\",\n    externally_managed=False,\n    identifier=\"identifier\",\n    linked_sso_display_name=\"linked_sso_display_name\",\n    linked_sso_id=\"linked_sso_id\",\n    linked_sso_type=\"SAML\",\n    notification_configs=[\n        harness.platform.UsergroupNotificationConfigArgs(\n            slack_webhook_url=\"https://google.com\",\n            type=\"SLACK\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            group_email=\"email@email.com\",\n            send_email_to_all_users=True,\n            type=\"EMAIL\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            microsoft_teams_webhook_url=\"https://google.com\",\n            type=\"MSTEAMS\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            pager_duty_key=\"pagerDutyKey\",\n            type=\"PAGERDUTY\",\n        ),\n    ],\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    sso_group_id=\"sso_group_name\",\n    sso_group_name=\"sso_group_name\",\n    sso_linked=True,\n    users=[\"user_id\"])\nsso_type_ldap = harness.platform.Usergroup(\"ssoTypeLdap\",\n    externally_managed=False,\n    identifier=\"identifier\",\n    linked_sso_display_name=\"linked_sso_display_name\",\n    linked_sso_id=\"linked_sso_id\",\n    linked_sso_type=\"LDAP\",\n    notification_configs=[\n        harness.platform.UsergroupNotificationConfigArgs(\n            slack_webhook_url=\"https://google.com\",\n            type=\"SLACK\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            group_email=\"email@email.com\",\n            send_email_to_all_users=True,\n            type=\"EMAIL\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            microsoft_teams_webhook_url=\"https://google.com\",\n            type=\"MSTEAMS\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            pager_duty_key=\"pagerDutyKey\",\n            type=\"PAGERDUTY\",\n        ),\n    ],\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    sso_group_id=\"sso_group_id\",\n    sso_group_name=\"sso_group_name\",\n    sso_linked=True,\n    users=[\"user_id\"])\n# Create user group by adding user emails\nexample = harness.platform.Usergroup(\"example\",\n    externally_managed=False,\n    identifier=\"identifier\",\n    linked_sso_display_name=\"linked_sso_display_name\",\n    linked_sso_id=\"linked_sso_id\",\n    linked_sso_type=\"SAML\",\n    notification_configs=[\n        harness.platform.UsergroupNotificationConfigArgs(\n            slack_webhook_url=\"https://google.com\",\n            type=\"SLACK\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            group_email=\"email@email.com\",\n            send_email_to_all_users=True,\n            type=\"EMAIL\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            microsoft_teams_webhook_url=\"https://google.com\",\n            type=\"MSTEAMS\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            pager_duty_key=\"pagerDutyKey\",\n            type=\"PAGERDUTY\",\n        ),\n    ],\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    sso_group_id=\"sso_group_name\",\n    sso_group_name=\"sso_group_name\",\n    sso_linked=True,\n    user_emails=[\"user@email.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ssoTypeSaml = new Harness.Platform.Usergroup(\"ssoTypeSaml\", new()\n    {\n        ExternallyManaged = false,\n        Identifier = \"identifier\",\n        LinkedSsoDisplayName = \"linked_sso_display_name\",\n        LinkedSsoId = \"linked_sso_id\",\n        LinkedSsoType = \"SAML\",\n        NotificationConfigs = new[]\n        {\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                SlackWebhookUrl = \"https://google.com\",\n                Type = \"SLACK\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                GroupEmail = \"email@email.com\",\n                SendEmailToAllUsers = true,\n                Type = \"EMAIL\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                MicrosoftTeamsWebhookUrl = \"https://google.com\",\n                Type = \"MSTEAMS\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                PagerDutyKey = \"pagerDutyKey\",\n                Type = \"PAGERDUTY\",\n            },\n        },\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        SsoGroupId = \"sso_group_name\",\n        SsoGroupName = \"sso_group_name\",\n        SsoLinked = true,\n        Users = new[]\n        {\n            \"user_id\",\n        },\n    });\n\n    var ssoTypeLdap = new Harness.Platform.Usergroup(\"ssoTypeLdap\", new()\n    {\n        ExternallyManaged = false,\n        Identifier = \"identifier\",\n        LinkedSsoDisplayName = \"linked_sso_display_name\",\n        LinkedSsoId = \"linked_sso_id\",\n        LinkedSsoType = \"LDAP\",\n        NotificationConfigs = new[]\n        {\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                SlackWebhookUrl = \"https://google.com\",\n                Type = \"SLACK\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                GroupEmail = \"email@email.com\",\n                SendEmailToAllUsers = true,\n                Type = \"EMAIL\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                MicrosoftTeamsWebhookUrl = \"https://google.com\",\n                Type = \"MSTEAMS\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                PagerDutyKey = \"pagerDutyKey\",\n                Type = \"PAGERDUTY\",\n            },\n        },\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        SsoGroupId = \"sso_group_id\",\n        SsoGroupName = \"sso_group_name\",\n        SsoLinked = true,\n        Users = new[]\n        {\n            \"user_id\",\n        },\n    });\n\n    // Create user group by adding user emails\n    var example = new Harness.Platform.Usergroup(\"example\", new()\n    {\n        ExternallyManaged = false,\n        Identifier = \"identifier\",\n        LinkedSsoDisplayName = \"linked_sso_display_name\",\n        LinkedSsoId = \"linked_sso_id\",\n        LinkedSsoType = \"SAML\",\n        NotificationConfigs = new[]\n        {\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                SlackWebhookUrl = \"https://google.com\",\n                Type = \"SLACK\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                GroupEmail = \"email@email.com\",\n                SendEmailToAllUsers = true,\n                Type = \"EMAIL\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                MicrosoftTeamsWebhookUrl = \"https://google.com\",\n                Type = \"MSTEAMS\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                PagerDutyKey = \"pagerDutyKey\",\n                Type = \"PAGERDUTY\",\n            },\n        },\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        SsoGroupId = \"sso_group_name\",\n        SsoGroupName = \"sso_group_name\",\n        SsoLinked = true,\n        UserEmails = new[]\n        {\n            \"user@email.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewUsergroup(ctx, \"ssoTypeSaml\", \u0026platform.UsergroupArgs{\n\t\t\tExternallyManaged:    pulumi.Bool(false),\n\t\t\tIdentifier:           pulumi.String(\"identifier\"),\n\t\t\tLinkedSsoDisplayName: pulumi.String(\"linked_sso_display_name\"),\n\t\t\tLinkedSsoId:          pulumi.String(\"linked_sso_id\"),\n\t\t\tLinkedSsoType:        pulumi.String(\"SAML\"),\n\t\t\tNotificationConfigs: platform.UsergroupNotificationConfigArray{\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tSlackWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t\tType:            pulumi.String(\"SLACK\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tGroupEmail:          pulumi.String(\"email@email.com\"),\n\t\t\t\t\tSendEmailToAllUsers: pulumi.Bool(true),\n\t\t\t\t\tType:                pulumi.String(\"EMAIL\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tMicrosoftTeamsWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t\tType:                     pulumi.String(\"MSTEAMS\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tPagerDutyKey: pulumi.String(\"pagerDutyKey\"),\n\t\t\t\t\tType:         pulumi.String(\"PAGERDUTY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOrgId:        pulumi.String(\"org_id\"),\n\t\t\tProjectId:    pulumi.String(\"project_id\"),\n\t\t\tSsoGroupId:   pulumi.String(\"sso_group_name\"),\n\t\t\tSsoGroupName: pulumi.String(\"sso_group_name\"),\n\t\t\tSsoLinked:    pulumi.Bool(true),\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewUsergroup(ctx, \"ssoTypeLdap\", \u0026platform.UsergroupArgs{\n\t\t\tExternallyManaged:    pulumi.Bool(false),\n\t\t\tIdentifier:           pulumi.String(\"identifier\"),\n\t\t\tLinkedSsoDisplayName: pulumi.String(\"linked_sso_display_name\"),\n\t\t\tLinkedSsoId:          pulumi.String(\"linked_sso_id\"),\n\t\t\tLinkedSsoType:        pulumi.String(\"LDAP\"),\n\t\t\tNotificationConfigs: platform.UsergroupNotificationConfigArray{\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tSlackWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t\tType:            pulumi.String(\"SLACK\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tGroupEmail:          pulumi.String(\"email@email.com\"),\n\t\t\t\t\tSendEmailToAllUsers: pulumi.Bool(true),\n\t\t\t\t\tType:                pulumi.String(\"EMAIL\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tMicrosoftTeamsWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t\tType:                     pulumi.String(\"MSTEAMS\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tPagerDutyKey: pulumi.String(\"pagerDutyKey\"),\n\t\t\t\t\tType:         pulumi.String(\"PAGERDUTY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOrgId:        pulumi.String(\"org_id\"),\n\t\t\tProjectId:    pulumi.String(\"project_id\"),\n\t\t\tSsoGroupId:   pulumi.String(\"sso_group_id\"),\n\t\t\tSsoGroupName: pulumi.String(\"sso_group_name\"),\n\t\t\tSsoLinked:    pulumi.Bool(true),\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewUsergroup(ctx, \"example\", \u0026platform.UsergroupArgs{\n\t\t\tExternallyManaged:    pulumi.Bool(false),\n\t\t\tIdentifier:           pulumi.String(\"identifier\"),\n\t\t\tLinkedSsoDisplayName: pulumi.String(\"linked_sso_display_name\"),\n\t\t\tLinkedSsoId:          pulumi.String(\"linked_sso_id\"),\n\t\t\tLinkedSsoType:        pulumi.String(\"SAML\"),\n\t\t\tNotificationConfigs: platform.UsergroupNotificationConfigArray{\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tSlackWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t\tType:            pulumi.String(\"SLACK\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tGroupEmail:          pulumi.String(\"email@email.com\"),\n\t\t\t\t\tSendEmailToAllUsers: pulumi.Bool(true),\n\t\t\t\t\tType:                pulumi.String(\"EMAIL\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tMicrosoftTeamsWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t\tType:                     pulumi.String(\"MSTEAMS\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tPagerDutyKey: pulumi.String(\"pagerDutyKey\"),\n\t\t\t\t\tType:         pulumi.String(\"PAGERDUTY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOrgId:        pulumi.String(\"org_id\"),\n\t\t\tProjectId:    pulumi.String(\"project_id\"),\n\t\t\tSsoGroupId:   pulumi.String(\"sso_group_name\"),\n\t\t\tSsoGroupName: pulumi.String(\"sso_group_name\"),\n\t\t\tSsoLinked:    pulumi.Bool(true),\n\t\t\tUserEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user@email.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Usergroup;\nimport com.pulumi.harness.platform.UsergroupArgs;\nimport com.pulumi.harness.platform.inputs.UsergroupNotificationConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ssoTypeSaml = new Usergroup(\"ssoTypeSaml\", UsergroupArgs.builder()        \n            .externallyManaged(false)\n            .identifier(\"identifier\")\n            .linkedSsoDisplayName(\"linked_sso_display_name\")\n            .linkedSsoId(\"linked_sso_id\")\n            .linkedSsoType(\"SAML\")\n            .notificationConfigs(            \n                UsergroupNotificationConfigArgs.builder()\n                    .slackWebhookUrl(\"https://google.com\")\n                    .type(\"SLACK\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .groupEmail(\"email@email.com\")\n                    .sendEmailToAllUsers(true)\n                    .type(\"EMAIL\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .microsoftTeamsWebhookUrl(\"https://google.com\")\n                    .type(\"MSTEAMS\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .pagerDutyKey(\"pagerDutyKey\")\n                    .type(\"PAGERDUTY\")\n                    .build())\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .ssoGroupId(\"sso_group_name\")\n            .ssoGroupName(\"sso_group_name\")\n            .ssoLinked(true)\n            .users(\"user_id\")\n            .build());\n\n        var ssoTypeLdap = new Usergroup(\"ssoTypeLdap\", UsergroupArgs.builder()        \n            .externallyManaged(false)\n            .identifier(\"identifier\")\n            .linkedSsoDisplayName(\"linked_sso_display_name\")\n            .linkedSsoId(\"linked_sso_id\")\n            .linkedSsoType(\"LDAP\")\n            .notificationConfigs(            \n                UsergroupNotificationConfigArgs.builder()\n                    .slackWebhookUrl(\"https://google.com\")\n                    .type(\"SLACK\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .groupEmail(\"email@email.com\")\n                    .sendEmailToAllUsers(true)\n                    .type(\"EMAIL\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .microsoftTeamsWebhookUrl(\"https://google.com\")\n                    .type(\"MSTEAMS\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .pagerDutyKey(\"pagerDutyKey\")\n                    .type(\"PAGERDUTY\")\n                    .build())\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .ssoGroupId(\"sso_group_id\")\n            .ssoGroupName(\"sso_group_name\")\n            .ssoLinked(true)\n            .users(\"user_id\")\n            .build());\n\n        var example = new Usergroup(\"example\", UsergroupArgs.builder()        \n            .externallyManaged(false)\n            .identifier(\"identifier\")\n            .linkedSsoDisplayName(\"linked_sso_display_name\")\n            .linkedSsoId(\"linked_sso_id\")\n            .linkedSsoType(\"SAML\")\n            .notificationConfigs(            \n                UsergroupNotificationConfigArgs.builder()\n                    .slackWebhookUrl(\"https://google.com\")\n                    .type(\"SLACK\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .groupEmail(\"email@email.com\")\n                    .sendEmailToAllUsers(true)\n                    .type(\"EMAIL\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .microsoftTeamsWebhookUrl(\"https://google.com\")\n                    .type(\"MSTEAMS\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .pagerDutyKey(\"pagerDutyKey\")\n                    .type(\"PAGERDUTY\")\n                    .build())\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .ssoGroupId(\"sso_group_name\")\n            .ssoGroupName(\"sso_group_name\")\n            .ssoLinked(true)\n            .userEmails(\"user@email.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ssoTypeSaml:\n    type: harness:platform:Usergroup\n    properties:\n      externallyManaged: false\n      identifier: identifier\n      linkedSsoDisplayName: linked_sso_display_name\n      linkedSsoId: linked_sso_id\n      linkedSsoType: SAML\n      notificationConfigs:\n        - slackWebhookUrl: https://google.com\n          type: SLACK\n        - groupEmail: email@email.com\n          sendEmailToAllUsers: true\n          type: EMAIL\n        - microsoftTeamsWebhookUrl: https://google.com\n          type: MSTEAMS\n        - pagerDutyKey: pagerDutyKey\n          type: PAGERDUTY\n      orgId: org_id\n      projectId: project_id\n      ssoGroupId: sso_group_name\n      # When sso linked type is saml sso_group_id is same as sso_group_name\n      ssoGroupName: sso_group_name\n      ssoLinked: true\n      users:\n        - user_id\n  ssoTypeLdap:\n    type: harness:platform:Usergroup\n    properties:\n      externallyManaged: false\n      identifier: identifier\n      linkedSsoDisplayName: linked_sso_display_name\n      linkedSsoId: linked_sso_id\n      linkedSsoType: LDAP\n      notificationConfigs:\n        - slackWebhookUrl: https://google.com\n          type: SLACK\n        - groupEmail: email@email.com\n          sendEmailToAllUsers: true\n          type: EMAIL\n        - microsoftTeamsWebhookUrl: https://google.com\n          type: MSTEAMS\n        - pagerDutyKey: pagerDutyKey\n          type: PAGERDUTY\n      orgId: org_id\n      projectId: project_id\n      ssoGroupId: sso_group_id\n      ssoGroupName: sso_group_name\n      ssoLinked: true\n      users:\n        - user_id\n  # Create user group by adding user emails\n  example:\n    type: harness:platform:Usergroup\n    properties:\n      externallyManaged: false\n      identifier: identifier\n      linkedSsoDisplayName: linked_sso_display_name\n      linkedSsoId: linked_sso_id\n      linkedSsoType: SAML\n      notificationConfigs:\n        - slackWebhookUrl: https://google.com\n          type: SLACK\n        - groupEmail: email@email.com\n          sendEmailToAllUsers: true\n          type: EMAIL\n        - microsoftTeamsWebhookUrl: https://google.com\n          type: MSTEAMS\n        - pagerDutyKey: pagerDutyKey\n          type: PAGERDUTY\n      orgId: org_id\n      projectId: project_id\n      ssoGroupId: sso_group_name\n      # When sso linked type is saml sso_group_id is same as sso_group_name\n      ssoGroupName: sso_group_name\n      ssoLinked: true\n      userEmails:\n        - user@email.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level user group\n\n```sh\n $ pulumi import harness:platform/usergroup:Usergroup example \u003cusergroup_id\u003e\n```\n\n Import org level user group\n\n```sh\n $ pulumi import harness:platform/usergroup:Usergroup example \u003cord_id\u003e/\u003cusergroup_id\u003e\n```\n\n Import project level user group\n\n```sh\n $ pulumi import harness:platform/usergroup:Usergroup example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cusergroup_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "externallyManaged": {
                    "type": "boolean",
                    "description": "Whether the user group is externally managed.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "linkedSsoDisplayName": {
                    "type": "string",
                    "description": "Name of the linked SSO.\n"
                },
                "linkedSsoId": {
                    "type": "string",
                    "description": "The SSO account ID that the user group is linked to.\n"
                },
                "linkedSsoType": {
                    "type": "string",
                    "description": "Type of linked SSO.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "notificationConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig"
                    },
                    "description": "List of notification settings.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssoGroupId": {
                    "type": "string",
                    "description": "Identifier of the userGroup in SSO.\n"
                },
                "ssoGroupName": {
                    "type": "string",
                    "description": "Name of the SSO userGroup.\n"
                },
                "ssoLinked": {
                    "type": "boolean",
                    "description": "Whether sso is linked or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "userEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user emails in the UserGroup. Either provide list of users or list of user emails.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users in the UserGroup. Either provide list of users or list of user emails.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "ssoLinked"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "externallyManaged": {
                    "type": "boolean",
                    "description": "Whether the user group is externally managed.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "linkedSsoDisplayName": {
                    "type": "string",
                    "description": "Name of the linked SSO.\n"
                },
                "linkedSsoId": {
                    "type": "string",
                    "description": "The SSO account ID that the user group is linked to.\n"
                },
                "linkedSsoType": {
                    "type": "string",
                    "description": "Type of linked SSO.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "notificationConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig"
                    },
                    "description": "List of notification settings.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssoGroupId": {
                    "type": "string",
                    "description": "Identifier of the userGroup in SSO.\n"
                },
                "ssoGroupName": {
                    "type": "string",
                    "description": "Name of the SSO userGroup.\n"
                },
                "ssoLinked": {
                    "type": "boolean",
                    "description": "Whether sso is linked or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "userEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user emails in the UserGroup. Either provide list of users or list of user emails.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users in the UserGroup. Either provide list of users or list of user emails.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Usergroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "externallyManaged": {
                        "type": "boolean",
                        "description": "Whether the user group is externally managed.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "linkedSsoDisplayName": {
                        "type": "string",
                        "description": "Name of the linked SSO.\n"
                    },
                    "linkedSsoId": {
                        "type": "string",
                        "description": "The SSO account ID that the user group is linked to.\n"
                    },
                    "linkedSsoType": {
                        "type": "string",
                        "description": "Type of linked SSO.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "notificationConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig"
                        },
                        "description": "List of notification settings.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "ssoGroupId": {
                        "type": "string",
                        "description": "Identifier of the userGroup in SSO.\n"
                    },
                    "ssoGroupName": {
                        "type": "string",
                        "description": "Name of the SSO userGroup.\n"
                    },
                    "ssoLinked": {
                        "type": "boolean",
                        "description": "Whether sso is linked or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "userEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of user emails in the UserGroup. Either provide list of users or list of user emails.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of users in the UserGroup. Either provide list of users or list of user emails.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/variables:Variables": {
            "description": "Resource for creating a Harness Variables.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst test = new harness.platform.Variables(\"test\", {\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    spec: {\n        fixedValue: \"fixedValue\",\n        valueType: \"FIXED\",\n    },\n    type: \"String\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\ntest = harness.platform.Variables(\"test\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    spec=harness.platform.VariablesSpecArgs(\n        fixed_value=\"fixedValue\",\n        value_type=\"FIXED\",\n    ),\n    type=\"String\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.Variables(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Spec = new Harness.Platform.Inputs.VariablesSpecArgs\n        {\n            FixedValue = \"fixedValue\",\n            ValueType = \"FIXED\",\n        },\n        Type = \"String\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewVariables(ctx, \"test\", \u0026platform.VariablesArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tSpec: \u0026platform.VariablesSpecArgs{\n\t\t\t\tFixedValue: pulumi.String(\"fixedValue\"),\n\t\t\t\tValueType:  pulumi.String(\"FIXED\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"String\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Variables;\nimport com.pulumi.harness.platform.VariablesArgs;\nimport com.pulumi.harness.platform.inputs.VariablesSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Variables(\"test\", VariablesArgs.builder()        \n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .spec(VariablesSpecArgs.builder()\n                .fixedValue(\"fixedValue\")\n                .valueType(\"FIXED\")\n                .build())\n            .type(\"String\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:Variables\n    properties:\n      identifier: identifier\n      orgId: org_id\n      projectId: project_id\n      spec:\n        fixedValue: fixedValue\n        valueType: FIXED\n      type: String\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level variables\n\n```sh\n $ pulumi import harness:platform/variables:Variables example \u003cvariable_id\u003e\n```\n\n Import org level variables\n\n```sh\n $ pulumi import harness:platform/variables:Variables example \u003cord_id\u003e/\u003cvariable_id\u003e\n```\n\n Import project level variables\n\n```sh\n $ pulumi import harness:platform/variables:Variables example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cvariable_id\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the entity\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Variable\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "spec": {
                    "$ref": "#/types/harness:platform/VariablesSpec:VariablesSpec",
                    "description": "List of Spec Fields.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of Variable\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "spec",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the entity\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Variable\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "spec": {
                    "$ref": "#/types/harness:platform/VariablesSpec:VariablesSpec",
                    "description": "List of Spec Fields.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of Variable\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "spec",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Variables resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the entity\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Variable\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity\n"
                    },
                    "spec": {
                        "$ref": "#/types/harness:platform/VariablesSpec:VariablesSpec",
                        "description": "List of Spec Fields.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Variable\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/vaultConnector:VaultConnector": {
            "description": "Resource for creating a HashiCorp Vault Secret Manager connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst awsAuth = new harness.platform.VaultConnector(\"awsAuth\", {\n    accessType: \"AWS_IAM\",\n    awsRegion: \"aws_region\",\n    basePath: \"base_path\",\n    \"default\": false,\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    readOnly: true,\n    renewalIntervalMinutes: 60,\n    secretEngineManuallyConfigured: true,\n    secretEngineName: \"secret_engine_name\",\n    secretEngineVersion: 2,\n    tags: [\"foo:bar\"],\n    useAwsIam: true,\n    useK8sAuth: false,\n    useVaultAgent: false,\n    vaultAwsIamRole: \"vault_aws_iam_role\",\n    vaultUrl: \"https://vault_url.com\",\n    xvaultAwsIamServerId: `account.${harness_platform_secret_text.test.id}`,\n});\nconst appRole = new harness.platform.VaultConnector(\"appRole\", {\n    accessType: \"APP_ROLE\",\n    appRoleId: \"app_role_id\",\n    basePath: \"base_path\",\n    \"default\": false,\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    readOnly: true,\n    renewAppRoleToken: true,\n    renewalIntervalMinutes: 60,\n    secretEngineManuallyConfigured: true,\n    secretEngineName: \"secret_engine_name\",\n    secretEngineVersion: 2,\n    secretId: `account.${harness_platform_secret_text.test.id}`,\n    tags: [\"foo:bar\"],\n    useAwsIam: false,\n    useK8sAuth: false,\n    useVaultAgent: false,\n    vaultUrl: \"https://vault_url.com\",\n});\nconst k8sAuth = new harness.platform.VaultConnector(\"k8sAuth\", {\n    accessType: \"K8s_AUTH\",\n    authToken: `account.${harness_platform_secret_text.test.id}`,\n    basePath: \"base_path\",\n    \"default\": false,\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    k8sAuthEndpoint: \"k8s_auth_endpoint\",\n    namespace: \"namespace\",\n    readOnly: true,\n    renewalIntervalMinutes: 10,\n    secretEngineManuallyConfigured: true,\n    secretEngineName: \"secret_engine_name\",\n    secretEngineVersion: 2,\n    serviceAccountTokenPath: \"service_account_token_path\",\n    tags: [\"foo:bar\"],\n    useAwsIam: false,\n    useK8sAuth: true,\n    useVaultAgent: false,\n    vaultAwsIamRole: \"vault_aws_iam_role\",\n    vaultK8sAuthRole: \"vault_k8s_auth_role\",\n    vaultUrl: \"https://vault_url.com\",\n});\nconst vaultAgent = new harness.platform.VaultConnector(\"vaultAgent\", {\n    accessType: \"VAULT_AGENT\",\n    authToken: `account.${harness_platform_secret_text.test.id}`,\n    basePath: \"base_path\",\n    \"default\": false,\n    delegateSelectors: [\"harness-delegate\"],\n    description: \"test\",\n    identifier: \"identifier\",\n    namespace: \"namespace\",\n    readOnly: true,\n    renewalIntervalMinutes: 10,\n    secretEngineManuallyConfigured: true,\n    secretEngineName: \"secret_engine_name\",\n    secretEngineVersion: 2,\n    sinkPath: \"sink_path\",\n    tags: [\"foo:bar\"],\n    useAwsIam: false,\n    useK8sAuth: false,\n    useVaultAgent: true,\n    vaultUrl: \"https://vault_url.com\",\n});\nconst token = new harness.platform.VaultConnector(\"token\", {\n    accessType: \"TOKEN\",\n    authToken: `account.${harness_platform_secret_text.test.id}`,\n    basePath: \"base_path\",\n    \"default\": false,\n    description: \"test\",\n    identifier: \"identifier\",\n    namespace: \"namespace\",\n    readOnly: true,\n    renewalIntervalMinutes: 10,\n    secretEngineManuallyConfigured: true,\n    secretEngineName: \"secret_engine_name\",\n    secretEngineVersion: 2,\n    tags: [\"foo:bar\"],\n    useAwsIam: false,\n    useK8sAuth: false,\n    vaultUrl: \"https://vault_url.com\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\naws_auth = harness.platform.VaultConnector(\"awsAuth\",\n    access_type=\"AWS_IAM\",\n    aws_region=\"aws_region\",\n    base_path=\"base_path\",\n    default=False,\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    read_only=True,\n    renewal_interval_minutes=60,\n    secret_engine_manually_configured=True,\n    secret_engine_name=\"secret_engine_name\",\n    secret_engine_version=2,\n    tags=[\"foo:bar\"],\n    use_aws_iam=True,\n    use_k8s_auth=False,\n    use_vault_agent=False,\n    vault_aws_iam_role=\"vault_aws_iam_role\",\n    vault_url=\"https://vault_url.com\",\n    xvault_aws_iam_server_id=f\"account.{harness_platform_secret_text['test']['id']}\")\napp_role = harness.platform.VaultConnector(\"appRole\",\n    access_type=\"APP_ROLE\",\n    app_role_id=\"app_role_id\",\n    base_path=\"base_path\",\n    default=False,\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    read_only=True,\n    renew_app_role_token=True,\n    renewal_interval_minutes=60,\n    secret_engine_manually_configured=True,\n    secret_engine_name=\"secret_engine_name\",\n    secret_engine_version=2,\n    secret_id=f\"account.{harness_platform_secret_text['test']['id']}\",\n    tags=[\"foo:bar\"],\n    use_aws_iam=False,\n    use_k8s_auth=False,\n    use_vault_agent=False,\n    vault_url=\"https://vault_url.com\")\nk8s_auth = harness.platform.VaultConnector(\"k8sAuth\",\n    access_type=\"K8s_AUTH\",\n    auth_token=f\"account.{harness_platform_secret_text['test']['id']}\",\n    base_path=\"base_path\",\n    default=False,\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    k8s_auth_endpoint=\"k8s_auth_endpoint\",\n    namespace=\"namespace\",\n    read_only=True,\n    renewal_interval_minutes=10,\n    secret_engine_manually_configured=True,\n    secret_engine_name=\"secret_engine_name\",\n    secret_engine_version=2,\n    service_account_token_path=\"service_account_token_path\",\n    tags=[\"foo:bar\"],\n    use_aws_iam=False,\n    use_k8s_auth=True,\n    use_vault_agent=False,\n    vault_aws_iam_role=\"vault_aws_iam_role\",\n    vault_k8s_auth_role=\"vault_k8s_auth_role\",\n    vault_url=\"https://vault_url.com\")\nvault_agent = harness.platform.VaultConnector(\"vaultAgent\",\n    access_type=\"VAULT_AGENT\",\n    auth_token=f\"account.{harness_platform_secret_text['test']['id']}\",\n    base_path=\"base_path\",\n    default=False,\n    delegate_selectors=[\"harness-delegate\"],\n    description=\"test\",\n    identifier=\"identifier\",\n    namespace=\"namespace\",\n    read_only=True,\n    renewal_interval_minutes=10,\n    secret_engine_manually_configured=True,\n    secret_engine_name=\"secret_engine_name\",\n    secret_engine_version=2,\n    sink_path=\"sink_path\",\n    tags=[\"foo:bar\"],\n    use_aws_iam=False,\n    use_k8s_auth=False,\n    use_vault_agent=True,\n    vault_url=\"https://vault_url.com\")\ntoken = harness.platform.VaultConnector(\"token\",\n    access_type=\"TOKEN\",\n    auth_token=f\"account.{harness_platform_secret_text['test']['id']}\",\n    base_path=\"base_path\",\n    default=False,\n    description=\"test\",\n    identifier=\"identifier\",\n    namespace=\"namespace\",\n    read_only=True,\n    renewal_interval_minutes=10,\n    secret_engine_manually_configured=True,\n    secret_engine_name=\"secret_engine_name\",\n    secret_engine_version=2,\n    tags=[\"foo:bar\"],\n    use_aws_iam=False,\n    use_k8s_auth=False,\n    vault_url=\"https://vault_url.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var awsAuth = new Harness.Platform.VaultConnector(\"awsAuth\", new()\n    {\n        AccessType = \"AWS_IAM\",\n        AwsRegion = \"aws_region\",\n        BasePath = \"base_path\",\n        Default = false,\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        ReadOnly = true,\n        RenewalIntervalMinutes = 60,\n        SecretEngineManuallyConfigured = true,\n        SecretEngineName = \"secret_engine_name\",\n        SecretEngineVersion = 2,\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        UseAwsIam = true,\n        UseK8sAuth = false,\n        UseVaultAgent = false,\n        VaultAwsIamRole = \"vault_aws_iam_role\",\n        VaultUrl = \"https://vault_url.com\",\n        XvaultAwsIamServerId = $\"account.{harness_platform_secret_text.Test.Id}\",\n    });\n\n    var appRole = new Harness.Platform.VaultConnector(\"appRole\", new()\n    {\n        AccessType = \"APP_ROLE\",\n        AppRoleId = \"app_role_id\",\n        BasePath = \"base_path\",\n        Default = false,\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        ReadOnly = true,\n        RenewAppRoleToken = true,\n        RenewalIntervalMinutes = 60,\n        SecretEngineManuallyConfigured = true,\n        SecretEngineName = \"secret_engine_name\",\n        SecretEngineVersion = 2,\n        SecretId = $\"account.{harness_platform_secret_text.Test.Id}\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        UseAwsIam = false,\n        UseK8sAuth = false,\n        UseVaultAgent = false,\n        VaultUrl = \"https://vault_url.com\",\n    });\n\n    var k8sAuth = new Harness.Platform.VaultConnector(\"k8sAuth\", new()\n    {\n        AccessType = \"K8s_AUTH\",\n        AuthToken = $\"account.{harness_platform_secret_text.Test.Id}\",\n        BasePath = \"base_path\",\n        Default = false,\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        K8sAuthEndpoint = \"k8s_auth_endpoint\",\n        Namespace = \"namespace\",\n        ReadOnly = true,\n        RenewalIntervalMinutes = 10,\n        SecretEngineManuallyConfigured = true,\n        SecretEngineName = \"secret_engine_name\",\n        SecretEngineVersion = 2,\n        ServiceAccountTokenPath = \"service_account_token_path\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        UseAwsIam = false,\n        UseK8sAuth = true,\n        UseVaultAgent = false,\n        VaultAwsIamRole = \"vault_aws_iam_role\",\n        VaultK8sAuthRole = \"vault_k8s_auth_role\",\n        VaultUrl = \"https://vault_url.com\",\n    });\n\n    var vaultAgent = new Harness.Platform.VaultConnector(\"vaultAgent\", new()\n    {\n        AccessType = \"VAULT_AGENT\",\n        AuthToken = $\"account.{harness_platform_secret_text.Test.Id}\",\n        BasePath = \"base_path\",\n        Default = false,\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Namespace = \"namespace\",\n        ReadOnly = true,\n        RenewalIntervalMinutes = 10,\n        SecretEngineManuallyConfigured = true,\n        SecretEngineName = \"secret_engine_name\",\n        SecretEngineVersion = 2,\n        SinkPath = \"sink_path\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        UseAwsIam = false,\n        UseK8sAuth = false,\n        UseVaultAgent = true,\n        VaultUrl = \"https://vault_url.com\",\n    });\n\n    var token = new Harness.Platform.VaultConnector(\"token\", new()\n    {\n        AccessType = \"TOKEN\",\n        AuthToken = $\"account.{harness_platform_secret_text.Test.Id}\",\n        BasePath = \"base_path\",\n        Default = false,\n        Description = \"test\",\n        Identifier = \"identifier\",\n        Namespace = \"namespace\",\n        ReadOnly = true,\n        RenewalIntervalMinutes = 10,\n        SecretEngineManuallyConfigured = true,\n        SecretEngineName = \"secret_engine_name\",\n        SecretEngineVersion = 2,\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        UseAwsIam = false,\n        UseK8sAuth = false,\n        VaultUrl = \"https://vault_url.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewVaultConnector(ctx, \"awsAuth\", \u0026platform.VaultConnectorArgs{\n\t\t\tAccessType: pulumi.String(\"AWS_IAM\"),\n\t\t\tAwsRegion:  pulumi.String(\"aws_region\"),\n\t\t\tBasePath:   pulumi.String(\"base_path\"),\n\t\t\tDefault:    pulumi.Bool(false),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription:                    pulumi.String(\"test\"),\n\t\t\tIdentifier:                     pulumi.String(\"identifier\"),\n\t\t\tReadOnly:                       pulumi.Bool(true),\n\t\t\tRenewalIntervalMinutes:         pulumi.Int(60),\n\t\t\tSecretEngineManuallyConfigured: pulumi.Bool(true),\n\t\t\tSecretEngineName:               pulumi.String(\"secret_engine_name\"),\n\t\t\tSecretEngineVersion:            pulumi.Int(2),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUseAwsIam:            pulumi.Bool(true),\n\t\t\tUseK8sAuth:           pulumi.Bool(false),\n\t\t\tUseVaultAgent:        pulumi.Bool(false),\n\t\t\tVaultAwsIamRole:      pulumi.String(\"vault_aws_iam_role\"),\n\t\t\tVaultUrl:             pulumi.String(\"https://vault_url.com\"),\n\t\t\tXvaultAwsIamServerId: pulumi.String(fmt.Sprintf(\"account.%v\", harness_platform_secret_text.Test.Id)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewVaultConnector(ctx, \"appRole\", \u0026platform.VaultConnectorArgs{\n\t\t\tAccessType: pulumi.String(\"APP_ROLE\"),\n\t\t\tAppRoleId:  pulumi.String(\"app_role_id\"),\n\t\t\tBasePath:   pulumi.String(\"base_path\"),\n\t\t\tDefault:    pulumi.Bool(false),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription:                    pulumi.String(\"test\"),\n\t\t\tIdentifier:                     pulumi.String(\"identifier\"),\n\t\t\tReadOnly:                       pulumi.Bool(true),\n\t\t\tRenewAppRoleToken:              pulumi.Bool(true),\n\t\t\tRenewalIntervalMinutes:         pulumi.Int(60),\n\t\t\tSecretEngineManuallyConfigured: pulumi.Bool(true),\n\t\t\tSecretEngineName:               pulumi.String(\"secret_engine_name\"),\n\t\t\tSecretEngineVersion:            pulumi.Int(2),\n\t\t\tSecretId:                       pulumi.String(fmt.Sprintf(\"account.%v\", harness_platform_secret_text.Test.Id)),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUseAwsIam:     pulumi.Bool(false),\n\t\t\tUseK8sAuth:    pulumi.Bool(false),\n\t\t\tUseVaultAgent: pulumi.Bool(false),\n\t\t\tVaultUrl:      pulumi.String(\"https://vault_url.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewVaultConnector(ctx, \"k8sAuth\", \u0026platform.VaultConnectorArgs{\n\t\t\tAccessType: pulumi.String(\"K8s_AUTH\"),\n\t\t\tAuthToken:  pulumi.String(fmt.Sprintf(\"account.%v\", harness_platform_secret_text.Test.Id)),\n\t\t\tBasePath:   pulumi.String(\"base_path\"),\n\t\t\tDefault:    pulumi.Bool(false),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription:                    pulumi.String(\"test\"),\n\t\t\tIdentifier:                     pulumi.String(\"identifier\"),\n\t\t\tK8sAuthEndpoint:                pulumi.String(\"k8s_auth_endpoint\"),\n\t\t\tNamespace:                      pulumi.String(\"namespace\"),\n\t\t\tReadOnly:                       pulumi.Bool(true),\n\t\t\tRenewalIntervalMinutes:         pulumi.Int(10),\n\t\t\tSecretEngineManuallyConfigured: pulumi.Bool(true),\n\t\t\tSecretEngineName:               pulumi.String(\"secret_engine_name\"),\n\t\t\tSecretEngineVersion:            pulumi.Int(2),\n\t\t\tServiceAccountTokenPath:        pulumi.String(\"service_account_token_path\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUseAwsIam:        pulumi.Bool(false),\n\t\t\tUseK8sAuth:       pulumi.Bool(true),\n\t\t\tUseVaultAgent:    pulumi.Bool(false),\n\t\t\tVaultAwsIamRole:  pulumi.String(\"vault_aws_iam_role\"),\n\t\t\tVaultK8sAuthRole: pulumi.String(\"vault_k8s_auth_role\"),\n\t\t\tVaultUrl:         pulumi.String(\"https://vault_url.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewVaultConnector(ctx, \"vaultAgent\", \u0026platform.VaultConnectorArgs{\n\t\t\tAccessType: pulumi.String(\"VAULT_AGENT\"),\n\t\t\tAuthToken:  pulumi.String(fmt.Sprintf(\"account.%v\", harness_platform_secret_text.Test.Id)),\n\t\t\tBasePath:   pulumi.String(\"base_path\"),\n\t\t\tDefault:    pulumi.Bool(false),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tDescription:                    pulumi.String(\"test\"),\n\t\t\tIdentifier:                     pulumi.String(\"identifier\"),\n\t\t\tNamespace:                      pulumi.String(\"namespace\"),\n\t\t\tReadOnly:                       pulumi.Bool(true),\n\t\t\tRenewalIntervalMinutes:         pulumi.Int(10),\n\t\t\tSecretEngineManuallyConfigured: pulumi.Bool(true),\n\t\t\tSecretEngineName:               pulumi.String(\"secret_engine_name\"),\n\t\t\tSecretEngineVersion:            pulumi.Int(2),\n\t\t\tSinkPath:                       pulumi.String(\"sink_path\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUseAwsIam:     pulumi.Bool(false),\n\t\t\tUseK8sAuth:    pulumi.Bool(false),\n\t\t\tUseVaultAgent: pulumi.Bool(true),\n\t\t\tVaultUrl:      pulumi.String(\"https://vault_url.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewVaultConnector(ctx, \"token\", \u0026platform.VaultConnectorArgs{\n\t\t\tAccessType:                     pulumi.String(\"TOKEN\"),\n\t\t\tAuthToken:                      pulumi.String(fmt.Sprintf(\"account.%v\", harness_platform_secret_text.Test.Id)),\n\t\t\tBasePath:                       pulumi.String(\"base_path\"),\n\t\t\tDefault:                        pulumi.Bool(false),\n\t\t\tDescription:                    pulumi.String(\"test\"),\n\t\t\tIdentifier:                     pulumi.String(\"identifier\"),\n\t\t\tNamespace:                      pulumi.String(\"namespace\"),\n\t\t\tReadOnly:                       pulumi.Bool(true),\n\t\t\tRenewalIntervalMinutes:         pulumi.Int(10),\n\t\t\tSecretEngineManuallyConfigured: pulumi.Bool(true),\n\t\t\tSecretEngineName:               pulumi.String(\"secret_engine_name\"),\n\t\t\tSecretEngineVersion:            pulumi.Int(2),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUseAwsIam:  pulumi.Bool(false),\n\t\t\tUseK8sAuth: pulumi.Bool(false),\n\t\t\tVaultUrl:   pulumi.String(\"https://vault_url.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.VaultConnector;\nimport com.pulumi.harness.platform.VaultConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var awsAuth = new VaultConnector(\"awsAuth\", VaultConnectorArgs.builder()        \n            .accessType(\"AWS_IAM\")\n            .awsRegion(\"aws_region\")\n            .basePath(\"base_path\")\n            .default_(false)\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .readOnly(true)\n            .renewalIntervalMinutes(60)\n            .secretEngineManuallyConfigured(true)\n            .secretEngineName(\"secret_engine_name\")\n            .secretEngineVersion(2)\n            .tags(\"foo:bar\")\n            .useAwsIam(true)\n            .useK8sAuth(false)\n            .useVaultAgent(false)\n            .vaultAwsIamRole(\"vault_aws_iam_role\")\n            .vaultUrl(\"https://vault_url.com\")\n            .xvaultAwsIamServerId(String.format(\"account.%s\", harness_platform_secret_text.test().id()))\n            .build());\n\n        var appRole = new VaultConnector(\"appRole\", VaultConnectorArgs.builder()        \n            .accessType(\"APP_ROLE\")\n            .appRoleId(\"app_role_id\")\n            .basePath(\"base_path\")\n            .default_(false)\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .readOnly(true)\n            .renewAppRoleToken(true)\n            .renewalIntervalMinutes(60)\n            .secretEngineManuallyConfigured(true)\n            .secretEngineName(\"secret_engine_name\")\n            .secretEngineVersion(2)\n            .secretId(String.format(\"account.%s\", harness_platform_secret_text.test().id()))\n            .tags(\"foo:bar\")\n            .useAwsIam(false)\n            .useK8sAuth(false)\n            .useVaultAgent(false)\n            .vaultUrl(\"https://vault_url.com\")\n            .build());\n\n        var k8sAuth = new VaultConnector(\"k8sAuth\", VaultConnectorArgs.builder()        \n            .accessType(\"K8s_AUTH\")\n            .authToken(String.format(\"account.%s\", harness_platform_secret_text.test().id()))\n            .basePath(\"base_path\")\n            .default_(false)\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .k8sAuthEndpoint(\"k8s_auth_endpoint\")\n            .namespace(\"namespace\")\n            .readOnly(true)\n            .renewalIntervalMinutes(10)\n            .secretEngineManuallyConfigured(true)\n            .secretEngineName(\"secret_engine_name\")\n            .secretEngineVersion(2)\n            .serviceAccountTokenPath(\"service_account_token_path\")\n            .tags(\"foo:bar\")\n            .useAwsIam(false)\n            .useK8sAuth(true)\n            .useVaultAgent(false)\n            .vaultAwsIamRole(\"vault_aws_iam_role\")\n            .vaultK8sAuthRole(\"vault_k8s_auth_role\")\n            .vaultUrl(\"https://vault_url.com\")\n            .build());\n\n        var vaultAgent = new VaultConnector(\"vaultAgent\", VaultConnectorArgs.builder()        \n            .accessType(\"VAULT_AGENT\")\n            .authToken(String.format(\"account.%s\", harness_platform_secret_text.test().id()))\n            .basePath(\"base_path\")\n            .default_(false)\n            .delegateSelectors(\"harness-delegate\")\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .namespace(\"namespace\")\n            .readOnly(true)\n            .renewalIntervalMinutes(10)\n            .secretEngineManuallyConfigured(true)\n            .secretEngineName(\"secret_engine_name\")\n            .secretEngineVersion(2)\n            .sinkPath(\"sink_path\")\n            .tags(\"foo:bar\")\n            .useAwsIam(false)\n            .useK8sAuth(false)\n            .useVaultAgent(true)\n            .vaultUrl(\"https://vault_url.com\")\n            .build());\n\n        var token = new VaultConnector(\"token\", VaultConnectorArgs.builder()        \n            .accessType(\"TOKEN\")\n            .authToken(String.format(\"account.%s\", harness_platform_secret_text.test().id()))\n            .basePath(\"base_path\")\n            .default_(false)\n            .description(\"test\")\n            .identifier(\"identifier\")\n            .namespace(\"namespace\")\n            .readOnly(true)\n            .renewalIntervalMinutes(10)\n            .secretEngineManuallyConfigured(true)\n            .secretEngineName(\"secret_engine_name\")\n            .secretEngineVersion(2)\n            .tags(\"foo:bar\")\n            .useAwsIam(false)\n            .useK8sAuth(false)\n            .vaultUrl(\"https://vault_url.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  awsAuth:\n    type: harness:platform:VaultConnector\n    properties:\n      accessType: AWS_IAM\n      awsRegion: aws_region\n      basePath: base_path\n      default: false\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      readOnly: true\n      renewalIntervalMinutes: 60\n      secretEngineManuallyConfigured: true\n      secretEngineName: secret_engine_name\n      secretEngineVersion: 2\n      tags:\n        - foo:bar\n      useAwsIam: true\n      useK8sAuth: false\n      useVaultAgent: false\n      vaultAwsIamRole: vault_aws_iam_role\n      vaultUrl: https://vault_url.com\n      xvaultAwsIamServerId: account.${harness_platform_secret_text.test.id}\n  appRole:\n    type: harness:platform:VaultConnector\n    properties:\n      accessType: APP_ROLE\n      appRoleId: app_role_id\n      basePath: base_path\n      default: false\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      readOnly: true\n      renewAppRoleToken: true\n      renewalIntervalMinutes: 60\n      secretEngineManuallyConfigured: true\n      secretEngineName: secret_engine_name\n      secretEngineVersion: 2\n      secretId: account.${harness_platform_secret_text.test.id}\n      tags:\n        - foo:bar\n      useAwsIam: false\n      useK8sAuth: false\n      useVaultAgent: false\n      vaultUrl: https://vault_url.com\n  k8sAuth:\n    type: harness:platform:VaultConnector\n    properties:\n      accessType: K8s_AUTH\n      authToken: account.${harness_platform_secret_text.test.id}\n      basePath: base_path\n      default: false\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      k8sAuthEndpoint: k8s_auth_endpoint\n      namespace: namespace\n      readOnly: true\n      renewalIntervalMinutes: 10\n      secretEngineManuallyConfigured: true\n      secretEngineName: secret_engine_name\n      secretEngineVersion: 2\n      serviceAccountTokenPath: service_account_token_path\n      tags:\n        - foo:bar\n      useAwsIam: false\n      useK8sAuth: true\n      useVaultAgent: false\n      vaultAwsIamRole: vault_aws_iam_role\n      vaultK8sAuthRole: vault_k8s_auth_role\n      vaultUrl: https://vault_url.com\n  vaultAgent:\n    type: harness:platform:VaultConnector\n    properties:\n      accessType: VAULT_AGENT\n      authToken: account.${harness_platform_secret_text.test.id}\n      basePath: base_path\n      default: false\n      delegateSelectors:\n        - harness-delegate\n      description: test\n      identifier: identifier\n      namespace: namespace\n      readOnly: true\n      renewalIntervalMinutes: 10\n      secretEngineManuallyConfigured: true\n      secretEngineName: secret_engine_name\n      secretEngineVersion: 2\n      sinkPath: sink_path\n      tags:\n        - foo:bar\n      useAwsIam: false\n      useK8sAuth: false\n      useVaultAgent: true\n      vaultUrl: https://vault_url.com\n  token:\n    type: harness:platform:VaultConnector\n    properties:\n      accessType: TOKEN\n      authToken: account.${harness_platform_secret_text.test.id}\n      basePath: base_path\n      default: false\n      description: test\n      identifier: identifier\n      namespace: namespace\n      readOnly: true\n      renewalIntervalMinutes: 10\n      secretEngineManuallyConfigured: true\n      secretEngineName: secret_engine_name\n      secretEngineVersion: 2\n      tags:\n        - foo:bar\n      useAwsIam: false\n      useK8sAuth: false\n      vaultUrl: https://vault_url.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport account level vault connector\n\n\n\n```sh\n $ pulumi import harness:platform/vaultConnector:VaultConnector example \u003cconnector_id\u003e\n```\n\n Import org level vault connector\n\n\n\n```sh\n $ pulumi import harness:platform/vaultConnector:VaultConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\n Import project level vault connector\n\n\n\n```sh\n $ pulumi import harness:platform/vaultConnector:VaultConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n ",
            "properties": {
                "accessType": {
                    "type": "string",
                    "description": "Access type.\n"
                },
                "appRoleId": {
                    "type": "string",
                    "description": "ID of App Role.\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Authentication token for Vault.\n"
                },
                "awsRegion": {
                    "type": "string",
                    "description": "AWS region where the AWS IAM authentication will happen.\n"
                },
                "basePath": {
                    "type": "string",
                    "description": "Location of the Vault directory where the secret will be stored.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Is default or not.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is default or not.\n"
                },
                "isReadOnly": {
                    "type": "boolean",
                    "description": "Read only or not.\n"
                },
                "k8sAuthEndpoint": {
                    "type": "string",
                    "description": "The path where Kubernetes Auth is enabled in Vault.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Vault namespace where the Secret will be created.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only.\n"
                },
                "renewAppRoleToken": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if AppRole token renewal is enabled or not.\n"
                },
                "renewalIntervalMinutes": {
                    "type": "integer",
                    "description": "The time interval for the token renewal.\n"
                },
                "secretEngineManuallyConfigured": {
                    "type": "boolean",
                    "description": "Manually entered Secret Engine.\n"
                },
                "secretEngineName": {
                    "type": "string",
                    "description": "Name of the Secret Engine.\n"
                },
                "secretEngineVersion": {
                    "type": "integer",
                    "description": "Version of Secret Engine.\n"
                },
                "secretId": {
                    "type": "string",
                    "description": "ID of the Secret.\n"
                },
                "serviceAccountTokenPath": {
                    "type": "string",
                    "description": "The Service Account token path in the K8s pod where the token is mounted.\n"
                },
                "sinkPath": {
                    "type": "string",
                    "description": "The location from which the authentication token should be read.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "useAwsIam": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if AWS IAM is used for authentication.\n"
                },
                "useK8sAuth": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if K8s Auth is used for authentication.\n"
                },
                "useVaultAgent": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if Vault Agent is used for authentication.\n"
                },
                "vaultAwsIamRole": {
                    "type": "string",
                    "description": "The Vault role defined to bind to aws iam account/role being accessed.\n"
                },
                "vaultK8sAuthRole": {
                    "type": "string",
                    "description": "The role where K8s Auth will happen.\n"
                },
                "vaultUrl": {
                    "type": "string",
                    "description": "URL of the HashiCorp Vault.\n"
                },
                "xvaultAwsIamServerId": {
                    "type": "string",
                    "description": "The AWS IAM Header Server ID that has been configured for this AWS IAM instance.\n"
                }
            },
            "required": [
                "authToken",
                "identifier",
                "name",
                "renewAppRoleToken",
                "renewalIntervalMinutes",
                "vaultUrl"
            ],
            "inputProperties": {
                "accessType": {
                    "type": "string",
                    "description": "Access type.\n"
                },
                "appRoleId": {
                    "type": "string",
                    "description": "ID of App Role.\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Authentication token for Vault.\n"
                },
                "awsRegion": {
                    "type": "string",
                    "description": "AWS region where the AWS IAM authentication will happen.\n"
                },
                "basePath": {
                    "type": "string",
                    "description": "Location of the Vault directory where the secret will be stored.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Is default or not.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is default or not.\n"
                },
                "isReadOnly": {
                    "type": "boolean",
                    "description": "Read only or not.\n"
                },
                "k8sAuthEndpoint": {
                    "type": "string",
                    "description": "The path where Kubernetes Auth is enabled in Vault.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Vault namespace where the Secret will be created.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only.\n"
                },
                "renewAppRoleToken": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if AppRole token renewal is enabled or not.\n"
                },
                "renewalIntervalMinutes": {
                    "type": "integer",
                    "description": "The time interval for the token renewal.\n"
                },
                "secretEngineManuallyConfigured": {
                    "type": "boolean",
                    "description": "Manually entered Secret Engine.\n"
                },
                "secretEngineName": {
                    "type": "string",
                    "description": "Name of the Secret Engine.\n"
                },
                "secretEngineVersion": {
                    "type": "integer",
                    "description": "Version of Secret Engine.\n"
                },
                "secretId": {
                    "type": "string",
                    "description": "ID of the Secret.\n"
                },
                "serviceAccountTokenPath": {
                    "type": "string",
                    "description": "The Service Account token path in the K8s pod where the token is mounted.\n"
                },
                "sinkPath": {
                    "type": "string",
                    "description": "The location from which the authentication token should be read.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "useAwsIam": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if AWS IAM is used for authentication.\n"
                },
                "useK8sAuth": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if K8s Auth is used for authentication.\n"
                },
                "useVaultAgent": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if Vault Agent is used for authentication.\n"
                },
                "vaultAwsIamRole": {
                    "type": "string",
                    "description": "The Vault role defined to bind to aws iam account/role being accessed.\n"
                },
                "vaultK8sAuthRole": {
                    "type": "string",
                    "description": "The role where K8s Auth will happen.\n"
                },
                "vaultUrl": {
                    "type": "string",
                    "description": "URL of the HashiCorp Vault.\n"
                },
                "xvaultAwsIamServerId": {
                    "type": "string",
                    "description": "The AWS IAM Header Server ID that has been configured for this AWS IAM instance.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "renewalIntervalMinutes",
                "vaultUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VaultConnector resources.\n",
                "properties": {
                    "accessType": {
                        "type": "string",
                        "description": "Access type.\n"
                    },
                    "appRoleId": {
                        "type": "string",
                        "description": "ID of App Role.\n"
                    },
                    "authToken": {
                        "type": "string",
                        "description": "Authentication token for Vault.\n"
                    },
                    "awsRegion": {
                        "type": "string",
                        "description": "AWS region where the AWS IAM authentication will happen.\n"
                    },
                    "basePath": {
                        "type": "string",
                        "description": "Location of the Vault directory where the secret will be stored.\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Is default or not.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Is default or not.\n"
                    },
                    "isReadOnly": {
                        "type": "boolean",
                        "description": "Read only or not.\n"
                    },
                    "k8sAuthEndpoint": {
                        "type": "string",
                        "description": "The path where Kubernetes Auth is enabled in Vault.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Vault namespace where the Secret will be created.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Read only.\n"
                    },
                    "renewAppRoleToken": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if AppRole token renewal is enabled or not.\n"
                    },
                    "renewalIntervalMinutes": {
                        "type": "integer",
                        "description": "The time interval for the token renewal.\n"
                    },
                    "secretEngineManuallyConfigured": {
                        "type": "boolean",
                        "description": "Manually entered Secret Engine.\n"
                    },
                    "secretEngineName": {
                        "type": "string",
                        "description": "Name of the Secret Engine.\n"
                    },
                    "secretEngineVersion": {
                        "type": "integer",
                        "description": "Version of Secret Engine.\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "ID of the Secret.\n"
                    },
                    "serviceAccountTokenPath": {
                        "type": "string",
                        "description": "The Service Account token path in the K8s pod where the token is mounted.\n"
                    },
                    "sinkPath": {
                        "type": "string",
                        "description": "The location from which the authentication token should be read.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "useAwsIam": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if AWS IAM is used for authentication.\n"
                    },
                    "useK8sAuth": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if K8s Auth is used for authentication.\n"
                    },
                    "useVaultAgent": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if Vault Agent is used for authentication.\n"
                    },
                    "vaultAwsIamRole": {
                        "type": "string",
                        "description": "The Vault role defined to bind to aws iam account/role being accessed.\n"
                    },
                    "vaultK8sAuthRole": {
                        "type": "string",
                        "description": "The role where K8s Auth will happen.\n"
                    },
                    "vaultUrl": {
                        "type": "string",
                        "description": "URL of the HashiCorp Vault.\n"
                    },
                    "xvaultAwsIamServerId": {
                        "type": "string",
                        "description": "The AWS IAM Header Server ID that has been configured for this AWS IAM instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/ami:Ami": {
            "description": "Resource for creating an AMI service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleAmi = new harness.service.Ami(\"exampleAmi\", {\n    appId: exampleApplication.id,\n    description: \"Service for deploying AMI's\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_ami = harness.service.Ami(\"exampleAmi\",\n    app_id=example_application.id,\n    description=\"Service for deploying AMI's\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleAmi = new Harness.Service.Ami(\"exampleAmi\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"Service for deploying AMI's\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewAmi(ctx, \"exampleAmi\", \u0026service.AmiArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"Service for deploying AMI's\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Ami;\nimport com.pulumi.harness.service.AmiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleAmi = new Ami(\"exampleAmi\", AmiArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"Service for deploying AMI's\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleAmi:\n    type: harness:service:Ami\n    properties:\n      appId: ${exampleApplication.id}\n      description: Service for deploying AMI's\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/ami:Ami example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/AmiVariable:AmiVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/AmiVariable:AmiVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ami resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/AmiVariable:AmiVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/codedeploy:Codedeploy": {
            "description": "Resource for creating an AWS CodeDeploy service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleCodedeploy = new harness.service.Codedeploy(\"exampleCodedeploy\", {\n    appId: exampleApplication.id,\n    description: \"Service for AWS codedeploy applications.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_codedeploy = harness.service.Codedeploy(\"exampleCodedeploy\",\n    app_id=example_application.id,\n    description=\"Service for AWS codedeploy applications.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleCodedeploy = new Harness.Service.Codedeploy(\"exampleCodedeploy\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"Service for AWS codedeploy applications.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewCodedeploy(ctx, \"exampleCodedeploy\", \u0026service.CodedeployArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"Service for AWS codedeploy applications.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Codedeploy;\nimport com.pulumi.harness.service.CodedeployArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleCodedeploy = new Codedeploy(\"exampleCodedeploy\", CodedeployArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"Service for AWS codedeploy applications.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleCodedeploy:\n    type: harness:service:Codedeploy\n    properties:\n      appId: ${exampleApplication.id}\n      description: Service for AWS codedeploy applications.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/codedeploy:Codedeploy example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/CodedeployVariable:CodedeployVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/CodedeployVariable:CodedeployVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Codedeploy resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/CodedeployVariable:CodedeployVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/ecs:Ecs": {
            "description": "Resource for creating an AWS ECS service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleEcs = new harness.service.Ecs(\"exampleEcs\", {\n    appId: exampleApplication.id,\n    description: \"Service for deploying AWS ECS tasks.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_ecs = harness.service.Ecs(\"exampleEcs\",\n    app_id=example_application.id,\n    description=\"Service for deploying AWS ECS tasks.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleEcs = new Harness.Service.Ecs(\"exampleEcs\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"Service for deploying AWS ECS tasks.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewEcs(ctx, \"exampleEcs\", \u0026service.EcsArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"Service for deploying AWS ECS tasks.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Ecs;\nimport com.pulumi.harness.service.EcsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleEcs = new Ecs(\"exampleEcs\", EcsArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"Service for deploying AWS ECS tasks.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleEcs:\n    type: harness:service:Ecs\n    properties:\n      appId: ${exampleApplication.id}\n      description: Service for deploying AWS ECS tasks.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/ecs:Ecs example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/EcsVariable:EcsVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/EcsVariable:EcsVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ecs resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/EcsVariable:EcsVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/helm:Helm": {
            "description": "Resource for creating a Kubernetes Helm service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleHelm = new harness.service.Helm(\"exampleHelm\", {\n    appId: exampleApplication.id,\n    description: \"Service for deploying native Helm application.s\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_helm = harness.service.Helm(\"exampleHelm\",\n    app_id=example_application.id,\n    description=\"Service for deploying native Helm application.s\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleHelm = new Harness.Service.Helm(\"exampleHelm\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"Service for deploying native Helm application.s\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewHelm(ctx, \"exampleHelm\", \u0026service.HelmArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"Service for deploying native Helm application.s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Helm;\nimport com.pulumi.harness.service.HelmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleHelm = new Helm(\"exampleHelm\", HelmArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"Service for deploying native Helm application.s\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleHelm:\n    type: harness:service:Helm\n    properties:\n      appId: ${exampleApplication.id}\n      description: Service for deploying native Helm application.s\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/helm:Helm example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/HelmVariable:HelmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/HelmVariable:HelmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Helm resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/HelmVariable:HelmVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/kubernetes:Kubernetes": {
            "description": "Resource for creating a Kubernetes service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleKubernetes = new harness.service.Kubernetes(\"exampleKubernetes\", {\n    appId: exampleApplication.id,\n    helmVersion: \"V3\",\n    description: \"Service for deploying Kubernetes manifests\",\n    variables: [\n        {\n            name: \"test\",\n            value: \"test_value\",\n            type: \"TEXT\",\n        },\n        {\n            name: \"test2\",\n            value: \"test_value2\",\n            type: \"TEXT\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_kubernetes = harness.service.Kubernetes(\"exampleKubernetes\",\n    app_id=example_application.id,\n    helm_version=\"V3\",\n    description=\"Service for deploying Kubernetes manifests\",\n    variables=[\n        harness.service.KubernetesVariableArgs(\n            name=\"test\",\n            value=\"test_value\",\n            type=\"TEXT\",\n        ),\n        harness.service.KubernetesVariableArgs(\n            name=\"test2\",\n            value=\"test_value2\",\n            type=\"TEXT\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleKubernetes = new Harness.Service.Kubernetes(\"exampleKubernetes\", new()\n    {\n        AppId = exampleApplication.Id,\n        HelmVersion = \"V3\",\n        Description = \"Service for deploying Kubernetes manifests\",\n        Variables = new[]\n        {\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test\",\n                Value = \"test_value\",\n                Type = \"TEXT\",\n            },\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test2\",\n                Value = \"test_value2\",\n                Type = \"TEXT\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewKubernetes(ctx, \"exampleKubernetes\", \u0026service.KubernetesArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tHelmVersion: pulumi.String(\"V3\"),\n\t\t\tDescription: pulumi.String(\"Service for deploying Kubernetes manifests\"),\n\t\t\tVariables: service.KubernetesVariableArray{\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test2\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value2\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Kubernetes;\nimport com.pulumi.harness.service.KubernetesArgs;\nimport com.pulumi.harness.service.inputs.KubernetesVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleKubernetes = new Kubernetes(\"exampleKubernetes\", KubernetesArgs.builder()        \n            .appId(exampleApplication.id())\n            .helmVersion(\"V3\")\n            .description(\"Service for deploying Kubernetes manifests\")\n            .variables(            \n                KubernetesVariableArgs.builder()\n                    .name(\"test\")\n                    .value(\"test_value\")\n                    .type(\"TEXT\")\n                    .build(),\n                KubernetesVariableArgs.builder()\n                    .name(\"test2\")\n                    .value(\"test_value2\")\n                    .type(\"TEXT\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleKubernetes:\n    type: harness:service:Kubernetes\n    properties:\n      appId: ${exampleApplication.id}\n      helmVersion: V3\n      description: Service for deploying Kubernetes manifests\n      variables:\n        - name: test\n          value: test_value\n          type: TEXT\n        - name: test2\n          value: test_value2\n          type: TEXT\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/kubernetes:Kubernetes example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "helmVersion": {
                    "type": "string",
                    "description": "The version of Helm to use. Options are `V2` and `V3`. Defaults to 'V2'. Only used when `type` is `KUBERNETES` or `HELM`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/KubernetesVariable:KubernetesVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "helmVersion": {
                    "type": "string",
                    "description": "The version of Helm to use. Options are `V2` and `V3`. Defaults to 'V2'. Only used when `type` is `KUBERNETES` or `HELM`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/KubernetesVariable:KubernetesVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "helmVersion": {
                        "type": "string",
                        "description": "The version of Helm to use. Options are `V2` and `V3`. Defaults to 'V2'. Only used when `type` is `KUBERNETES` or `HELM`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/KubernetesVariable:KubernetesVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/lambda:Lambda": {
            "description": "Resource for creating an AWS Lambda service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleLambda = new harness.service.Lambda(\"exampleLambda\", {\n    appId: exampleApplication.id,\n    description: \"Service for deploying AWS Lambda functions.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_lambda = harness.service.Lambda(\"exampleLambda\",\n    app_id=example_application.id,\n    description=\"Service for deploying AWS Lambda functions.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleLambda = new Harness.Service.Lambda(\"exampleLambda\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"Service for deploying AWS Lambda functions.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewLambda(ctx, \"exampleLambda\", \u0026service.LambdaArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"Service for deploying AWS Lambda functions.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Lambda;\nimport com.pulumi.harness.service.LambdaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleLambda = new Lambda(\"exampleLambda\", LambdaArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"Service for deploying AWS Lambda functions.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleLambda:\n    type: harness:service:Lambda\n    properties:\n      appId: ${exampleApplication.id}\n      description: Service for deploying AWS Lambda functions.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/lambda:Lambda example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/LambdaVariable:LambdaVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/LambdaVariable:LambdaVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Lambda resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/LambdaVariable:LambdaVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/ssh:Ssh": {
            "description": "Resource for creating an SSH service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleSsh = new harness.service.Ssh(\"exampleSsh\", {\n    appId: exampleApplication.id,\n    artifactType: \"TAR\",\n    description: \"Service for deploying applications with SSH.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_ssh = harness.service.Ssh(\"exampleSsh\",\n    app_id=example_application.id,\n    artifact_type=\"TAR\",\n    description=\"Service for deploying applications with SSH.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleSsh = new Harness.Service.Ssh(\"exampleSsh\", new()\n    {\n        AppId = exampleApplication.Id,\n        ArtifactType = \"TAR\",\n        Description = \"Service for deploying applications with SSH.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewSsh(ctx, \"exampleSsh\", \u0026service.SshArgs{\n\t\t\tAppId:        exampleApplication.ID(),\n\t\t\tArtifactType: pulumi.String(\"TAR\"),\n\t\t\tDescription:  pulumi.String(\"Service for deploying applications with SSH.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Ssh;\nimport com.pulumi.harness.service.SshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleSsh = new Ssh(\"exampleSsh\", SshArgs.builder()        \n            .appId(exampleApplication.id())\n            .artifactType(\"TAR\")\n            .description(\"Service for deploying applications with SSH.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleSsh:\n    type: harness:service:Ssh\n    properties:\n      appId: ${exampleApplication.id}\n      artifactType: TAR\n      description: Service for deploying applications with SSH.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/ssh:Ssh example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/SshVariable:SshVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "artifactType",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/SshVariable:SshVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId",
                "artifactType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ssh resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "artifactType": {
                        "type": "string",
                        "description": "The type of artifact to deploy.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/SshVariable:SshVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/tanzu:Tanzu": {
            "description": "Resource for creating a Tanzu (PCF) service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleTanzu = new harness.service.Tanzu(\"exampleTanzu\", {\n    appId: exampleApplication.id,\n    description: \"A service for deploying Tanzu applications.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_tanzu = harness.service.Tanzu(\"exampleTanzu\",\n    app_id=example_application.id,\n    description=\"A service for deploying Tanzu applications.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleTanzu = new Harness.Service.Tanzu(\"exampleTanzu\", new()\n    {\n        AppId = exampleApplication.Id,\n        Description = \"A service for deploying Tanzu applications.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewTanzu(ctx, \"exampleTanzu\", \u0026service.TanzuArgs{\n\t\t\tAppId:       exampleApplication.ID(),\n\t\t\tDescription: pulumi.String(\"A service for deploying Tanzu applications.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Tanzu;\nimport com.pulumi.harness.service.TanzuArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleTanzu = new Tanzu(\"exampleTanzu\", TanzuArgs.builder()        \n            .appId(exampleApplication.id())\n            .description(\"A service for deploying Tanzu applications.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleTanzu:\n    type: harness:service:Tanzu\n    properties:\n      appId: ${exampleApplication.id}\n      description: A service for deploying Tanzu applications.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/tanzu:Tanzu example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/TanzuVariable:TanzuVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/TanzuVariable:TanzuVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tanzu resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/TanzuVariable:TanzuVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/winrm:Winrm": {
            "description": "Resource for creating an WinRM service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@lbrlabs/pulumi-harness\";\n\nconst exampleApplication = new harness.Application(\"exampleApplication\", {});\nconst exampleWinrm = new harness.service.Winrm(\"exampleWinrm\", {\n    appId: exampleApplication.id,\n    artifactType: \"IIS_APP\",\n    description: \"Service for deploying IIS appliactions using winrm.\",\n});\n```\n```python\nimport pulumi\nimport lbrlabs_pulumi_harness as harness\n\nexample_application = harness.Application(\"exampleApplication\")\nexample_winrm = harness.service.Winrm(\"exampleWinrm\",\n    app_id=example_application.id,\n    artifact_type=\"IIS_APP\",\n    description=\"Service for deploying IIS appliactions using winrm.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Lbrlabs.PulumiPackage.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new Harness.Application(\"exampleApplication\");\n\n    var exampleWinrm = new Harness.Service.Winrm(\"exampleWinrm\", new()\n    {\n        AppId = exampleApplication.Id,\n        ArtifactType = \"IIS_APP\",\n        Description = \"Service for deploying IIS appliactions using winrm.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := harness.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewWinrm(ctx, \"exampleWinrm\", \u0026service.WinrmArgs{\n\t\t\tAppId:        exampleApplication.ID(),\n\t\t\tArtifactType: pulumi.String(\"IIS_APP\"),\n\t\t\tDescription:  pulumi.String(\"Service for deploying IIS appliactions using winrm.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.service.Winrm;\nimport com.pulumi.harness.service.WinrmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\");\n\n        var exampleWinrm = new Winrm(\"exampleWinrm\", WinrmArgs.builder()        \n            .appId(exampleApplication.id())\n            .artifactType(\"IIS_APP\")\n            .description(\"Service for deploying IIS appliactions using winrm.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: harness:Application\n  exampleWinrm:\n    type: harness:service:Winrm\n    properties:\n      appId: ${exampleApplication.id}\n      artifactType: IIS_APP\n      description: Service for deploying IIS appliactions using winrm.\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n $ pulumi import harness:service/winrm:Winrm example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/WinrmVariable:WinrmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "artifactType",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/WinrmVariable:WinrmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId",
                "artifactType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Winrm resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "artifactType": {
                        "type": "string",
                        "description": "The type of artifact to deploy.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/WinrmVariable:WinrmVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "harness:cloudprovider/getDelegateIds:getDelegateIds": {
            "description": "Use this data source to get a list of delegate ID's matching the specified search criteria.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDelegateIds.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the delegate to query for.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDelegateIds.\n",
                "properties": {
                    "delegateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of delegate ID's matching the specified search criteria.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the delegate to query for.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n"
                    }
                },
                "type": "object",
                "required": [
                    "delegateIds",
                    "id"
                ]
            }
        },
        "harness:index/getApplication:getApplication": {
            "description": "Data source for retrieving a Harness application\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The application description\n"
                    },
                    "gitSyncConnectorId": {
                        "type": "string",
                        "description": "The id of the git sync connector\n"
                    },
                    "gitSyncEnabled": {
                        "type": "boolean",
                        "description": "True if git sync is enabled on this application\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the application\n"
                    },
                    "isManualTriggerAuthorized": {
                        "type": "boolean",
                        "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The application description\n"
                    },
                    "gitSyncConnectorId": {
                        "type": "string",
                        "description": "The id of the git sync connector\n"
                    },
                    "gitSyncEnabled": {
                        "type": "boolean",
                        "description": "True if git sync is enabled on this application\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the application\n"
                    },
                    "isManualTriggerAuthorized": {
                        "type": "boolean",
                        "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getCurrentAccount:getCurrentAccount": {
            "description": "Data source for retrieving information about the current Harness account\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCurrentAccount.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the git connector.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCurrentAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Id of the account.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The url of the Harness control plane.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the git connector.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "endpoint"
                ]
            }
        },
        "harness:index/getDelegate:getDelegate": {
            "description": "Data source for retrieving a Harness delegate. If more than one delegate matches the query the first one will be returned.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.getDelegate({\n    name: \"harness-delegate\",\n    status: \"ENABLED\",\n    type: \"KUBERNETES\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.get_delegate(name=\"harness-delegate\",\n    status=\"ENABLED\",\n    type=\"KUBERNETES\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.GetDelegate.Invoke(new()\n    {\n        Name = \"harness-delegate\",\n        Status = \"ENABLED\",\n        Type = \"KUBERNETES\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.GetDelegate(ctx, \u0026harness.GetDelegateArgs{\n\t\t\tName:   pulumi.StringRef(\"harness-delegate\"),\n\t\t\tStatus: pulumi.StringRef(\"ENABLED\"),\n\t\t\tType:   pulumi.StringRef(\"KUBERNETES\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetDelegateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = HarnessFunctions.getDelegate(GetDelegateArgs.builder()\n            .name(\"harness-delegate\")\n            .status(\"ENABLED\")\n            .type(\"KUBERNETES\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:getDelegate\n      Arguments:\n        name: harness-delegate\n        status: ENABLED\n        type: KUBERNETES\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDelegate.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the delegate.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the delegate\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the delegate to query for.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDelegate.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account id the delegate belongs to.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the delegate.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the delegate.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the delegate\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The ip address of the delegate.\n"
                    },
                    "lastHeartbeat": {
                        "type": "string",
                        "description": "The last time the delegate was heard from.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the delegate to query for.\n"
                    },
                    "pollingModeEnabled": {
                        "type": "boolean",
                        "description": "Whether the delegate is in polling mode.\n"
                    },
                    "profileId": {
                        "type": "string",
                        "description": "The id of the profile assigned to the delegate.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the delegate.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "description",
                    "ip",
                    "lastHeartbeat",
                    "pollingModeEnabled",
                    "profileId",
                    "version"
                ]
            }
        },
        "harness:index/getEncryptedText:getEncryptedText": {
            "description": "Data source for retrieving a Harness application\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEncryptedText.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the encrypted secret\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the encrypted secret\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getEncryptedTextUsageScope:getEncryptedTextUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEncryptedText.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the encrypted secret\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the encrypted secret\n"
                    },
                    "secretManagerId": {
                        "type": "string",
                        "description": "The id of the associated secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getEncryptedTextUsageScope:getEncryptedTextUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object",
                "required": [
                    "secretManagerId"
                ]
            }
        },
        "harness:index/getEnvironment:getEnvironment": {
            "description": "Data source for retrieving a Harness service\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "The id of the environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "variableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getEnvironmentVariableOverride:getEnvironmentVariableOverride"
                        },
                        "description": "Override for a service variable\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the environment.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "The id of the environment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The id of the environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                    },
                    "variableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getEnvironmentVariableOverride:getEnvironmentVariableOverride"
                        },
                        "description": "Override for a service variable\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "description",
                    "id",
                    "type",
                    "variableOverrides"
                ]
            }
        },
        "harness:index/getGitConnector:getGitConnector": {
            "description": "Data source for retrieving a Harness application\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitConnector.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the git connector.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git connector.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGitConnector.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch of the git connector to use.\n"
                    },
                    "commitDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getGitConnectorCommitDetail:getGitConnectorCommitDetail"
                        },
                        "description": "Custom details to use when making commits using this git connector.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The time the git connector was created.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Delegate selectors to apply to this git connector.\n"
                    },
                    "generateWebhookUrl": {
                        "type": "boolean",
                        "description": "Boolean indicating whether or not to generate a webhook url.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the git connector.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git connector.\n"
                    },
                    "passwordSecretId": {
                        "type": "string",
                        "description": "The id of the secret for connecting to the git repository.\n"
                    },
                    "sshSettingId": {
                        "type": "string",
                        "description": "The id of the SSH secret to use.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the git repository or account/organization.\n"
                    },
                    "urlType": {
                        "type": "string",
                        "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO`.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of the user used to connect to the git repository.\n"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "The generated webhook url.\n"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "commitDetails",
                    "createdAt",
                    "delegateSelectors",
                    "generateWebhookUrl",
                    "passwordSecretId",
                    "sshSettingId",
                    "url",
                    "urlType",
                    "username",
                    "webhookUrl"
                ]
            }
        },
        "harness:index/getSecretManager:getSecretManager": {
            "description": "Data source for retrieving a Harness secret manager\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretManager.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "True to lookup the id of the default secret manager\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getSecretManagerUsageScope:getSecretManagerUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecretManager.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "True to lookup the id of the default secret manager\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getSecretManagerUsageScope:getSecretManagerUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getService:getService": {
            "description": "Data source for retrieving a Harness service\n",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the application\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n"
                    },
                    "artifactType": {
                        "type": "string",
                        "description": "The type of artifact deployed by the service\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The application description\n"
                    },
                    "helmVersion": {
                        "type": "string",
                        "description": "The version of Helm being used by the service.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the application\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the service\n"
                    },
                    "templateUri": {
                        "type": "string",
                        "description": "The path of the template used for the custom deployment\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the deployment\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "artifactType",
                    "description",
                    "helmVersion",
                    "id",
                    "name",
                    "tags",
                    "templateUri",
                    "type"
                ]
            }
        },
        "harness:index/getSshCredential:getSshCredential": {
            "description": "Data source for retrieving an SSH credential.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSshCredential.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getSshCredentialUsageScope:getSshCredentialUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshCredential.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getSshCredentialUsageScope:getSshCredentialUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getSsoProvider:getSsoProvider": {
            "description": "Data source for retrieving an SSO providers\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSsoProvider.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the SSO provider.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSO provider.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSsoProvider.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the SSO provider.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSO provider.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of SSO provider.\n"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            }
        },
        "harness:index/getTrigger:getTrigger": {
            "description": "Data source for retrieving a Harness trigger.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst exampleByName = harness.getTrigger({\n    appId: \"app_id\",\n    name: \"name\",\n});\nconst exampleById = harness.getTrigger({\n    id: \"trigger_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample_by_name = harness.get_trigger(app_id=\"app_id\",\n    name=\"name\")\nexample_by_id = harness.get_trigger(id=\"trigger_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleByName = Harness.GetTrigger.Invoke(new()\n    {\n        AppId = \"app_id\",\n        Name = \"name\",\n    });\n\n    var exampleById = Harness.GetTrigger.Invoke(new()\n    {\n        Id = \"trigger_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.GetTrigger(ctx, \u0026harness.GetTriggerArgs{\n\t\t\tAppId: pulumi.StringRef(\"app_id\"),\n\t\t\tName:  pulumi.StringRef(\"name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.GetTrigger(ctx, \u0026harness.GetTriggerArgs{\n\t\t\tId: pulumi.StringRef(\"trigger_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetTriggerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleByName = HarnessFunctions.getTrigger(GetTriggerArgs.builder()\n            .appId(\"app_id\")\n            .name(\"name\")\n            .build());\n\n        final var exampleById = HarnessFunctions.getTrigger(GetTriggerArgs.builder()\n            .id(\"trigger_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleByName:\n    fn::invoke:\n      Function: harness:getTrigger\n      Arguments:\n        appId: app_id\n        name: name\n  exampleById:\n    fn::invoke:\n      Function: harness:getTrigger\n      Arguments:\n        id: trigger_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTrigger.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The trigger description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the trigger.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrigger.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getTriggerCondition:getTriggerCondition"
                        },
                        "description": "The condition that will execute the Trigger: On new artifact, On pipeline completion, On Cron schedule, On webhook, On New Manifest.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The trigger description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the trigger.\n"
                    }
                },
                "type": "object",
                "required": [
                    "conditions"
                ]
            }
        },
        "harness:index/getUser:getUser": {
            "description": "Data source for retrieving a Harness user\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user\n"
                    },
                    "isEmailVerified": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the users email has been verified.\n"
                    },
                    "isImportedFromIdentityProvider": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the user was imported from an identity provider.\n"
                    },
                    "isPasswordExpired": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the users password has expired.\n"
                    },
                    "isTwoFactorAuthEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not two-factor authentication is enabled for the user.\n"
                    },
                    "isUserLocked": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the user is locked out.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "isEmailVerified",
                    "isImportedFromIdentityProvider",
                    "isPasswordExpired",
                    "isTwoFactorAuthEnabled",
                    "isUserLocked",
                    "name"
                ]
            }
        },
        "harness:index/getUserGroup:getUserGroup": {
            "description": "Data source for retrieving a Harness user group\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUserGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUserGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getYamlConfig:getYamlConfig": {
            "description": "Data source for retrieving a yaml config.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getYamlConfig.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "Unique identifier of the application. This is not required for account level resources (i.e. cloud providers, connectors, etc.).\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path to the yaml file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getYamlConfig.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "Unique identifier of the application. This is not required for account level resources (i.e. cloud providers, connectors, etc.).\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "Content of the yaml file.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the yaml resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the yaml resource.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path to the yaml file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "content",
                    "id",
                    "name",
                    "path"
                ]
            }
        },
        "harness:platform/getApikey:getApikey": {
            "inputs": {
                "description": "A collection of arguments for invoking getApikey.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "apikeyType": {
                        "type": "string"
                    },
                    "defaultTimeToExpireToken": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "apikeyType",
                    "identifier",
                    "name",
                    "parentId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApikey.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "apikeyType": {
                        "type": "string"
                    },
                    "defaultTimeToExpireToken": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "apikeyType",
                    "identifier",
                    "name",
                    "parentId",
                    "id"
                ]
            }
        },
        "harness:platform/getAppDynamicsConnector:getAppDynamicsConnector": {
            "description": "Datasource for looking up an App Dynamics connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAppDynamicsConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_app_dynamics_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAppDynamicsConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAppDynamicsConnector(ctx, \u0026platform.LookupAppDynamicsConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAppDynamicsConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAppDynamicsConnector(GetAppDynamicsConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAppDynamicsConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAppDynamicsConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAppDynamicsConnector.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The App Dynamics account name.\n"
                    },
                    "apiTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAppDynamicsConnectorApiToken:getAppDynamicsConnectorApiToken"
                        },
                        "description": "Authenticate to App Dynamics using api token.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the App Dynamics controller.\n"
                    },
                    "usernamePasswords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAppDynamicsConnectorUsernamePassword:getAppDynamicsConnectorUsernamePassword"
                        },
                        "description": "Authenticate to App Dynamics using username and password.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountName",
                    "apiTokens",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "usernamePasswords",
                    "id"
                ]
            }
        },
        "harness:platform/getArtifactoryConnector:getArtifactoryConnector": {
            "description": "Resource for looking up an App Dynamics connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getArtifactoryConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_artifactory_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetArtifactoryConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupArtifactoryConnector(ctx, \u0026platform.LookupArtifactoryConnectorArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetArtifactoryConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getArtifactoryConnector(GetArtifactoryConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getArtifactoryConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getArtifactoryConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getArtifactoryConnector.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getArtifactoryConnectorCredential:getArtifactoryConnectorCredential"
                        },
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getAwsCCConnector:getAwsCCConnector": {
            "description": "Datasource for looking up an AWS Cloud Cost connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAwsCCConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_aws_cc_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAwsCCConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAwsCCConnector(ctx, \u0026platform.LookupAwsCCConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAwsCCConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAwsCCConnector(GetAwsCCConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAwsCCConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsCCConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsCCConnector.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The AWS account id.\n"
                    },
                    "crossAccountAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsCCConnectorCrossAccountAccess:getAwsCCConnectorCrossAccountAccess"
                        },
                        "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "reportName": {
                        "type": "string",
                        "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                    },
                    "s3Bucket": {
                        "type": "string",
                        "description": "The name of s3 bucket.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "crossAccountAccesses",
                    "description",
                    "featuresEnableds",
                    "identifier",
                    "reportName",
                    "s3Bucket",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getAwsConnector:getAwsConnector": {
            "description": "Datasource for looking up an AWS connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAwsConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_aws_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAwsConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAwsConnector(ctx, \u0026platform.LookupAwsConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAwsConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAwsConnector(GetAwsConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAwsConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsConnector.\n",
                "properties": {
                    "crossAccountAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorCrossAccountAccess:getAwsConnectorCrossAccountAccess"
                        },
                        "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "inheritFromDelegates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorInheritFromDelegate:getAwsConnectorInheritFromDelegate"
                        },
                        "description": "Inherit credentials from the delegate.\n"
                    },
                    "irsas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorIrsa:getAwsConnectorIrsa"
                        },
                        "description": "Use IAM role for service accounts.\n"
                    },
                    "manuals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorManual:getAwsConnectorManual"
                        },
                        "description": "Use IAM role for service accounts.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "crossAccountAccesses",
                    "description",
                    "identifier",
                    "inheritFromDelegates",
                    "irsas",
                    "manuals",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getAwsKmsConnector:getAwsKmsConnector": {
            "description": "Datasource for looking up an AWS KMS connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAwsKmsConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_aws_kms_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAwsKmsConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAwsKmsConnector(ctx, \u0026platform.LookupAwsKmsConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAwsKmsConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAwsKmsConnector(GetAwsKmsConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAwsKmsConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsKmsConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsKmsConnector.\n",
                "properties": {
                    "arnRef": {
                        "type": "string",
                        "description": "A reference to the Harness secret containing the ARN of the AWS KMS. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsKmsConnectorCredential:getAwsKmsConnectorCredential"
                        },
                        "description": "Credentials to connect to AWS.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region where the AWS Secret Manager is.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "arnRef",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "region",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getAwsSecretManagerConnector:getAwsSecretManagerConnector": {
            "description": "Datasource for looking up an AWS Secret Manager connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAwsSecretManagerConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_aws_secret_manager_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAwsSecretManagerConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAwsSecretManagerConnector(ctx, \u0026platform.LookupAwsSecretManagerConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAwsSecretManagerConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAwsSecretManagerConnector(GetAwsSecretManagerConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAwsSecretManagerConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsSecretManagerConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsSecretManagerConnector.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsSecretManagerConnectorCredential:getAwsSecretManagerConnectorCredential"
                        },
                        "description": "Credentials to connect to AWS.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region where the AWS Secret Manager is.\n"
                    },
                    "secretNamePrefix": {
                        "type": "string",
                        "description": "A prefix to be added to all secrets.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "region",
                    "secretNamePrefix",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getBitbucketConnector:getBitbucketConnector": {
            "description": "Datasource for looking up a Bitbucket connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getBitbucketConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_bitbucket_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetBitbucketConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupBitbucketConnector(ctx, \u0026platform.LookupBitbucketConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetBitbucketConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getBitbucketConnector(GetBitbucketConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getBitbucketConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBitbucketConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBitbucketConnector.\n",
                "properties": {
                    "apiAuthentications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getBitbucketConnectorApiAuthentication:getBitbucketConnectorApiAuthentication"
                        },
                        "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getBitbucketConnectorCredential:getBitbucketConnectorCredential"
                        },
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the BitBucket repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiAuthentications",
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ]
            }
        },
        "harness:platform/getCcmFilters:getCcmFilters": {
            "description": "Data source for retrieving a Harness CCM Filter.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getCcmFilters({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"CCMRecommendation\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_ccm_filters(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"CCMRecommendation\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetCcmFilters.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"CCMRecommendation\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupCcmFilters(ctx, \u0026platform.LookupCcmFiltersArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tType:       \"CCMRecommendation\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetCcmFiltersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getCcmFilters(GetCcmFiltersArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"CCMRecommendation\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getCcmFilters\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        type: CCMRecommendation\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCcmFilters.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCcmFilters.\n",
                "properties": {
                    "filterProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getCcmFiltersFilterProperty:getCcmFiltersFilterProperty"
                        },
                        "description": "Properties of the filter entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filter. By default, everyone can view this filter.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Filter.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter.\n"
                    }
                },
                "type": "object",
                "required": [
                    "filterProperties",
                    "filterVisibility",
                    "identifier",
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorAzureCloudCost:getConnectorAzureCloudCost": {
            "description": "Datasource for looking up an Azure Cloud Cost Connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorAzureCloudCost({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_azure_cloud_cost(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorAzureCloudCost.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorAzureCloudCost(ctx, \u0026platform.LookupConnectorAzureCloudCostArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorAzureCloudCostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorAzureCloudCost(GetConnectorAzureCloudCostArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorAzureCloudCost\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorAzureCloudCost.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorAzureCloudCost.\n",
                "properties": {
                    "billingExportSpecs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getConnectorAzureCloudCostBillingExportSpec:getConnectorAzureCloudCostBillingExportSpec"
                        },
                        "description": "Returns billing details for the Azure account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Subsription id.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Tenant id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "billingExportSpecs",
                    "description",
                    "featuresEnableds",
                    "identifier",
                    "subscriptionId",
                    "tags",
                    "tenantId",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorAzureCloudProvider:getConnectorAzureCloudProvider": {
            "description": "Datasource for looking up an Azure Cloud Provider Connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorAzureCloudProvider({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_azure_cloud_provider(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorAzureCloudProvider.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorAzureCloudProvider(ctx, \u0026platform.LookupConnectorAzureCloudProviderArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorAzureCloudProviderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorAzureCloudProvider(GetConnectorAzureCloudProviderArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorAzureCloudProvider\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorAzureCloudProvider.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorAzureCloudProvider.\n",
                "properties": {
                    "azureEnvironmentType": {
                        "type": "string",
                        "description": "Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getConnectorAzureCloudProviderCredential:getConnectorAzureCloudProviderCredential"
                        },
                        "description": "Contains Azure connector credentials.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "executeOnDelegate": {
                        "type": "boolean",
                        "description": "Execute on delegate or not.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "azureEnvironmentType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "executeOnDelegate",
                    "identifier",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorAzureKeyVault:getConnectorAzureKeyVault": {
            "description": "Data source for looking up an Azure key vault connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorAzureKeyVault({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_azure_key_vault(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorAzureKeyVault.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorAzureKeyVault(ctx, \u0026platform.LookupConnectorAzureKeyVaultArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorAzureKeyVaultArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorAzureKeyVault(GetConnectorAzureKeyVaultArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorAzureKeyVault\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorAzureKeyVault.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorAzureKeyVault.\n",
                "properties": {
                    "azureEnvironmentType": {
                        "type": "string",
                        "description": "Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Application ID of the Azure App.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect using only the delegates which have these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Specifies whether or not is the default value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The Harness text secret with the Azure authentication key as its value.\n"
                    },
                    "subscription": {
                        "type": "string",
                        "description": "Azure subscription ID.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The Azure Active Directory (AAD) directory ID where you created your application.\n"
                    },
                    "vaultName": {
                        "type": "string",
                        "description": "Name of the vault.\n"
                    }
                },
                "type": "object",
                "required": [
                    "azureEnvironmentType",
                    "clientId",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "isDefault",
                    "secretKey",
                    "subscription",
                    "tags",
                    "tenantId",
                    "vaultName",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorGcpCloudCost:getConnectorGcpCloudCost": {
            "description": "Datasource for looking up a GCP Cloud Cost Connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorGcpCloudCost({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_gcp_cloud_cost(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorGcpCloudCost.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorGcpCloudCost(ctx, \u0026platform.LookupConnectorGcpCloudCostArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorGcpCloudCostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorGcpCloudCost(GetConnectorGcpCloudCostArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorGcpCloudCost\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorGcpCloudCost.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorGcpCloudCost.\n",
                "properties": {
                    "billingExportSpecs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getConnectorGcpCloudCostBillingExportSpec:getConnectorGcpCloudCostBillingExportSpec"
                        },
                        "description": "Returns billing details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates which features to enable among Billing, Optimization, and Visibility.\n"
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "GCP Project Id.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "Email corresponding to the Service Account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "billingExportSpecs",
                    "description",
                    "featuresEnableds",
                    "gcpProjectId",
                    "identifier",
                    "serviceAccountEmail",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorGcpSecretManager:getConnectorGcpSecretManager": {
            "description": "Datasource for looking up GCP Secret Manager connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorGcpSecretManager({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_gcp_secret_manager(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorGcpSecretManager.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorGcpSecretManager(ctx, \u0026platform.LookupConnectorGcpSecretManagerArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorGcpSecretManagerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorGcpSecretManager(GetConnectorGcpSecretManagerArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorGcpSecretManager\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorGcpSecretManager.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorGcpSecretManager.\n",
                "properties": {
                    "credentialsRef": {
                        "type": "string",
                        "description": "Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Indicative if this is default Secret manager for secrets.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentialsRef",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "isDefault",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorJenkins:getConnectorJenkins": {
            "description": "Datasource for looking up a Jenkins connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorJenkins({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_jenkins(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorJenkins.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorJenkins(ctx, \u0026platform.LookupConnectorJenkinsArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorJenkinsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorJenkins(GetConnectorJenkinsArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorJenkins\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorJenkins.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorJenkins.\n",
                "properties": {
                    "auths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getConnectorJenkinsAuth:getConnectorJenkinsAuth"
                        },
                        "description": "This entity contains the details for Jenkins Authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "jenkinsUrl": {
                        "type": "string",
                        "description": "Jenkins Url.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "auths",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "jenkinsUrl",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorKubernetesCloudCost:getConnectorKubernetesCloudCost": {
            "description": "Datasource for looking up a Kubernetes Cloud Cost connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorKubernetesCloudCost({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_kubernetes_cloud_cost(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorKubernetesCloudCost.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorKubernetesCloudCost(ctx, \u0026platform.LookupConnectorKubernetesCloudCostArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorKubernetesCloudCostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorKubernetesCloudCost(GetConnectorKubernetesCloudCostArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorKubernetesCloudCost\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorKubernetesCloudCost.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorKubernetesCloudCost.\n",
                "properties": {
                    "connectorRef": {
                        "type": "string",
                        "description": "Reference of the Connector.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectorRef",
                    "description",
                    "featuresEnableds",
                    "identifier",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorOciHelm:getConnectorOciHelm": {
            "description": "Datasource for looking up a OCI Helm connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorOciHelm({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_oci_helm(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorOciHelm.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorOciHelm(ctx, \u0026platform.LookupConnectorOciHelmArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorOciHelmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorOciHelm(GetConnectorOciHelmArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorOciHelm\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorOciHelm.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorOciHelm.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getConnectorOciHelmCredential:getConnectorOciHelmCredential"
                        },
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the helm server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorServiceNow:getConnectorServiceNow": {
            "description": "Datasource for looking up a Service Now connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorServiceNow({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_service_now(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorServiceNow.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorServiceNow(ctx, \u0026platform.LookupConnectorServiceNowArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorServiceNowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorServiceNow(GetConnectorServiceNowArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorServiceNow\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorServiceNow.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorServiceNow.\n",
                "properties": {
                    "auths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getConnectorServiceNowAuth:getConnectorServiceNowAuth"
                        },
                        "description": "The credentials to use for the service now authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceNowUrl": {
                        "type": "string",
                        "description": "URL of service now.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use for authentication.\n"
                    },
                    "usernameRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "auths",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "passwordRef",
                    "serviceNowUrl",
                    "tags",
                    "username",
                    "usernameRef",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorSpot:getConnectorSpot": {
            "description": "Datasource for looking up an Spot connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorSpot({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_spot(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorSpot.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorSpot(ctx, \u0026platform.LookupConnectorSpotArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorSpotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorSpot(GetConnectorSpotArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorSpot\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorSpot.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorSpot.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permanentTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getConnectorSpotPermanentToken:getConnectorSpotPermanentToken"
                        },
                        "description": "Authenticate to Spot using account id and permanent token.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "identifier",
                    "permanentTokens",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorTas:getConnectorTas": {
            "description": "Datasource for looking up an Tas Connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorTas({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_tas(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorTas.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorTas(ctx, \u0026platform.LookupConnectorTasArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorTasArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorTas(GetConnectorTasArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorTas\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorTas.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorTas.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getConnectorTasCredential:getConnectorTasCredential"
                        },
                        "description": "Contains Tas connector credentials.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "executeOnDelegate": {
                        "type": "boolean",
                        "description": "Execute on delegate or not.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "executeOnDelegate",
                    "identifier",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getConnectorTerraformCloud:getConnectorTerraformCloud": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getConnectorTerraformCloud({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_connector_terraform_cloud(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetConnectorTerraformCloud.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupConnectorTerraformCloud(ctx, \u0026platform.LookupConnectorTerraformCloudArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetConnectorTerraformCloudArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getConnectorTerraformCloud(GetConnectorTerraformCloudArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getConnectorTerraformCloud\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConnectorTerraformCloud.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConnectorTerraformCloud.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getConnectorTerraformCloudCredential:getConnectorTerraformCloudCredential"
                        }
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getCurrentUser:getCurrentUser": {
            "description": "Data source for retrieving the current user based on the API key.\n",
            "outputs": {
                "description": "A collection of values returned by getCurrentUser.\n",
                "properties": {
                    "admin": {
                        "type": "boolean",
                        "description": "Whether the user is an administrator.\n"
                    },
                    "billingFrequency": {
                        "type": "string",
                        "description": "Billing frequency of the user.\n"
                    },
                    "defaultAccountId": {
                        "type": "string",
                        "description": "Default account ID of the user.\n"
                    },
                    "edition": {
                        "type": "string",
                        "description": "Edition of the platform being used.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user.\n"
                    },
                    "emailVerified": {
                        "type": "boolean",
                        "description": "Whether the user's email address has been verified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "intent": {
                        "type": "string",
                        "description": "Intent of the user.\n"
                    },
                    "isTwoFactorAuthEnabled": {
                        "type": "boolean",
                        "description": "Whether 2FA is enabled for the user.\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Whether or not the user account is locked.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user.\n"
                    },
                    "signupAction": {
                        "type": "string",
                        "description": "Signup action of the user.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token used to authenticate the user.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Unique identifier of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "admin",
                    "billingFrequency",
                    "defaultAccountId",
                    "edition",
                    "email",
                    "emailVerified",
                    "intent",
                    "isTwoFactorAuthEnabled",
                    "locked",
                    "name",
                    "signupAction",
                    "token",
                    "uuid",
                    "id"
                ]
            }
        },
        "harness:platform/getDatadogConnector:getDatadogConnector": {
            "description": "Datasource for looking up a Datadog connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getDatadogConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_datadog_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetDatadogConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupDatadogConnector(ctx, \u0026platform.LookupDatadogConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetDatadogConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getDatadogConnector(GetDatadogConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getDatadogConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatadogConnector.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatadogConnector.\n",
                "properties": {
                    "apiKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "applicationKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the application key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Datadog server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiKeyRef",
                    "applicationKeyRef",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getDockerConnector:getDockerConnector": {
            "description": "Datasource for looking up a Datadog connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getDockerConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_docker_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetDockerConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupDockerConnector(ctx, \u0026platform.LookupDockerConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetDockerConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getDockerConnector(GetDockerConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getDockerConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDockerConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDockerConnector.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getDockerConnectorCredential:getDockerConnectorCredential"
                        },
                        "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the docker registry.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "type",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getDynatraceConnector:getDynatraceConnector": {
            "description": "Datasource for looking up a Dynatrace connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getDynatraceConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_dynatrace_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetDynatraceConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupDynatraceConnector(ctx, \u0026platform.LookupDynatraceConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetDynatraceConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getDynatraceConnector(GetDynatraceConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getDynatraceConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDynatraceConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDynatraceConnector.\n",
                "properties": {
                    "apiTokenRef": {
                        "type": "string",
                        "description": "The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Dynatrace server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiTokenRef",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getEnvironment:getEnvironment": {
            "description": "Data source for retrieving a Harness environment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getEnvironment({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_environment(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetEnvironment.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupEnvironment(ctx, \u0026platform.LookupEnvironmentArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getEnvironment\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of environment.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Input Set YAML\n"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "description",
                    "identifier",
                    "tags",
                    "type",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getEnvironmentClustersMapping:getEnvironmentClustersMapping": {
            "description": "Data source for retrieving a Harness Cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getEnvironmentClustersMapping({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_environment_clusters_mapping(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetEnvironmentClustersMapping.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupEnvironmentClustersMapping(ctx, \u0026platform.LookupEnvironmentClustersMappingArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetEnvironmentClustersMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getEnvironmentClustersMapping\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironmentClustersMapping.\n",
                "properties": {
                    "envId": {
                        "type": "string",
                        "description": "environment identifier of the cluster.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the cluster.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "org_id of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project_id of the cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "envId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironmentClustersMapping.\n",
                "properties": {
                    "envId": {
                        "type": "string",
                        "description": "environment identifier of the cluster.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the cluster.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "org_id of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project_id of the cluster.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "scope at which the cluster exists in harness gitops\n"
                    }
                },
                "type": "object",
                "required": [
                    "envId",
                    "identifier",
                    "scope",
                    "id"
                ]
            }
        },
        "harness:platform/getEnvironmentGroup:getEnvironmentGroup": {
            "description": "Data source for retrieving a Harness environment group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getEnvironmentGroup({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_environment_group(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetEnvironmentGroup.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupEnvironmentGroup(ctx, \u0026platform.LookupEnvironmentGroupArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      \"org_id\",\n\t\t\tProjectId:  \"project_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetEnvironmentGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getEnvironmentGroup(GetEnvironmentGroupArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getEnvironmentGroup\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironmentGroup.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the environment group.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the environment group.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "org_id of the environment group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project_id of the environment group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironmentGroup.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the environment group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the environment group.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "org_id of the environment group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project_id of the environment group.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Input Set YAML\n"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "identifier",
                    "orgId",
                    "projectId",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getEnvironmentServiceOverrides:getEnvironmentServiceOverrides": {
            "description": "Data source for Harness environment service overrides.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getEnvironmentServiceOverrides({\n    envId: \"environmentIdentifier\",\n    orgId: \"orgIdentifier\",\n    projectId: \"projectIdentifier\",\n    serviceId: \"serviceIdentifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_environment_service_overrides(env_id=\"environmentIdentifier\",\n    org_id=\"orgIdentifier\",\n    project_id=\"projectIdentifier\",\n    service_id=\"serviceIdentifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetEnvironmentServiceOverrides.Invoke(new()\n    {\n        EnvId = \"environmentIdentifier\",\n        OrgId = \"orgIdentifier\",\n        ProjectId = \"projectIdentifier\",\n        ServiceId = \"serviceIdentifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupEnvironmentServiceOverrides(ctx, \u0026platform.LookupEnvironmentServiceOverridesArgs{\n\t\t\tEnvId:     \"environmentIdentifier\",\n\t\t\tOrgId:     pulumi.StringRef(\"orgIdentifier\"),\n\t\t\tProjectId: pulumi.StringRef(\"projectIdentifier\"),\n\t\t\tServiceId: pulumi.StringRef(\"serviceIdentifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetEnvironmentServiceOverridesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getEnvironmentServiceOverrides(GetEnvironmentServiceOverridesArgs.builder()\n            .envId(\"environmentIdentifier\")\n            .orgId(\"orgIdentifier\")\n            .projectId(\"projectIdentifier\")\n            .serviceId(\"serviceIdentifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getEnvironmentServiceOverrides\n      Arguments:\n        envId: environmentIdentifier\n        orgId: orgIdentifier\n        projectId: projectIdentifier\n        serviceId: serviceIdentifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironmentServiceOverrides.\n",
                "properties": {
                    "envId": {
                        "type": "string",
                        "description": "The env ID to which the overrides associated.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the service overrides.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The service ID to which the overrides applies.\n"
                    }
                },
                "type": "object",
                "required": [
                    "envId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironmentServiceOverrides.\n",
                "properties": {
                    "envId": {
                        "type": "string",
                        "description": "The env ID to which the overrides associated.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the service overrides.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The service ID to which the overrides applies.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Environment Service Overrides YAML\n"
                    }
                },
                "type": "object",
                "required": [
                    "envId",
                    "identifier",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getFilters:getFilters": {
            "description": "Data source for retrieving a Harness Filter. This data source allow to fetch filters of types {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getFilters({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"Connector\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_filters(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"Connector\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetFilters.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"Connector\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupFilters(ctx, \u0026platform.LookupFiltersArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tType:       \"Connector\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetFiltersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getFilters(GetFiltersArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"Connector\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getFilters\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        type: Connector\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFilters.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project Identifier for the Entity\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFilters.\n",
                "properties": {
                    "filterProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getFiltersFilterProperty:getFiltersFilterProperty"
                        },
                        "description": "Properties of the filter entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filter. By default, everyone can view this filter.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Filter\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project Identifier for the Entity\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "filterProperties",
                    "filterVisibility",
                    "identifier",
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "harness:platform/getGcpConnector:getGcpConnector": {
            "description": "Datasource for looking up a Gcp connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGcpConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gcp_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGcpConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGcpConnector(ctx, \u0026platform.LookupGcpConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGcpConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGcpConnector(GetGcpConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGcpConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpConnector.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "inheritFromDelegates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGcpConnectorInheritFromDelegate:getGcpConnectorInheritFromDelegate"
                        },
                        "description": "Inherit configuration from delegate.\n"
                    },
                    "manuals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGcpConnectorManual:getGcpConnectorManual"
                        },
                        "description": "Manual credential configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "identifier",
                    "inheritFromDelegates",
                    "manuals",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getGitConnector:getGitConnector": {
            "description": "Datasource for looking up a Git connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_git_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGitConnector(ctx, \u0026platform.LookupGitConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitConnector(GetGitConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGitConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitConnector.\n",
                "properties": {
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitConnectorCredential:getGitConnectorCredential"
                        },
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the git repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ]
            }
        },
        "harness:platform/getGithubConnector:getGithubConnector": {
            "description": "Datasource for looking up a Github connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGithubConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_github_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGithubConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGithubConnector(ctx, \u0026platform.LookupGithubConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGithubConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGithubConnector(GetGithubConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGithubConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGithubConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGithubConnector.\n",
                "properties": {
                    "apiAuthentications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGithubConnectorApiAuthentication:getGithubConnectorApiAuthentication"
                        },
                        "description": "Configuration for using the github api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGithubConnectorCredential:getGithubConnectorCredential"
                        },
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the github repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiAuthentications",
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ]
            }
        },
        "harness:platform/getGitlabConnector:getGitlabConnector": {
            "description": "Datasource for looking up a Gitlab connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitlabConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitlab_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitlabConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGitlabConnector(ctx, \u0026platform.LookupGitlabConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitlabConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitlabConnector(GetGitlabConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitlabConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGitlabConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitlabConnector.\n",
                "properties": {
                    "apiAuthentications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitlabConnectorApiAuthentication:getGitlabConnectorApiAuthentication"
                        },
                        "description": "Configuration for using the gitlab api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitlabConnectorCredential:getGitlabConnectorCredential"
                        },
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the gitlab repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiAuthentications",
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ]
            }
        },
        "harness:platform/getGitopsAgent:getGitopsAgent": {
            "description": "Datasource for fetching a Harness Gitops Agents.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsAgent({\n    accountId: \"account_id\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_agent(account_id=\"account_id\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsAgent.Invoke(new()\n    {\n        AccountId = \"account_id\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsAgent(ctx, \u0026platform.GetGitopsAgentArgs{\n\t\t\tAccountId:  \"account_id\",\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsAgentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsAgent(GetGitopsAgentArgs.builder()\n            .accountId(\"account_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsAgent\n      Arguments:\n        accountId: account_id\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsAgent.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps agent.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps agent.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps agent.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps agent.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsAgent.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps agent.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the GitOps agent.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps agent.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsAgentMetadata:getGitopsAgentMetadata"
                        },
                        "description": "Metadata of the agent.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the GitOps agent.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps agent.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps agent.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the GitOps agents. These can be used to search or filter the GitOps agents.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Default: \"AGENT*TYPE*UNSET\"\nEnum: \"AGENT*TYPE*UNSET\" \"CONNECTED*ARGO*PROVIDER\" \"MANAGED*ARGO*PROVIDER\"\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "description",
                    "identifier",
                    "metadatas",
                    "name",
                    "tags",
                    "type",
                    "id"
                ]
            }
        },
        "harness:platform/getGitopsAgentDeployYaml:getGitopsAgentDeployYaml": {
            "description": "Datasource for fetching a Harness Gitops Agents.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsAgentDeployYaml({\n    accountId: \"account_id\",\n    identifier: \"identifier\",\n    namespace: \"namespace\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_agent_deploy_yaml(account_id=\"account_id\",\n    identifier=\"identifier\",\n    namespace=\"namespace\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsAgentDeployYaml.Invoke(new()\n    {\n        AccountId = \"account_id\",\n        Identifier = \"identifier\",\n        Namespace = \"namespace\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsAgentDeployYaml(ctx, \u0026platform.GetGitopsAgentDeployYamlArgs{\n\t\t\tAccountId:  \"account_id\",\n\t\t\tIdentifier: \"identifier\",\n\t\t\tNamespace:  \"namespace\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsAgentDeployYamlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsAgentDeployYaml(GetGitopsAgentDeployYamlArgs.builder()\n            .accountId(\"account_id\")\n            .identifier(\"identifier\")\n            .namespace(\"namespace\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsAgentDeployYaml\n      Arguments:\n        accountId: account_id\n        identifier: identifier\n        namespace: namespace\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsAgentDeployYaml.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps agent.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps agent.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The k8s namespace that the GitOps agent resides in.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps agent.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps agent.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "identifier",
                    "namespace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsAgentDeployYaml.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps agent.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps agent.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The k8s namespace that the GitOps agent resides in.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps agent.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps agent.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Deployment YAML of the GitOps agent.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "identifier",
                    "namespace",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getGitopsApplications:getGitopsApplications": {
            "description": "Datasource for fetching a Harness GitOps Application.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsApplications({\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    repoId: \"repo_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_applications(account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    repo_id=\"repo_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsApplications.Invoke(new()\n    {\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        RepoId = \"repo_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGitopsApplications(ctx, \u0026platform.LookupGitopsApplicationsArgs{\n\t\t\tAccountId:  \"account_id\",\n\t\t\tAgentId:    \"agent_id\",\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      \"org_id\",\n\t\t\tProjectId:  \"project_id\",\n\t\t\tRepoId:     \"repo_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsApplicationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsApplications(GetGitopsApplicationsArgs.builder()\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .repoId(\"repo_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsApplications\n      Arguments:\n        accountId: account_id\n        agentId: agent_id\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        repoId: repo_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsApplications.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps application.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps application.\n"
                    },
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsApplicationsApplication:getGitopsApplicationsApplication"
                        },
                        "description": "Definition of the GitOps application resource.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster identifier of the GitOps application.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps application.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of the GitOps application.\n"
                    },
                    "optionsRemoveExistingFinalizers": {
                        "type": "boolean",
                        "description": "Options to remove existing finalizers to delete the GitOps application.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps application.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps application.\n"
                    },
                    "queryProject": {
                        "type": "string",
                        "description": "Project names to filter the corresponding GitOps applications.\n"
                    },
                    "queryRefresh": {
                        "type": "string",
                        "description": "Forces the GitOps application to reconcile when set to true.\n"
                    },
                    "queryRepo": {
                        "type": "string",
                        "description": "Repo URL to restrict returned list applications.\n"
                    },
                    "queryResourceVersion": {
                        "type": "string",
                        "description": "Shows modifications after a version that is specified with a watch call.\n"
                    },
                    "querySelector": {
                        "type": "string",
                        "description": "Filters GitOps applications corresponding to the labels.\n"
                    },
                    "repoId": {
                        "type": "string",
                        "description": "Repository identifier of the GitOps application.\n"
                    },
                    "requestCascade": {
                        "type": "boolean",
                        "description": "Request cascade to delete the GitOps application.\n"
                    },
                    "requestName": {
                        "type": "string",
                        "description": "Request name to delete the GitOps application.\n"
                    },
                    "requestPropagationPolicy": {
                        "type": "string",
                        "description": "Request propagation policy to delete the GitOps application.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps application should be updated if existing and inserted if not.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps application has to be validated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "identifier",
                    "orgId",
                    "projectId",
                    "repoId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsApplications.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps application.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps application.\n"
                    },
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsApplicationsApplication:getGitopsApplicationsApplication"
                        },
                        "description": "Definition of the GitOps application resource.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster identifier of the GitOps application.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps application.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of the GitOps application.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the GitOps application.\n"
                    },
                    "optionsRemoveExistingFinalizers": {
                        "type": "boolean",
                        "description": "Options to remove existing finalizers to delete the GitOps application.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps application.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps application.\n"
                    },
                    "queryProject": {
                        "type": "string",
                        "description": "Project names to filter the corresponding GitOps applications.\n"
                    },
                    "queryRefresh": {
                        "type": "string",
                        "description": "Forces the GitOps application to reconcile when set to true.\n"
                    },
                    "queryRepo": {
                        "type": "string",
                        "description": "Repo URL to restrict returned list applications.\n"
                    },
                    "queryResourceVersion": {
                        "type": "string",
                        "description": "Shows modifications after a version that is specified with a watch call.\n"
                    },
                    "querySelector": {
                        "type": "string",
                        "description": "Filters GitOps applications corresponding to the labels.\n"
                    },
                    "repoId": {
                        "type": "string",
                        "description": "Repository identifier of the GitOps application.\n"
                    },
                    "requestCascade": {
                        "type": "boolean",
                        "description": "Request cascade to delete the GitOps application.\n"
                    },
                    "requestName": {
                        "type": "string",
                        "description": "Request name to delete the GitOps application.\n"
                    },
                    "requestPropagationPolicy": {
                        "type": "string",
                        "description": "Request propagation policy to delete the GitOps application.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps application should be updated if existing and inserted if not.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps application has to be validated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "identifier",
                    "name",
                    "orgId",
                    "projectId",
                    "repoId",
                    "id"
                ]
            }
        },
        "harness:platform/getGitopsCluster:getGitopsCluster": {
            "description": "Data source for fetching a Harness GitOps Cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsCluster({\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_cluster(account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsCluster.Invoke(new()\n    {\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsCluster(ctx, \u0026platform.GetGitopsClusterArgs{\n\t\t\tAccountId:  \"account_id\",\n\t\t\tAgentId:    \"agent_id\",\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsCluster(GetGitopsClusterArgs.builder()\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsCluster\n      Arguments:\n        accountId: account_id\n        agentId: agent_id\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsCluster.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps cluster.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps cluster.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps cluster.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps cluster.\n"
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsClusterQuery:getGitopsClusterQuery"
                        },
                        "description": "Query for the GitOps cluster resources.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsCluster.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps cluster.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps cluster.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps cluster.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps cluster.\n"
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsClusterQuery:getGitopsClusterQuery"
                        },
                        "description": "Query for the GitOps cluster resources.\n"
                    },
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsClusterRequest:getGitopsClusterRequest"
                        },
                        "description": "Cluster create or update request.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "identifier",
                    "requests",
                    "id"
                ]
            }
        },
        "harness:platform/getGitopsGnupg:getGitopsGnupg": {
            "description": "Data source for retrieving a GPG public key in the server's configuration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsGnupg({\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_gnupg(account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsGnupg.Invoke(new()\n    {\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGitopsGnupg(ctx, \u0026platform.LookupGitopsGnupgArgs{\n\t\t\tAccountId:  \"account_id\",\n\t\t\tAgentId:    \"agent_id\",\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsGnupgArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsGnupg(GetGitopsGnupgArgs.builder()\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsGnupg\n      Arguments:\n        accountId: account_id\n        agentId: agent_id\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsGnupg.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the GnuPG Key.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier for the GnuPG Key.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for the GnuPG Key.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the GnuPG Key.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the GnuPG Key.\n"
                    },
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsGnupgRequest:getGitopsGnupgRequest"
                        },
                        "description": "GnuPGPublicKey is a representation of a GnuPG public key\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsGnupg.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the GnuPG Key.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier for the GnuPG Key.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for the GnuPG Key.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the GnuPG Key.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the GnuPG Key.\n"
                    },
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsGnupgRequest:getGitopsGnupgRequest"
                        },
                        "description": "GnuPGPublicKey is a representation of a GnuPG public key\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "id"
                ]
            }
        },
        "harness:platform/getGitopsRepoCert:getGitopsRepoCert": {
            "description": "Data source for retrieving a GitOps RepoCert.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsRepoCertArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getGitopsRepoCert(GetGitopsRepoCertArgs.builder()\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getGitopsRepoCert\n      Arguments:\n        accountId: account_id\n        agentId: agent_id\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsRepoCert.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "account identifier of the Repository Certificates.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "agent identifier of the Repository Certificates.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization identifier of the Repository Certificates.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project identifier of the Repository Certificates.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsRepoCert.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "account identifier of the Repository Certificates.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "agent identifier of the Repository Certificates.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization identifier of the Repository Certificates.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project identifier of the Repository Certificates.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "id"
                ]
            }
        },
        "harness:platform/getGitopsRepoCred:getGitopsRepoCred": {
            "description": "Data source for retrieving a GitOps RepoCred.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getGitopsRepoCred({\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_gitops_repo_cred(account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetGitopsRepoCred.Invoke(new()\n    {\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGitopsRepoCred(ctx, \u0026platform.LookupGitopsRepoCredArgs{\n\t\t\tAccountId:  \"account_id\",\n\t\t\tAgentId:    \"agent_id\",\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsRepoCredArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getGitopsRepoCred(GetGitopsRepoCredArgs.builder()\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getGitopsRepoCred\n      Arguments:\n        accountId: account_id\n        agentId: agent_id\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsRepoCred.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "account identifier of the Repository Credentials.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "agent identifier of the Repository Credentials.\n"
                    },
                    "creds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsRepoCredCred:getGitopsRepoCredCred"
                        },
                        "description": "credential details.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the Repository Credentials.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the Repository Credential.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the Repository Credential.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "if the Repository credential should be upserted.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsRepoCred.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "account identifier of the Repository Credentials.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "agent identifier of the Repository Credentials.\n"
                    },
                    "creds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsRepoCredCred:getGitopsRepoCredCred"
                        },
                        "description": "credential details.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the Repository Credentials.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the Repository Credential.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the Repository Credential.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "if the Repository credential should be upserted.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "creds",
                    "identifier",
                    "id"
                ]
            }
        },
        "harness:platform/getGitopsRepository:getGitopsRepository": {
            "description": "Data Source for fetching a Harness GitOps Repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsRepository({\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_repository(account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsRepository.Invoke(new()\n    {\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsRepository(ctx, \u0026platform.GetGitopsRepositoryArgs{\n\t\t\tAccountId:  \"account_id\",\n\t\t\tAgentId:    \"agent_id\",\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsRepository(GetGitopsRepositoryArgs.builder()\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsRepository\n      Arguments:\n        accountId: account_id\n        agentId: agent_id\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsRepository.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps repository.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps repository.\n"
                    },
                    "credsOnly": {
                        "type": "boolean",
                        "description": "Indicates if to operate on credential set instead of repository.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps repository.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps repository.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps repository.\n"
                    },
                    "queryForceRefresh": {
                        "type": "boolean",
                        "description": "Indicates to force refresh query for repository.\n"
                    },
                    "queryProject": {
                        "type": "string",
                        "description": "Project to query for the GitOps repo.\n"
                    },
                    "queryRepo": {
                        "type": "string",
                        "description": "GitOps repository to query.\n"
                    },
                    "updateMasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsRepositoryUpdateMask:getGitopsRepositoryUpdateMask"
                        },
                        "description": "Update mask of the repository.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps repository should be updated if existing and inserted if not.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsRepository.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps repository.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps repository.\n"
                    },
                    "credsOnly": {
                        "type": "boolean",
                        "description": "Indicates if to operate on credential set instead of repository.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps repository.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps repository.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps repository.\n"
                    },
                    "queryForceRefresh": {
                        "type": "boolean",
                        "description": "Indicates to force refresh query for repository.\n"
                    },
                    "queryProject": {
                        "type": "string",
                        "description": "Project to query for the GitOps repo.\n"
                    },
                    "queryRepo": {
                        "type": "string",
                        "description": "GitOps repository to query.\n"
                    },
                    "repos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsRepositoryRepo:getGitopsRepositoryRepo"
                        },
                        "description": "Repo details holding application configurations.\n"
                    },
                    "updateMasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsRepositoryUpdateMask:getGitopsRepositoryUpdateMask"
                        },
                        "description": "Update mask of the repository.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps repository should be updated if existing and inserted if not.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "identifier",
                    "repos",
                    "id"
                ]
            }
        },
        "harness:platform/getHelmConnector:getHelmConnector": {
            "description": "Datasource for looking up a HTTP Helm connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getHelmConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_helm_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetHelmConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupHelmConnector(ctx, \u0026platform.LookupHelmConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetHelmConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getHelmConnector(GetHelmConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getHelmConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getHelmConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHelmConnector.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getHelmConnectorCredential:getHelmConnectorCredential"
                        },
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the helm server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getInfrastructure:getInfrastructure": {
            "description": "Data source for retrieving a Harness Infrastructure.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getInfrastructure({\n    envId: \"env_id\",\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_infrastructure(env_id=\"env_id\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetInfrastructure.Invoke(new()\n    {\n        EnvId = \"env_id\",\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupInfrastructure(ctx, \u0026platform.LookupInfrastructureArgs{\n\t\t\tEnvId:      \"env_id\",\n\t\t\tIdentifier: \"identifier\",\n\t\t\tName:       pulumi.StringRef(\"name\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetInfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .envId(\"env_id\")\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getInfrastructure\n      Arguments:\n        envId: env_id\n        identifier: identifier\n        name: name\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInfrastructure.\n",
                "properties": {
                    "envId": {
                        "type": "string",
                        "description": "environment identifier.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "envId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInfrastructure.\n",
                "properties": {
                    "deploymentType": {
                        "type": "string",
                        "description": "Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "envId": {
                        "type": "string",
                        "description": "environment identifier.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Infrastructure YAML\n"
                    }
                },
                "type": "object",
                "required": [
                    "deploymentType",
                    "description",
                    "envId",
                    "identifier",
                    "tags",
                    "type",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getInputSet:getInputSet": {
            "description": "Data source for retrieving a Harness input set.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInputSet.\n",
                "properties": {
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getInputSetGitDetails:getInputSetGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": "Identifier of the pipeline\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "pipelineId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInputSet.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getInputSetGitDetails:getInputSetGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": "Identifier of the pipeline\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Input Set YAML\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "orgId",
                    "pipelineId",
                    "projectId",
                    "tags",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getJiraConnector:getJiraConnector": {
            "description": "Datasource for looking up a Jira connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getJiraConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_jira_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetJiraConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupJiraConnector(ctx, \u0026platform.LookupJiraConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetJiraConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getJiraConnector(GetJiraConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getJiraConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getJiraConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getJiraConnector.\n",
                "properties": {
                    "auths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getJiraConnectorAuth:getJiraConnectorAuth"
                        },
                        "description": "The credentials to use for the jira authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Jira server.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use for authentication.\n"
                    },
                    "usernameRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "auths",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "passwordRef",
                    "tags",
                    "url",
                    "username",
                    "usernameRef",
                    "id"
                ]
            }
        },
        "harness:platform/getKubernetesConnector:getKubernetesConnector": {
            "description": "Datasource for looking up a Kubernetes connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getKubernetesConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_kubernetes_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetKubernetesConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupKubernetesConnector(ctx, \u0026platform.LookupKubernetesConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetKubernetesConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getKubernetesConnector(GetKubernetesConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getKubernetesConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesConnector.\n",
                "properties": {
                    "clientKeyCerts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorClientKeyCert:getKubernetesConnectorClientKeyCert"
                        },
                        "description": "Client key and certificate config for the connector.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Selectors to use for the delegate.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "inheritFromDelegates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorInheritFromDelegate:getKubernetesConnectorInheritFromDelegate"
                        },
                        "description": "Credentials are inherited from the delegate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "openidConnects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorOpenidConnect:getKubernetesConnectorOpenidConnect"
                        },
                        "description": "OpenID configuration for the connector.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorServiceAccount:getKubernetesConnectorServiceAccount"
                        },
                        "description": "Service account for the connector.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "usernamePasswords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorUsernamePassword:getKubernetesConnectorUsernamePassword"
                        },
                        "description": "Username and password for the connector.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientKeyCerts",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "inheritFromDelegates",
                    "openidConnects",
                    "serviceAccounts",
                    "tags",
                    "usernamePasswords",
                    "id"
                ]
            }
        },
        "harness:platform/getManualFreeze:getManualFreeze": {
            "description": "DataSource for deployment freeze in harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getManualFreeze({\n    accountId: \"account_id\",\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_manual_freeze(account_id=\"account_id\",\n    identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetManualFreeze.Invoke(new()\n    {\n        AccountId = \"account_id\",\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupManualFreeze(ctx, \u0026platform.LookupManualFreezeArgs{\n\t\t\tAccountId:  \"account_id\",\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetManualFreezeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getManualFreeze(GetManualFreezeArgs.builder()\n            .accountId(\"account_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getManualFreeze\n      Arguments:\n        accountId: account_id\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getManualFreeze.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier of the freeze\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the freeze\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the freeze\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the freeze\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getManualFreeze.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier of the freeze\n"
                    },
                    "currentOrUpcomingWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getManualFreezeCurrentOrUpcomingWindow:getManualFreezeCurrentOrUpcomingWindow"
                        },
                        "description": "Current or upcoming windows\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the freeze\n"
                    },
                    "freezeWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getManualFreezeFreezeWindow:getManualFreezeFreezeWindow"
                        },
                        "description": "Freeze windows in the freeze response\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the freeze\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the freeze\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the freeze\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the freeze\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope of the freeze\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the freeze\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with the freeze\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of freeze\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Yaml of the freeze\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "currentOrUpcomingWindows",
                    "description",
                    "freezeWindows",
                    "identifier",
                    "name",
                    "scope",
                    "status",
                    "tags",
                    "type",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getMonitoredService:getMonitoredService": {
            "description": "Data source for retrieving a monitored service.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetMonitoredServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getMonitoredService(GetMonitoredServiceArgs.builder()\n            .accountId(\"account_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getMonitoredService\n      Arguments:\n        accountId: account_id\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMonitoredService.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the monitored service.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Identifier of the organization in which the monitored service is configured.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier of the project in which the monitored service is configured.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMonitoredService.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the monitored service.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Identifier of the organization in which the monitored service is configured.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier of the project in which the monitored service is configured.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "orgId",
                    "projectId",
                    "id"
                ]
            }
        },
        "harness:platform/getNexusConnector:getNexusConnector": {
            "description": "Datasource for looking up a Nexus connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getNexusConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_nexus_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetNexusConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupNexusConnector(ctx, \u0026platform.LookupNexusConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetNexusConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getNexusConnector(GetNexusConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getNexusConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNexusConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNexusConnector.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getNexusConnectorCredential:getNexusConnectorCredential"
                        },
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Nexus server.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                    }
                },
                "type": "object",
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "version",
                    "id"
                ]
            }
        },
        "harness:platform/getOrganization:getOrganization": {
            "description": "Data source for retrieving a Harness organization\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst this = harness.platform.getOrganization({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nthis = harness.platform.get_organization(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Harness.Platform.GetOrganization.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupOrganization(ctx, \u0026platform.LookupOrganizationArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = PlatformFunctions.getOrganization(GetOrganizationArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: harness:platform:getOrganization\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getPagerdutyConnector:getPagerdutyConnector": {
            "description": "Datasource for looking up a PagerDuty connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getPagerdutyConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_pagerduty_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetPagerdutyConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupPagerdutyConnector(ctx, \u0026platform.LookupPagerdutyConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPagerdutyConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getPagerdutyConnector(GetPagerdutyConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getPagerdutyConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPagerdutyConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPagerdutyConnector.\n",
                "properties": {
                    "apiTokenRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiTokenRef",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getPermissions:getPermissions": {
            "description": "Data source for retrieving permissions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getPermissions({\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_permissions(org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetPermissions.Invoke(new()\n    {\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetPermissions(ctx, \u0026platform.GetPermissionsArgs{\n\t\t\tOrgId:     pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId: pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getPermissions(GetPermissionsArgs.builder()\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getPermissions\n      Arguments:\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPermissions.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPermissions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getPermissionsPermission:getPermissionsPermission"
                        },
                        "description": "Response of the api\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "permissions",
                    "id"
                ]
            }
        },
        "harness:platform/getPipeline:getPipeline": {
            "description": "Data source for retrieving a Harness pipeline.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getPipeline({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_pipeline(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetPipeline.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupPipeline(ctx, \u0026platform.LookupPipelineArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      \"org_id\",\n\t\t\tProjectId:  \"project_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getPipeline(GetPipelineArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getPipeline\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPipeline.\n",
                "properties": {
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getPipelineGitDetails:getPipelineGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipeline.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getPipelineGitDetails:getPipelineGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "templateApplied": {
                        "type": "boolean",
                        "description": "If true, returns Pipeline YAML with Templates applied on it.\n"
                    },
                    "templateAppliedPipelineYaml": {
                        "type": "string",
                        "description": "Pipeline YAML after resolving Templates (returned as a String).\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "YAML of the pipeline.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "orgId",
                    "projectId",
                    "tags",
                    "templateApplied",
                    "templateAppliedPipelineYaml",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getPipelineFilters:getPipelineFilters": {
            "description": "Data source for retrieving a Harness Pipeline Filter.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPipelineFilters.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipelineFilters.\n",
                "properties": {
                    "filterProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getPipelineFiltersFilterProperty:getPipelineFiltersFilterProperty"
                        },
                        "description": "Properties of the filter entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filter. By default, everyone can view this filter.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Filter.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "filterProperties",
                    "filterVisibility",
                    "identifier",
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "harness:platform/getPolicy:getPolicy": {
            "description": "Data source for retrieving a Harness policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getPolicy({\n    identifier: harness_platform_policy.test.identifier,\n    name: harness_platform_policy.test.name,\n    rego: \"package test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_policy(identifier=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n    name=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n    rego=\"package test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetPolicy.Invoke(new()\n    {\n        Identifier = harness_platform_policy.Test.Identifier,\n        Name = harness_platform_policy.Test.Name,\n        Rego = \"package test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupPolicy(ctx, \u0026platform.LookupPolicyArgs{\n\t\t\tIdentifier: pulumi.StringRef(harness_platform_policy.Test.Identifier),\n\t\t\tName:       pulumi.StringRef(harness_platform_policy.Test.Name),\n\t\t\tRego:       \"package test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getPolicy(GetPolicyArgs.builder()\n            .identifier(harness_platform_policy.test().identifier())\n            .name(harness_platform_policy.test().name())\n            .rego(\"package test\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getPolicy\n      Arguments:\n        identifier: ${harness_platform_policy.test.identifier}\n        name: ${harness_platform_policy.test.name}\n        rego: package test\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicy.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "rego": {
                        "type": "string",
                        "description": "Rego code for the policy.\n"
                    }
                },
                "type": "object",
                "required": [
                    "rego"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicy.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "rego": {
                        "type": "string",
                        "description": "Rego code for the policy.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "rego",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getPolicyset:getPolicyset": {
            "description": "Data source for retrieving a Harness policyset.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getPolicyset({\n    action: \"onrun\",\n    enabled: true,\n    identifier: \"harness_platform_policyset.test.identifier\",\n    name: \"harness_platform_policyset.test.name\",\n    policies: [{\n        identifier: \"always_run\",\n        severity: \"warning\",\n    }],\n    type: \"pipeline\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_policyset(action=\"onrun\",\n    enabled=True,\n    identifier=\"harness_platform_policyset.test.identifier\",\n    name=\"harness_platform_policyset.test.name\",\n    policies=[harness.platform.GetPolicysetPolicyArgs(\n        identifier=\"always_run\",\n        severity=\"warning\",\n    )],\n    type=\"pipeline\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetPolicyset.Invoke(new()\n    {\n        Action = \"onrun\",\n        Enabled = true,\n        Identifier = \"harness_platform_policyset.test.identifier\",\n        Name = \"harness_platform_policyset.test.name\",\n        Policies = new[]\n        {\n            new Harness.Platform.Inputs.GetPolicysetPolicyInputArgs\n            {\n                Identifier = \"always_run\",\n                Severity = \"warning\",\n            },\n        },\n        Type = \"pipeline\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupPolicyset(ctx, \u0026platform.LookupPolicysetArgs{\n\t\t\tAction:     \"onrun\",\n\t\t\tEnabled:    pulumi.BoolRef(true),\n\t\t\tIdentifier: \"harness_platform_policyset.test.identifier\",\n\t\t\tName:       pulumi.StringRef(\"harness_platform_policyset.test.name\"),\n\t\t\tPolicies: []platform.GetPolicysetPolicy{\n\t\t\t\t{\n\t\t\t\t\tIdentifier: \"always_run\",\n\t\t\t\t\tSeverity:   \"warning\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: \"pipeline\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPolicysetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getPolicyset(GetPolicysetArgs.builder()\n            .action(\"onrun\")\n            .enabled(true)\n            .identifier(\"harness_platform_policyset.test.identifier\")\n            .name(\"harness_platform_policyset.test.name\")\n            .policies(GetPolicysetPolicyArgs.builder()\n                .identifier(\"always_run\")\n                .severity(\"warning\")\n                .build())\n            .type(\"pipeline\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getPolicyset\n      Arguments:\n        action: onrun\n        enabled: true\n        identifier: harness_platform_policyset.test.identifier\n        name: harness_platform_policyset.test.name\n        policies:\n          - identifier: always_run\n            severity: warning\n        type: pipeline\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyset.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action code for the policyset.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled for the policyset.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getPolicysetPolicy:getPolicysetPolicy"
                        },
                        "description": "List of policy identifiers / severity for the policyset.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the policyset.\n"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "identifier",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyset.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action code for the policyset.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled for the policyset.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getPolicysetPolicy:getPolicysetPolicy"
                        },
                        "description": "List of policy identifiers / severity for the policyset.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the policyset.\n"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "description",
                    "identifier",
                    "tags",
                    "type",
                    "id"
                ]
            }
        },
        "harness:platform/getProject:getProject": {
            "description": "Data source for retrieving a Harness project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst exampleById = harness.platform.getProject({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n});\nconst exampleByName = harness.platform.getProject({\n    name: \"name\",\n    orgId: \"org_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample_by_id = harness.platform.get_project(identifier=\"identifier\",\n    org_id=\"org_id\")\nexample_by_name = harness.platform.get_project(name=\"name\",\n    org_id=\"org_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleById = Harness.Platform.GetProject.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n    });\n\n    var exampleByName = Harness.Platform.GetProject.Invoke(new()\n    {\n        Name = \"name\",\n        OrgId = \"org_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupProject(ctx, \u0026platform.LookupProjectArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      \"org_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.LookupProject(ctx, \u0026platform.LookupProjectArgs{\n\t\t\tName:  pulumi.StringRef(\"name\"),\n\t\t\tOrgId: \"org_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleById = PlatformFunctions.getProject(GetProjectArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .build());\n\n        final var exampleByName = PlatformFunctions.getProject(GetProjectArgs.builder()\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleById:\n    fn::invoke:\n      Function: harness:platform:getProject\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n  exampleByName:\n    fn::invoke:\n      Function: harness:platform:getProject\n      Arguments:\n        name: name\n        orgId: org_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "modules": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Modules in the project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "description",
                    "modules",
                    "orgId",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getPrometheusConnector:getPrometheusConnector": {
            "description": "Datasource for looking up a Prometheus connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getPrometheusConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_prometheus_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetPrometheusConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupPrometheusConnector(ctx, \u0026platform.LookupPrometheusConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPrometheusConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getPrometheusConnector(GetPrometheusConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getPrometheusConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrometheusConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrometheusConnector.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getPrometheusConnectorHeader:getPrometheusConnectorHeader"
                        },
                        "description": "Headers.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Prometheus server.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "delegateSelectors",
                    "description",
                    "headers",
                    "identifier",
                    "passwordRef",
                    "tags",
                    "url",
                    "userName",
                    "id"
                ]
            }
        },
        "harness:platform/getResourceGroup:getResourceGroup": {
            "description": "DataSource for looking up resource group in harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getResourceGroup({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_resource_group(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetResourceGroup.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupResourceGroup(ctx, \u0026platform.LookupResourceGroupArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetResourceGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getResourceGroup(GetResourceGroupArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getResourceGroup\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getResourceGroup.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getResourceGroup.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier of the account\n"
                    },
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this resource group can be used\n"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of the environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "includedScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getResourceGroupIncludedScope:getResourceGroupIncludedScope"
                        },
                        "description": "Included scopes\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "resourceFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getResourceGroupResourceFilter:getResourceGroupResourceFilter"
                        },
                        "description": "Contains resource filter for a resource group\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "allowedScopeLevels",
                    "color",
                    "description",
                    "identifier",
                    "includedScopes",
                    "resourceFilters",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getRoleAssignments:getRoleAssignments": {
            "description": "Data source for retrieving role assignment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getRoleAssignments({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_role_assignments(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetRoleAssignments.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupRoleAssignments(ctx, \u0026platform.LookupRoleAssignmentsArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetRoleAssignmentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getRoleAssignments(GetRoleAssignmentsArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getRoleAssignments\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoleAssignments.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for role assignment.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Org identifier.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoleAssignments.\n",
                "properties": {
                    "disabled": {
                        "type": "boolean",
                        "description": "Disabled or not.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for role assignment.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Managed or not.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Org identifier.\n"
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getRoleAssignmentsPrincipal:getRoleAssignmentsPrincipal"
                        },
                        "description": "Principal.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n"
                    },
                    "resourceGroupIdentifier": {
                        "type": "string",
                        "description": "Resource group identifier.\n"
                    },
                    "roleIdentifier": {
                        "type": "string",
                        "description": "Role identifier.\n"
                    }
                },
                "type": "object",
                "required": [
                    "disabled",
                    "identifier",
                    "managed",
                    "principals",
                    "resourceGroupIdentifier",
                    "roleIdentifier",
                    "id"
                ]
            }
        },
        "harness:platform/getRoles:getRoles": {
            "description": "Data source for retrieving roles\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getRoles({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_roles(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetRoles.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupRoles(ctx, \u0026platform.LookupRolesArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getRoles(GetRolesArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getRoles\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoles.\n",
                "properties": {
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this role can be used\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the permission identifiers\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoles.\n",
                "properties": {
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this role can be used\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the permission identifiers\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowedScopeLevels",
                    "description",
                    "identifier",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getSecretFile:getSecretFile": {
            "description": "Datasource for looking up secert file type secret.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getSecretFile({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_secret_file(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSecretFile.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSecretFile(ctx, \u0026platform.LookupSecretFileArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSecretFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSecretFile(GetSecretFileArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSecretFile\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretFile.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretFile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "Path of the file containing secret value\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretManagerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the Secret Manager used to manage the secret.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "filePath",
                    "identifier",
                    "secretManagerIdentifier",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getSecretSshkey:getSecretSshkey": {
            "description": "Resource for looking up an SSH Key type secret.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getSecretSshkey({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_secret_sshkey(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSecretSshkey.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSecretSshkey(ctx, \u0026platform.LookupSecretSshkeyArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSecretSshkeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSecretSshkey(GetSecretSshkeyArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSecretSshkey\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretSshkey.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretSshkey.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "kerberos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getSecretSshkeyKerbero:getSecretSshkeyKerbero"
                        },
                        "description": "Kerberos authentication scheme\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "SSH port\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "sshes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getSecretSshkeySsh:getSecretSshkeySsh"
                        },
                        "description": "Kerberos authentication scheme\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "identifier",
                    "kerberos",
                    "port",
                    "sshes",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getSecretText:getSecretText": {
            "description": "DataSource for looking up secret of type secret text.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getSecretText({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_secret_text(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetSecretText.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSecretText(ctx, \u0026platform.LookupSecretTextArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSecretTextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getSecretText(GetSecretTextArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getSecretText\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretText.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretText.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretManagerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the Secret Manager used to manage the secret.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the Secret\n",
                        "secret": true
                    },
                    "valueType": {
                        "type": "string",
                        "description": "This has details to specify if the secret value is Inline or Reference.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "identifier",
                    "secretManagerIdentifier",
                    "tags",
                    "value",
                    "valueType",
                    "id"
                ]
            }
        },
        "harness:platform/getService:getService": {
            "description": "Data source for retrieving a Harness service.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getService({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_service(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetService.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupService(ctx, \u0026platform.LookupServiceArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getService(GetServiceArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getService\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Input Set YAML\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "identifier",
                    "tags",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getServiceAccount:getServiceAccount": {
            "description": "Data source for retrieving service account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getServiceAccount({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_service_account(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetServiceAccount.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupServiceAccount(ctx, \u0026platform.LookupServiceAccountArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getServiceAccount\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceAccount.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the Entity.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of the Service Account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "description",
                    "email",
                    "tags",
                    "id"
                ]
            }
        },
        "harness:platform/getSlo:getSlo": {
            "description": "Data source for retrieving an SLO.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSloArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSlo(GetSloArgs.builder()\n            .accountId(\"account_id\")\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSlo\n      Arguments:\n        accountId: account_id\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSlo.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the SLO.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Identifier of the organization in which the SLO is configured.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier of the project in which the SLO is configured.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSlo.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the SLO.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Identifier of the organization in which the SLO is configured.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier of the project in which the SLO is configured.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "orgId",
                    "projectId",
                    "id"
                ]
            }
        },
        "harness:platform/getSplunkConnector:getSplunkConnector": {
            "description": "Datasource for looking up a Splunk connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getSplunkConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_splunk_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSplunkConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSplunkConnector(ctx, \u0026platform.LookupSplunkConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSplunkConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSplunkConnector(GetSplunkConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSplunkConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSplunkConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSplunkConnector.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Splunk account id.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "The reference to the Harness secret containing the Splunk password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Splunk server.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username used for connecting to Splunk.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "passwordRef",
                    "tags",
                    "url",
                    "username",
                    "id"
                ]
            }
        },
        "harness:platform/getSumologicConnector:getSumologicConnector": {
            "description": "Datasource for looking up a Sumologic connector.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getSumologicConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_sumologic_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSumologicConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSumologicConnector(ctx, \u0026platform.LookupSumologicConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSumologicConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSumologicConnector(GetSumologicConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSumologicConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSumologicConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSumologicConnector.\n",
                "properties": {
                    "accessIdRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the access id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "accessKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the SumoLogic server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessIdRef",
                    "accessKeyRef",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "harness:platform/getTemplate:getTemplate": {
            "description": "Data source for retrieving a Harness pipeline.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getTemplate({\n    identifier: \"identifier\",\n    version: \"version\",\n});\nconst example1 = harness.platform.getTemplate({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    version: \"version\",\n});\nconst example2 = harness.platform.getTemplate({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    version: \"version\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_template(identifier=\"identifier\",\n    version=\"version\")\nexample1 = harness.platform.get_template(identifier=\"identifier\",\n    org_id=\"org_id\",\n    version=\"version\")\nexample2 = harness.platform.get_template(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    version=\"version\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetTemplate.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        Version = \"version\",\n    });\n\n    var example1 = Harness.Platform.GetTemplate.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        Version = \"version\",\n    });\n\n    var example2 = Harness.Platform.GetTemplate.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Version = \"version\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupTemplate(ctx, \u0026platform.LookupTemplateArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tVersion:    pulumi.StringRef(\"version\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.LookupTemplate(ctx, \u0026platform.LookupTemplateArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tVersion:    pulumi.StringRef(\"version\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.LookupTemplate(ctx, \u0026platform.LookupTemplateArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tVersion:    pulumi.StringRef(\"version\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getTemplate(GetTemplateArgs.builder()\n            .identifier(\"identifier\")\n            .version(\"version\")\n            .build());\n\n        final var example1 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .version(\"version\")\n            .build());\n\n        final var example2 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .version(\"version\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getTemplate\n      Arguments:\n        identifier: identifier\n        version: version\n  example1:\n    fn::invoke:\n      Function: harness:platform:getTemplate\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        version: version\n  example2:\n    fn::invoke:\n      Function: harness:platform:getTemplate\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        version: version\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTemplate.\n",
                "properties": {
                    "branchName": {
                        "type": "string",
                        "description": "Version Label for Template.\n"
                    },
                    "childType": {
                        "type": "string",
                        "description": "Defines child template type.\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getTemplateGitDetails:getTemplateGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "isStable": {
                        "type": "boolean",
                        "description": "True if given version for template to be set as stable.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope of template.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version Label for Template.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTemplate.\n",
                "properties": {
                    "branchName": {
                        "type": "string",
                        "description": "Version Label for Template.\n"
                    },
                    "childType": {
                        "type": "string",
                        "description": "Defines child template type.\n"
                    },
                    "connectorRef": {
                        "type": "string",
                        "description": "Identifier of the Harness Connector used for CRUD operations on the Entity.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getTemplateGitDetails:getTemplateGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "isStable": {
                        "type": "boolean",
                        "description": "True if given version for template to be set as stable.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope of template.\n"
                    },
                    "storeType": {
                        "type": "string",
                        "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "templateYaml": {
                        "type": "string",
                        "description": "Yaml for creating new Template.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version Label for Template.\n"
                    }
                },
                "type": "object",
                "required": [
                    "connectorRef",
                    "description",
                    "storeType",
                    "tags",
                    "templateYaml",
                    "id"
                ]
            }
        },
        "harness:platform/getTemplateFilters:getTemplateFilters": {
            "description": "Data source for retrieving a Harness Template Filter.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getTemplateFilters({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"Template\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_template_filters(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"Template\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetTemplateFilters.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"Template\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupTemplateFilters(ctx, \u0026platform.LookupTemplateFiltersArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tType:       \"Template\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetTemplateFiltersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getTemplateFilters(GetTemplateFiltersArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"Template\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getTemplateFilters\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        type: Template\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTemplateFilters.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {TemplateSetup, TemplateExecution, Deployment, Template, EnvironmentGroup, Environment}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTemplateFilters.\n",
                "properties": {
                    "filterProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getTemplateFiltersFilterProperty:getTemplateFiltersFilterProperty"
                        },
                        "description": "Properties of the filter entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filter. By default, everyone can view this filter.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Filter.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {TemplateSetup, TemplateExecution, Deployment, Template, EnvironmentGroup, Environment}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "filterProperties",
                    "filterVisibility",
                    "identifier",
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "harness:platform/getTriggers:getTriggers": {
            "description": "Data source for retrieving a Harness trigger.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getTriggers({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    targetId: \"pipeline_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_triggers(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    target_id=\"pipeline_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetTriggers.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        TargetId = \"pipeline_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupTriggers(ctx, \u0026platform.LookupTriggersArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      \"org_id\",\n\t\t\tProjectId:  \"project_id\",\n\t\t\tTargetId:   \"pipeline_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetTriggersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getTriggers(GetTriggersArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .targetId(\"pipeline_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getTriggers\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        targetId: pipeline_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTriggers.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "ignoreError": {
                        "type": "boolean",
                        "description": "ignore error default false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "Identifier of the target pipeline\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "projectId",
                    "targetId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTriggers.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "ignoreError": {
                        "type": "boolean",
                        "description": "ignore error default false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "Identifier of the target pipeline\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "trigger yaml\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "orgId",
                    "projectId",
                    "tags",
                    "targetId",
                    "yaml",
                    "id"
                ]
            }
        },
        "harness:platform/getUser:getUser": {
            "description": "Data source for retrieving the user based on the API key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getUser({\n    email: \"john.doe@harness.io\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_user(email=\"john.doe@harness.io\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetUser.Invoke(new()\n    {\n        Email = \"john.doe@harness.io\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupUser(ctx, \u0026platform.LookupUserArgs{\n\t\t\tEmail:     \"john.doe@harness.io\",\n\t\t\tOrgId:     pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId: pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getUser(GetUserArgs.builder()\n            .email(\"john.doe@harness.io\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getUser\n      Arguments:\n        email: john.doe@harness.io\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "disabled": {
                        "type": "boolean",
                        "description": "Whether or not the user account is disabled.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "externallyManaged": {
                        "type": "boolean",
                        "description": "Whether or not the user account is externally managed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the user.\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Whether or not the user account is locked.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "disabled",
                    "email",
                    "externallyManaged",
                    "identifier",
                    "locked",
                    "name",
                    "id"
                ]
            }
        },
        "harness:platform/getUsergroup:getUsergroup": {
            "description": "Data source for retrieving a Harness User Group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst exampleById = harness.platform.getUsergroup({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\nconst exampleByName = harness.platform.getUsergroup({\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample_by_id = harness.platform.get_usergroup(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\nexample_by_name = harness.platform.get_usergroup(name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleById = Harness.Platform.GetUsergroup.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n    var exampleByName = Harness.Platform.GetUsergroup.Invoke(new()\n    {\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupUsergroup(ctx, \u0026platform.LookupUsergroupArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.LookupUsergroup(ctx, \u0026platform.LookupUsergroupArgs{\n\t\t\tName:      pulumi.StringRef(\"name\"),\n\t\t\tOrgId:     pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId: pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetUsergroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleById = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n        final var exampleByName = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleById:\n    fn::invoke:\n      Function: harness:platform:getUsergroup\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n  exampleByName:\n    fn::invoke:\n      Function: harness:platform:getUsergroup\n      Arguments:\n        name: name\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsergroup.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "notificationConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getUsergroupNotificationConfig:getUsergroupNotificationConfig"
                        },
                        "description": "List of notification settings.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsergroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "externallyManaged": {
                        "type": "boolean",
                        "description": "Whether the user group is externally managed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "linkedSsoDisplayName": {
                        "type": "string",
                        "description": "Name of the linked SSO.\n"
                    },
                    "linkedSsoId": {
                        "type": "string",
                        "description": "The SSO account ID that the user group is linked to.\n"
                    },
                    "linkedSsoType": {
                        "type": "string",
                        "description": "Type of linked SSO.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "notificationConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getUsergroupNotificationConfig:getUsergroupNotificationConfig"
                        },
                        "description": "List of notification settings.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "ssoGroupId": {
                        "type": "string",
                        "description": "Identifier of the userGroup in SSO.\n"
                    },
                    "ssoGroupName": {
                        "type": "string",
                        "description": "Name of the SSO userGroup.\n"
                    },
                    "ssoLinked": {
                        "type": "boolean",
                        "description": "Whether sso is linked or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of users in the UserGroup.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "externallyManaged",
                    "linkedSsoDisplayName",
                    "linkedSsoId",
                    "linkedSsoType",
                    "ssoGroupId",
                    "ssoGroupName",
                    "ssoLinked",
                    "tags",
                    "users",
                    "id"
                ]
            }
        },
        "harness:platform/getVariables:getVariables": {
            "description": "Data source for retrieving a Harness Variable.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getVariables({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_variables(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetVariables.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupVariables(ctx, \u0026platform.LookupVariablesArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetVariablesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getVariables(GetVariablesArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getVariables\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVariables.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVariables.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the entity\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Variable\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity\n"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getVariablesSpec:getVariablesSpec"
                        },
                        "description": "List of Spce Fields.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Variable\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "identifier",
                    "name",
                    "specs",
                    "type",
                    "id"
                ]
            }
        },
        "harness:platform/getVaultConnector:getVaultConnector": {
            "description": "DataSource for looking up a Vault connector in Harness.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getVaultConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_vault_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetVaultConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupVaultConnector(ctx, \u0026platform.LookupVaultConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetVaultConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getVaultConnector(GetVaultConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getVaultConnector\n      Arguments:\n        identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVaultConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVaultConnector.\n",
                "properties": {
                    "accessType": {
                        "type": "string",
                        "description": "Access type.\n"
                    },
                    "appRoleId": {
                        "type": "string",
                        "description": "ID of App Role.\n"
                    },
                    "authToken": {
                        "type": "string",
                        "description": "The authentication token for Vault.\n"
                    },
                    "awsRegion": {
                        "type": "string",
                        "description": "The AWS region where AWS IAM auth will happen.\n"
                    },
                    "basePath": {
                        "type": "string",
                        "description": "The location of the Vault directory where Secret will be stored.\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Is default or not.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Is default or not.\n"
                    },
                    "isReadOnly": {
                        "type": "boolean",
                        "description": "Read only or not.\n"
                    },
                    "k8sAuthEndpoint": {
                        "type": "string",
                        "description": "The path where kubernetes auth is enabled in Vault.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The Vault namespace where Secret will be created.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Read only.\n"
                    },
                    "renewAppRoleToken": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if appRole token renewal is enabled or not.\n"
                    },
                    "renewalIntervalMinutes": {
                        "type": "integer",
                        "description": "The time interval for token renewal.\n"
                    },
                    "secretEngineManuallyConfigured": {
                        "type": "boolean",
                        "description": "Manually entered Secret Engine.\n"
                    },
                    "secretEngineName": {
                        "type": "string",
                        "description": "Name of the Secret Engine.\n"
                    },
                    "secretEngineVersion": {
                        "type": "integer",
                        "description": "Version of Secret Engine.\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "ID of the Secret.\n"
                    },
                    "serviceAccountTokenPath": {
                        "type": "string",
                        "description": "The SA token path where the token is mounted in the K8s Pod.\n"
                    },
                    "sinkPath": {
                        "type": "string",
                        "description": "The location at which auth token is to be read from.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "useAwsIam": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if AWS IAM is used for authentication.\n"
                    },
                    "useK8sAuth": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if K8s Auth is used for authentication.\n"
                    },
                    "useVaultAgent": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if Vault Agent is used for authentication.\n"
                    },
                    "vaultAwsIamRole": {
                        "type": "string",
                        "description": "The Vault role defined to bind to AWS IAM account/role being accessed.\n"
                    },
                    "vaultK8sAuthRole": {
                        "type": "string",
                        "description": "The role where K8s auth will happen.\n"
                    },
                    "vaultUrl": {
                        "type": "string",
                        "description": "URL of the HashiCorp Vault.\n"
                    },
                    "xvaultAwsIamServerId": {
                        "type": "string",
                        "description": "The AWS IAM Header Server ID that has been configured for this AWS IAM instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessType",
                    "appRoleId",
                    "authToken",
                    "awsRegion",
                    "basePath",
                    "default",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "isDefault",
                    "isReadOnly",
                    "k8sAuthEndpoint",
                    "namespace",
                    "readOnly",
                    "renewAppRoleToken",
                    "renewalIntervalMinutes",
                    "secretEngineManuallyConfigured",
                    "secretEngineName",
                    "secretEngineVersion",
                    "secretId",
                    "serviceAccountTokenPath",
                    "sinkPath",
                    "tags",
                    "useAwsIam",
                    "useK8sAuth",
                    "useVaultAgent",
                    "vaultAwsIamRole",
                    "vaultK8sAuthRole",
                    "vaultUrl",
                    "xvaultAwsIamServerId",
                    "id"
                ]
            }
        }
    }
}