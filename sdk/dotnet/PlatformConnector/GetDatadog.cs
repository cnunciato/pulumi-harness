// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.PlatformConnector
{
    public static class GetDatadog
    {
        /// <summary>
        /// Datasource for looking up a Datadog connector.
        /// </summary>
        public static Task<GetDatadogResult> InvokeAsync(GetDatadogArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatadogResult>("harness:PlatformConnector/getDatadog:getDatadog", args ?? new GetDatadogArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for looking up a Datadog connector.
        /// </summary>
        public static Output<GetDatadogResult> Invoke(GetDatadogInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDatadogResult>("harness:PlatformConnector/getDatadog:getDatadog", args ?? new GetDatadogInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatadogArgs : global::Pulumi.InvokeArgs
    {
        [Input("delegateSelectors")]
        private List<string>? _delegateSelectors;

        /// <summary>
        /// Connect using only the delegates which have these tags.
        /// </summary>
        public List<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new List<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public string? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetDatadogArgs()
        {
        }
        public static new GetDatadogArgs Empty => new GetDatadogArgs();
    }

    public sealed class GetDatadogInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("delegateSelectors")]
        private InputList<string>? _delegateSelectors;

        /// <summary>
        /// Connect using only the delegates which have these tags.
        /// </summary>
        public InputList<string> DelegateSelectors
        {
            get => _delegateSelectors ?? (_delegateSelectors = new InputList<string>());
            set => _delegateSelectors = value;
        }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetDatadogInvokeArgs()
        {
        }
        public static new GetDatadogInvokeArgs Empty => new GetDatadogInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatadogResult
    {
        /// <summary>
        /// Reference to the Harness secret containing the api key.
        /// </summary>
        public readonly string ApiKeyRef;
        /// <summary>
        /// Reference to the Harness secret containing the application key.
        /// </summary>
        public readonly string ApplicationKeyRef;
        /// <summary>
        /// Connect using only the delegates which have these tags.
        /// </summary>
        public readonly ImmutableArray<string> DelegateSelectors;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string? Identifier;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Tags to associate with the resource. Tags should be in the form `name:value`.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Url of the Datadog server.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetDatadogResult(
            string apiKeyRef,

            string applicationKeyRef,

            ImmutableArray<string> delegateSelectors,

            string description,

            string id,

            string? identifier,

            string? name,

            string? orgId,

            string? projectId,

            ImmutableArray<string> tags,

            string url)
        {
            ApiKeyRef = apiKeyRef;
            ApplicationKeyRef = applicationKeyRef;
            DelegateSelectors = delegateSelectors;
            Description = description;
            Id = id;
            Identifier = identifier;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Tags = tags;
            Url = url;
        }
    }
}
