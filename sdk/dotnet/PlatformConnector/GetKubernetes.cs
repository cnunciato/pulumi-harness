// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.PlatformConnector
{
    public static class GetKubernetes
    {
        /// <summary>
        /// Datasource for looking up a Kubernetes connector.
        /// </summary>
        public static Task<GetKubernetesResult> InvokeAsync(GetKubernetesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKubernetesResult>("harness:PlatformConnector/getKubernetes:getKubernetes", args ?? new GetKubernetesArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for looking up a Kubernetes connector.
        /// </summary>
        public static Output<GetKubernetesResult> Invoke(GetKubernetesInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetKubernetesResult>("harness:PlatformConnector/getKubernetes:getKubernetes", args ?? new GetKubernetesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubernetesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public string? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetKubernetesArgs()
        {
        }
        public static new GetKubernetesArgs Empty => new GetKubernetesArgs();
    }

    public sealed class GetKubernetesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetKubernetesInvokeArgs()
        {
        }
        public static new GetKubernetesInvokeArgs Empty => new GetKubernetesInvokeArgs();
    }


    [OutputType]
    public sealed class GetKubernetesResult
    {
        /// <summary>
        /// Client key and certificate config for the connector.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClientKeyCertResult> ClientKeyCerts;
        /// <summary>
        /// Selectors to use for the delegate.
        /// </summary>
        public readonly ImmutableArray<string> DelegateSelectors;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string? Identifier;
        /// <summary>
        /// Credentials are inherited from the delegate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesInheritFromDelegateResult> InheritFromDelegates;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// OpenID configuration for the connector.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesOpenidConnectResult> OpenidConnects;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Service account for the connector.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesServiceAccountResult> ServiceAccounts;
        /// <summary>
        /// Tags to associate with the resource. Tags should be in the form `name:value`.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Username and password for the connector.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesUsernamePasswordResult> UsernamePasswords;

        [OutputConstructor]
        private GetKubernetesResult(
            ImmutableArray<Outputs.GetKubernetesClientKeyCertResult> clientKeyCerts,

            ImmutableArray<string> delegateSelectors,

            string description,

            string id,

            string? identifier,

            ImmutableArray<Outputs.GetKubernetesInheritFromDelegateResult> inheritFromDelegates,

            string? name,

            ImmutableArray<Outputs.GetKubernetesOpenidConnectResult> openidConnects,

            string? orgId,

            string? projectId,

            ImmutableArray<Outputs.GetKubernetesServiceAccountResult> serviceAccounts,

            ImmutableArray<string> tags,

            ImmutableArray<Outputs.GetKubernetesUsernamePasswordResult> usernamePasswords)
        {
            ClientKeyCerts = clientKeyCerts;
            DelegateSelectors = delegateSelectors;
            Description = description;
            Id = id;
            Identifier = identifier;
            InheritFromDelegates = inheritFromDelegates;
            Name = name;
            OpenidConnects = openidConnects;
            OrgId = orgId;
            ProjectId = projectId;
            ServiceAccounts = serviceAccounts;
            Tags = tags;
            UsernamePasswords = usernamePasswords;
        }
    }
}
