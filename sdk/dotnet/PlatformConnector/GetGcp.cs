// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.PlatformConnector
{
    public static class GetGcp
    {
        /// <summary>
        /// Datasource for looking up a Gcp connector.
        /// </summary>
        public static Task<GetGcpResult> InvokeAsync(GetGcpArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGcpResult>("harness:PlatformConnector/getGcp:getGcp", args ?? new GetGcpArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for looking up a Gcp connector.
        /// </summary>
        public static Output<GetGcpResult> Invoke(GetGcpInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGcpResult>("harness:PlatformConnector/getGcp:getGcp", args ?? new GetGcpInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGcpArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public string? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetGcpArgs()
        {
        }
        public static new GetGcpArgs Empty => new GetGcpArgs();
    }

    public sealed class GetGcpInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetGcpInvokeArgs()
        {
        }
        public static new GetGcpInvokeArgs Empty => new GetGcpInvokeArgs();
    }


    [OutputType]
    public sealed class GetGcpResult
    {
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string? Identifier;
        /// <summary>
        /// Inherit configuration from delegate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGcpInheritFromDelegateResult> InheritFromDelegates;
        /// <summary>
        /// Manual credential configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGcpManualResult> Manuals;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Tags to associate with the resource. Tags should be in the form `name:value`.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetGcpResult(
            string description,

            string id,

            string? identifier,

            ImmutableArray<Outputs.GetGcpInheritFromDelegateResult> inheritFromDelegates,

            ImmutableArray<Outputs.GetGcpManualResult> manuals,

            string? name,

            string? orgId,

            string? projectId,

            ImmutableArray<string> tags)
        {
            Description = description;
            Id = id;
            Identifier = identifier;
            InheritFromDelegates = inheritFromDelegates;
            Manuals = manuals;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Tags = tags;
        }
    }
}
