// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Harness.Platform
{
    [HarnessResourceType("harness:platform/gitOpsRepository:GitOpsRepository")]
    public partial class GitOpsRepository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// account identifier of the cluster.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// agent identifier of the cluster.
        /// </summary>
        [Output("agentId")]
        public Output<string?> AgentId { get; private set; } = null!;

        /// <summary>
        /// Credentials only of the Repo.
        /// </summary>
        [Output("credsOnly")]
        public Output<bool?> CredsOnly { get; private set; } = null!;

        /// <summary>
        /// identifier of the cluster.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// organization identifier of the cluster.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// project identifier of the cluster.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Force refresh query for Repo.
        /// </summary>
        [Output("queryForceRefresh")]
        public Output<bool?> QueryForceRefresh { get; private set; } = null!;

        /// <summary>
        /// Project to Query for Repo.
        /// </summary>
        [Output("queryProject")]
        public Output<string?> QueryProject { get; private set; } = null!;

        /// <summary>
        /// Repo to Query.
        /// </summary>
        [Output("queryRepo")]
        public Output<string?> QueryRepo { get; private set; } = null!;

        /// <summary>
        /// Repo Details that need to be stored.
        /// </summary>
        [Output("repos")]
        public Output<ImmutableArray<Outputs.GitOpsRepositoryRepo>> Repos { get; private set; } = null!;

        /// <summary>
        /// Update mask of the Repository.
        /// </summary>
        [Output("updateMasks")]
        public Output<ImmutableArray<Outputs.GitOpsRepositoryUpdateMask>> UpdateMasks { get; private set; } = null!;

        /// <summary>
        /// Upsert the Repo Details.
        /// </summary>
        [Output("upsert")]
        public Output<bool?> Upsert { get; private set; } = null!;


        /// <summary>
        /// Create a GitOpsRepository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitOpsRepository(string name, GitOpsRepositoryArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/gitOpsRepository:GitOpsRepository", name, args ?? new GitOpsRepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitOpsRepository(string name, Input<string> id, GitOpsRepositoryState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/gitOpsRepository:GitOpsRepository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitOpsRepository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitOpsRepository Get(string name, Input<string> id, GitOpsRepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new GitOpsRepository(name, id, state, options);
        }
    }

    public sealed class GitOpsRepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// account identifier of the cluster.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// agent identifier of the cluster.
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// Credentials only of the Repo.
        /// </summary>
        [Input("credsOnly")]
        public Input<bool>? CredsOnly { get; set; }

        /// <summary>
        /// identifier of the cluster.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// organization identifier of the cluster.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// project identifier of the cluster.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Force refresh query for Repo.
        /// </summary>
        [Input("queryForceRefresh")]
        public Input<bool>? QueryForceRefresh { get; set; }

        /// <summary>
        /// Project to Query for Repo.
        /// </summary>
        [Input("queryProject")]
        public Input<string>? QueryProject { get; set; }

        /// <summary>
        /// Repo to Query.
        /// </summary>
        [Input("queryRepo")]
        public Input<string>? QueryRepo { get; set; }

        [Input("repos", required: true)]
        private InputList<Inputs.GitOpsRepositoryRepoArgs>? _repos;

        /// <summary>
        /// Repo Details that need to be stored.
        /// </summary>
        public InputList<Inputs.GitOpsRepositoryRepoArgs> Repos
        {
            get => _repos ?? (_repos = new InputList<Inputs.GitOpsRepositoryRepoArgs>());
            set => _repos = value;
        }

        [Input("updateMasks")]
        private InputList<Inputs.GitOpsRepositoryUpdateMaskArgs>? _updateMasks;

        /// <summary>
        /// Update mask of the Repository.
        /// </summary>
        public InputList<Inputs.GitOpsRepositoryUpdateMaskArgs> UpdateMasks
        {
            get => _updateMasks ?? (_updateMasks = new InputList<Inputs.GitOpsRepositoryUpdateMaskArgs>());
            set => _updateMasks = value;
        }

        /// <summary>
        /// Upsert the Repo Details.
        /// </summary>
        [Input("upsert")]
        public Input<bool>? Upsert { get; set; }

        public GitOpsRepositoryArgs()
        {
        }
        public static new GitOpsRepositoryArgs Empty => new GitOpsRepositoryArgs();
    }

    public sealed class GitOpsRepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// account identifier of the cluster.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// agent identifier of the cluster.
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// Credentials only of the Repo.
        /// </summary>
        [Input("credsOnly")]
        public Input<bool>? CredsOnly { get; set; }

        /// <summary>
        /// identifier of the cluster.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// organization identifier of the cluster.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// project identifier of the cluster.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Force refresh query for Repo.
        /// </summary>
        [Input("queryForceRefresh")]
        public Input<bool>? QueryForceRefresh { get; set; }

        /// <summary>
        /// Project to Query for Repo.
        /// </summary>
        [Input("queryProject")]
        public Input<string>? QueryProject { get; set; }

        /// <summary>
        /// Repo to Query.
        /// </summary>
        [Input("queryRepo")]
        public Input<string>? QueryRepo { get; set; }

        [Input("repos")]
        private InputList<Inputs.GitOpsRepositoryRepoGetArgs>? _repos;

        /// <summary>
        /// Repo Details that need to be stored.
        /// </summary>
        public InputList<Inputs.GitOpsRepositoryRepoGetArgs> Repos
        {
            get => _repos ?? (_repos = new InputList<Inputs.GitOpsRepositoryRepoGetArgs>());
            set => _repos = value;
        }

        [Input("updateMasks")]
        private InputList<Inputs.GitOpsRepositoryUpdateMaskGetArgs>? _updateMasks;

        /// <summary>
        /// Update mask of the Repository.
        /// </summary>
        public InputList<Inputs.GitOpsRepositoryUpdateMaskGetArgs> UpdateMasks
        {
            get => _updateMasks ?? (_updateMasks = new InputList<Inputs.GitOpsRepositoryUpdateMaskGetArgs>());
            set => _updateMasks = value;
        }

        /// <summary>
        /// Upsert the Repo Details.
        /// </summary>
        [Input("upsert")]
        public Input<bool>? Upsert { get; set; }

        public GitOpsRepositoryState()
        {
        }
        public static new GitOpsRepositoryState Empty => new GitOpsRepositoryState();
    }
}
