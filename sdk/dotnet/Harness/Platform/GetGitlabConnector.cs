// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Harness.Platform
{
    public static class GetGitlabConnector
    {
        /// <summary>
        /// Datasource for looking up a Gitlab connector.
        /// </summary>
        public static Task<GetGitlabConnectorResult> InvokeAsync(GetGitlabConnectorArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitlabConnectorResult>("harness:platform/getGitlabConnector:getGitlabConnector", args ?? new GetGitlabConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource for looking up a Gitlab connector.
        /// </summary>
        public static Output<GetGitlabConnectorResult> Invoke(GetGitlabConnectorInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitlabConnectorResult>("harness:platform/getGitlabConnector:getGitlabConnector", args ?? new GetGitlabConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitlabConnectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public string? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the Organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the Project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetGitlabConnectorArgs()
        {
        }
        public static new GetGitlabConnectorArgs Empty => new GetGitlabConnectorArgs();
    }

    public sealed class GetGitlabConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the Organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Unique identifier of the Project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetGitlabConnectorInvokeArgs()
        {
        }
        public static new GetGitlabConnectorInvokeArgs Empty => new GetGitlabConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitlabConnectorResult
    {
        /// <summary>
        /// Configuration for using the gitlab api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGitlabConnectorApiAuthenticationResult> ApiAuthentications;
        /// <summary>
        /// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
        /// </summary>
        public readonly string ConnectionType;
        /// <summary>
        /// Credentials to use for the connection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGitlabConnectorCredentialResult> Credentials;
        /// <summary>
        /// Connect using only the delegates which have these tags.
        /// </summary>
        public readonly ImmutableArray<string> DelegateSelectors;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string? Identifier;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Unique identifier of the Organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Unique identifier of the Project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Tags to associate with the resource. Tags should be in the form `name:value`.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Url of the gitlab repository or account.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Repository to test the connection with. This is only used when `connection_type` is `Account`.
        /// </summary>
        public readonly string ValidationRepo;

        [OutputConstructor]
        private GetGitlabConnectorResult(
            ImmutableArray<Outputs.GetGitlabConnectorApiAuthenticationResult> apiAuthentications,

            string connectionType,

            ImmutableArray<Outputs.GetGitlabConnectorCredentialResult> credentials,

            ImmutableArray<string> delegateSelectors,

            string description,

            string id,

            string? identifier,

            string? name,

            string? orgId,

            string? projectId,

            ImmutableArray<string> tags,

            string url,

            string validationRepo)
        {
            ApiAuthentications = apiAuthentications;
            ConnectionType = connectionType;
            Credentials = credentials;
            DelegateSelectors = delegateSelectors;
            Description = description;
            Id = id;
            Identifier = identifier;
            Name = name;
            OrgId = orgId;
            ProjectId = projectId;
            Tags = tags;
            Url = url;
            ValidationRepo = validationRepo;
        }
    }
}
