// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Harness.Platform
{
    public static class GetPolicyset
    {
        /// <summary>
        /// Data source for retrieving a Harness policyset.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetPolicyset.Invoke(new()
        ///     {
        ///         Action = "onrun",
        ///         Enabled = true,
        ///         Identifier = "harness_platform_policyset.test.identifier",
        ///         Name = "harness_platform_policyset.test.name",
        ///         Policies = new[]
        ///         {
        ///             new Harness.Platform.Inputs.GetPolicysetPolicyInputArgs
        ///             {
        ///                 Identifier = "always_run",
        ///                 Severity = "warning",
        ///             },
        ///         },
        ///         Type = "pipeline",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPolicysetResult> InvokeAsync(GetPolicysetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicysetResult>("harness:platform/getPolicyset:getPolicyset", args ?? new GetPolicysetArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness policyset.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Harness.Platform.GetPolicyset.Invoke(new()
        ///     {
        ///         Action = "onrun",
        ///         Enabled = true,
        ///         Identifier = "harness_platform_policyset.test.identifier",
        ///         Name = "harness_platform_policyset.test.name",
        ///         Policies = new[]
        ///         {
        ///             new Harness.Platform.Inputs.GetPolicysetPolicyInputArgs
        ///             {
        ///                 Identifier = "always_run",
        ///                 Severity = "warning",
        ///             },
        ///         },
        ///         Type = "pipeline",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPolicysetResult> Invoke(GetPolicysetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicysetResult>("harness:platform/getPolicyset:getPolicyset", args ?? new GetPolicysetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicysetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Action code for the policyset.
        /// </summary>
        [Input("action", required: true)]
        public string Action { get; set; } = null!;

        /// <summary>
        /// Enabled for the policyset.
        /// </summary>
        [Input("enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        [Input("policies")]
        private List<Inputs.GetPolicysetPolicyArgs>? _policies;

        /// <summary>
        /// List of policy identifiers / severity for the policyset.
        /// </summary>
        public List<Inputs.GetPolicysetPolicyArgs> Policies
        {
            get => _policies ?? (_policies = new List<Inputs.GetPolicysetPolicyArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// Type of the policyset.
        /// </summary>
        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetPolicysetArgs()
        {
        }
        public static new GetPolicysetArgs Empty => new GetPolicysetArgs();
    }

    public sealed class GetPolicysetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Action code for the policyset.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Enabled for the policyset.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("policies")]
        private InputList<Inputs.GetPolicysetPolicyInputArgs>? _policies;

        /// <summary>
        /// List of policy identifiers / severity for the policyset.
        /// </summary>
        public InputList<Inputs.GetPolicysetPolicyInputArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.GetPolicysetPolicyInputArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Type of the policyset.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GetPolicysetInvokeArgs()
        {
        }
        public static new GetPolicysetInvokeArgs Empty => new GetPolicysetInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicysetResult
    {
        /// <summary>
        /// Action code for the policyset.
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// Description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Enabled for the policyset.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique identifier of the resource.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Unique identifier of the organization.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// List of policy identifiers / severity for the policyset.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicysetPolicyResult> Policies;
        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Type of the policyset.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPolicysetResult(
            string action,

            string description,

            bool? enabled,

            string id,

            string identifier,

            string? name,

            string? orgId,

            ImmutableArray<Outputs.GetPolicysetPolicyResult> policies,

            string? projectId,

            ImmutableArray<string> tags,

            string type)
        {
            Action = action;
            Description = description;
            Enabled = enabled;
            Id = id;
            Identifier = identifier;
            Name = name;
            OrgId = orgId;
            Policies = policies;
            ProjectId = projectId;
            Tags = tags;
            Type = type;
        }
    }
}
