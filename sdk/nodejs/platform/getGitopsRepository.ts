// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export function getGitopsRepository(args: GetGitopsRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetGitopsRepositoryResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("harness:platform/getGitopsRepository:getGitopsRepository", {
        "accountId": args.accountId,
        "agentId": args.agentId,
        "credsOnly": args.credsOnly,
        "identifier": args.identifier,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "queryForceRefresh": args.queryForceRefresh,
        "queryProject": args.queryProject,
        "queryRepo": args.queryRepo,
        "repos": args.repos,
        "updateMasks": args.updateMasks,
        "upsert": args.upsert,
    }, opts);
}

/**
 * A collection of arguments for invoking getGitopsRepository.
 */
export interface GetGitopsRepositoryArgs {
    accountId: string;
    agentId?: string;
    credsOnly?: boolean;
    identifier: string;
    orgId?: string;
    projectId: string;
    queryForceRefresh?: boolean;
    queryProject?: string;
    queryRepo?: string;
    repos: inputs.platform.GetGitopsRepositoryRepo[];
    updateMasks?: inputs.platform.GetGitopsRepositoryUpdateMask[];
    upsert?: boolean;
}

/**
 * A collection of values returned by getGitopsRepository.
 */
export interface GetGitopsRepositoryResult {
    readonly accountId: string;
    readonly agentId?: string;
    readonly credsOnly?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly identifier: string;
    readonly orgId?: string;
    readonly projectId: string;
    readonly queryForceRefresh?: boolean;
    readonly queryProject?: string;
    readonly queryRepo?: string;
    readonly repos: outputs.platform.GetGitopsRepositoryRepo[];
    readonly updateMasks?: outputs.platform.GetGitopsRepositoryUpdateMask[];
    readonly upsert?: boolean;
}

export function getGitopsRepositoryOutput(args: GetGitopsRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGitopsRepositoryResult> {
    return pulumi.output(args).apply(a => getGitopsRepository(a, opts))
}

/**
 * A collection of arguments for invoking getGitopsRepository.
 */
export interface GetGitopsRepositoryOutputArgs {
    accountId: pulumi.Input<string>;
    agentId?: pulumi.Input<string>;
    credsOnly?: pulumi.Input<boolean>;
    identifier: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    queryForceRefresh?: pulumi.Input<boolean>;
    queryProject?: pulumi.Input<string>;
    queryRepo?: pulumi.Input<string>;
    repos: pulumi.Input<pulumi.Input<inputs.platform.GetGitopsRepositoryRepoArgs>[]>;
    updateMasks?: pulumi.Input<pulumi.Input<inputs.platform.GetGitopsRepositoryUpdateMaskArgs>[]>;
    upsert?: pulumi.Input<boolean>;
}
