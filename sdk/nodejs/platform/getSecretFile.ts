// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Datasource for looking up secert file type secret.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = pulumi.output(harness.platform.getSecretFile({
 *     identifier: "identifier",
 * }));
 * ```
 */
export function getSecretFile(args?: GetSecretFileArgs, opts?: pulumi.InvokeOptions): Promise<GetSecretFileResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("harness:platform/getSecretFile:getSecretFile", {
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecretFile.
 */
export interface GetSecretFileArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Unique identifier of the Organization.
     */
    orgId?: string;
    /**
     * Unique identifier of the Project.
     */
    projectId?: string;
}

/**
 * A collection of values returned by getSecretFile.
 */
export interface GetSecretFileResult {
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * Path of the file containing secret value
     */
    readonly filePath: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier?: string;
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * Unique identifier of the Organization.
     */
    readonly orgId?: string;
    /**
     * Unique identifier of the Project.
     */
    readonly projectId?: string;
    /**
     * Identifier of the Secret Manager used to manage the secret.
     */
    readonly secretManagerIdentifier: string;
    /**
     * Tags to associate with the resource. Tags should be in the form `name:value`.
     */
    readonly tags: string[];
}

export function getSecretFileOutput(args?: GetSecretFileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecretFileResult> {
    return pulumi.output(args).apply(a => getSecretFile(a, opts))
}

/**
 * A collection of arguments for invoking getSecretFile.
 */
export interface GetSecretFileOutputArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the Organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the Project.
     */
    projectId?: pulumi.Input<string>;
}
