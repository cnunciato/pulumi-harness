// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./addUserToGroup";
export * from "./application";
export * from "./applicationGitSync";
export * from "./delegateApproval";
export * from "./encryptedText";
export * from "./environment";
export * from "./getApplication";
export * from "./getCurrentAccount";
export * from "./getDelegate";
export * from "./getEncryptedText";
export * from "./getGitConnector";
export * from "./getSecretManager";
export * from "./getService";
export * from "./getSshCredential";
export * from "./getSsoProvider";
export * from "./getUser";
export * from "./getUserGroup";
export * from "./getYamlConfig";
export * from "./gitConnector";
export * from "./infrastructureDefinition";
export * from "./provider";
export * from "./sshCredential";
export * from "./user";
export * from "./userGroup";
export * from "./yamlConfig";

// Export sub-modules:
import * as cloudprovider from "./cloudprovider";
import * as config from "./config";
import * as platform from "./platform";
import * as platformconnector from "./platformconnector";
import * as service from "./service";
import * as types from "./types";

export {
    cloudprovider,
    config,
    platform,
    platformconnector,
    service,
    types,
};

// Import resources to register:
import { AddUserToGroup } from "./addUserToGroup";
import { Application } from "./application";
import { ApplicationGitSync } from "./applicationGitSync";
import { DelegateApproval } from "./delegateApproval";
import { EncryptedText } from "./encryptedText";
import { Environment } from "./environment";
import { GitConnector } from "./gitConnector";
import { InfrastructureDefinition } from "./infrastructureDefinition";
import { SshCredential } from "./sshCredential";
import { User } from "./user";
import { UserGroup } from "./userGroup";
import { YamlConfig } from "./yamlConfig";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "harness:index/addUserToGroup:AddUserToGroup":
                return new AddUserToGroup(name, <any>undefined, { urn })
            case "harness:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "harness:index/applicationGitSync:ApplicationGitSync":
                return new ApplicationGitSync(name, <any>undefined, { urn })
            case "harness:index/delegateApproval:DelegateApproval":
                return new DelegateApproval(name, <any>undefined, { urn })
            case "harness:index/encryptedText:EncryptedText":
                return new EncryptedText(name, <any>undefined, { urn })
            case "harness:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "harness:index/gitConnector:GitConnector":
                return new GitConnector(name, <any>undefined, { urn })
            case "harness:index/infrastructureDefinition:InfrastructureDefinition":
                return new InfrastructureDefinition(name, <any>undefined, { urn })
            case "harness:index/sshCredential:SshCredential":
                return new SshCredential(name, <any>undefined, { urn })
            case "harness:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "harness:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "harness:index/yamlConfig:YamlConfig":
                return new YamlConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("harness", "index/addUserToGroup", _module)
pulumi.runtime.registerResourceModule("harness", "index/application", _module)
pulumi.runtime.registerResourceModule("harness", "index/applicationGitSync", _module)
pulumi.runtime.registerResourceModule("harness", "index/delegateApproval", _module)
pulumi.runtime.registerResourceModule("harness", "index/encryptedText", _module)
pulumi.runtime.registerResourceModule("harness", "index/environment", _module)
pulumi.runtime.registerResourceModule("harness", "index/gitConnector", _module)
pulumi.runtime.registerResourceModule("harness", "index/infrastructureDefinition", _module)
pulumi.runtime.registerResourceModule("harness", "index/sshCredential", _module)
pulumi.runtime.registerResourceModule("harness", "index/user", _module)
pulumi.runtime.registerResourceModule("harness", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("harness", "index/yamlConfig", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("harness", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:harness") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
