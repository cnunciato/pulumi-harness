// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Datasource for looking up a Bitbucket connector.
 */
export function getBitbucket(args?: GetBitbucketArgs, opts?: pulumi.InvokeOptions): Promise<GetBitbucketResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("harness:PlatformConnector/getBitbucket:getBitbucket", {
        "identifier": args.identifier,
        "name": args.name,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getBitbucket.
 */
export interface GetBitbucketArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Unique identifier of the organization.
     */
    orgId?: string;
    /**
     * Unique identifier of the project.
     */
    projectId?: string;
}

/**
 * A collection of values returned by getBitbucket.
 */
export interface GetBitbucketResult {
    /**
     * Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
     */
    readonly apiAuthentications: outputs.PlatformConnector.GetBitbucketApiAuthentication[];
    /**
     * Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.
     */
    readonly connectionType: string;
    /**
     * Credentials to use for the connection.
     */
    readonly credentials: outputs.PlatformConnector.GetBitbucketCredential[];
    /**
     * Connect using only the delegates which have these tags.
     */
    readonly delegateSelectors: string[];
    /**
     * Description of the resource.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the resource.
     */
    readonly identifier?: string;
    /**
     * Name of the resource.
     */
    readonly name?: string;
    /**
     * Unique identifier of the organization.
     */
    readonly orgId?: string;
    /**
     * Unique identifier of the project.
     */
    readonly projectId?: string;
    /**
     * Tags to associate with the resource. Tags should be in the form `name:value`.
     */
    readonly tags: string[];
    /**
     * Url of the BitBucket repository or account.
     */
    readonly url: string;
    /**
     * Repository to test the connection with. This is only used when `connectionType` is `Account`.
     */
    readonly validationRepo: string;
}

export function getBitbucketOutput(args?: GetBitbucketOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBitbucketResult> {
    return pulumi.output(args).apply(a => getBitbucket(a, opts))
}

/**
 * A collection of arguments for invoking getBitbucket.
 */
export interface GetBitbucketOutputArgs {
    /**
     * Unique identifier of the resource.
     */
    identifier?: pulumi.Input<string>;
    /**
     * Name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique identifier of the project.
     */
    projectId?: pulumi.Input<string>;
}
