// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Gitops Application.
//
// ## Import
//
// # Import a Project level Gitops Application
//
// ```sh
//
//	$ pulumi import harness:platform/gitopsApplications:GitopsApplications example <organization_id>/<project_id>/<agent_id>/<app_name>
//
// ```
type GitopsApplications struct {
	pulumi.CustomResourceState

	// Account identifier of the GitOps application.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Agent identifier of the GitOps application.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// Definition of the GitOps application resource.
	Applications GitopsApplicationsApplicationArrayOutput `pulumi:"applications"`
	// Cluster identifier of the GitOps application.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Identifier of the GitOps application.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Kind of the GitOps application.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Name of the GitOps application.
	Name pulumi.StringOutput `pulumi:"name"`
	// Options to remove existing finalizers to delete the GitOps application.
	OptionsRemoveExistingFinalizers pulumi.BoolPtrOutput `pulumi:"optionsRemoveExistingFinalizers"`
	// Organization identifier of the GitOps application.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.
	Project pulumi.StringPtrOutput `pulumi:"project"`
	// Project identifier of the GitOps application.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Project names to filter the corresponding GitOps applications.
	QueryProject pulumi.StringPtrOutput `pulumi:"queryProject"`
	// Forces the GitOps application to reconcile when set to true.
	QueryRefresh pulumi.StringPtrOutput `pulumi:"queryRefresh"`
	// Repo URL to restrict returned list applications.
	QueryRepo pulumi.StringPtrOutput `pulumi:"queryRepo"`
	// Shows modifications after a version that is specified with a watch call.
	QueryResourceVersion pulumi.StringPtrOutput `pulumi:"queryResourceVersion"`
	// Filters GitOps applications corresponding to the labels.
	QuerySelector pulumi.StringPtrOutput `pulumi:"querySelector"`
	// Repository identifier of the GitOps application.
	RepoId pulumi.StringOutput `pulumi:"repoId"`
	// Request cascade to delete the GitOps application.
	RequestCascade pulumi.BoolPtrOutput `pulumi:"requestCascade"`
	// Request name to delete the GitOps application.
	RequestName pulumi.StringPtrOutput `pulumi:"requestName"`
	// Request propagation policy to delete the GitOps application.
	RequestPropagationPolicy pulumi.StringPtrOutput `pulumi:"requestPropagationPolicy"`
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrOutput `pulumi:"upsert"`
	// Indicates if the GitOps application has to be validated.
	Validate pulumi.BoolPtrOutput `pulumi:"validate"`
}

// NewGitopsApplications registers a new resource with the given unique name, arguments, and options.
func NewGitopsApplications(ctx *pulumi.Context,
	name string, args *GitopsApplicationsArgs, opts ...pulumi.ResourceOption) (*GitopsApplications, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.Applications == nil {
		return nil, errors.New("invalid value for required argument 'Applications'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.RepoId == nil {
		return nil, errors.New("invalid value for required argument 'RepoId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GitopsApplications
	err := ctx.RegisterResource("harness:platform/gitopsApplications:GitopsApplications", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitopsApplications gets an existing GitopsApplications resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitopsApplications(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitopsApplicationsState, opts ...pulumi.ResourceOption) (*GitopsApplications, error) {
	var resource GitopsApplications
	err := ctx.ReadResource("harness:platform/gitopsApplications:GitopsApplications", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitopsApplications resources.
type gitopsApplicationsState struct {
	// Account identifier of the GitOps application.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier of the GitOps application.
	AgentId *string `pulumi:"agentId"`
	// Definition of the GitOps application resource.
	Applications []GitopsApplicationsApplication `pulumi:"applications"`
	// Cluster identifier of the GitOps application.
	ClusterId *string `pulumi:"clusterId"`
	// Identifier of the GitOps application.
	Identifier *string `pulumi:"identifier"`
	// Kind of the GitOps application.
	Kind *string `pulumi:"kind"`
	// Name of the GitOps application.
	Name *string `pulumi:"name"`
	// Options to remove existing finalizers to delete the GitOps application.
	OptionsRemoveExistingFinalizers *bool `pulumi:"optionsRemoveExistingFinalizers"`
	// Organization identifier of the GitOps application.
	OrgId *string `pulumi:"orgId"`
	// Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.
	Project *string `pulumi:"project"`
	// Project identifier of the GitOps application.
	ProjectId *string `pulumi:"projectId"`
	// Project names to filter the corresponding GitOps applications.
	QueryProject *string `pulumi:"queryProject"`
	// Forces the GitOps application to reconcile when set to true.
	QueryRefresh *string `pulumi:"queryRefresh"`
	// Repo URL to restrict returned list applications.
	QueryRepo *string `pulumi:"queryRepo"`
	// Shows modifications after a version that is specified with a watch call.
	QueryResourceVersion *string `pulumi:"queryResourceVersion"`
	// Filters GitOps applications corresponding to the labels.
	QuerySelector *string `pulumi:"querySelector"`
	// Repository identifier of the GitOps application.
	RepoId *string `pulumi:"repoId"`
	// Request cascade to delete the GitOps application.
	RequestCascade *bool `pulumi:"requestCascade"`
	// Request name to delete the GitOps application.
	RequestName *string `pulumi:"requestName"`
	// Request propagation policy to delete the GitOps application.
	RequestPropagationPolicy *string `pulumi:"requestPropagationPolicy"`
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
	// Indicates if the GitOps application has to be validated.
	Validate *bool `pulumi:"validate"`
}

type GitopsApplicationsState struct {
	// Account identifier of the GitOps application.
	AccountId pulumi.StringPtrInput
	// Agent identifier of the GitOps application.
	AgentId pulumi.StringPtrInput
	// Definition of the GitOps application resource.
	Applications GitopsApplicationsApplicationArrayInput
	// Cluster identifier of the GitOps application.
	ClusterId pulumi.StringPtrInput
	// Identifier of the GitOps application.
	Identifier pulumi.StringPtrInput
	// Kind of the GitOps application.
	Kind pulumi.StringPtrInput
	// Name of the GitOps application.
	Name pulumi.StringPtrInput
	// Options to remove existing finalizers to delete the GitOps application.
	OptionsRemoveExistingFinalizers pulumi.BoolPtrInput
	// Organization identifier of the GitOps application.
	OrgId pulumi.StringPtrInput
	// Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.
	Project pulumi.StringPtrInput
	// Project identifier of the GitOps application.
	ProjectId pulumi.StringPtrInput
	// Project names to filter the corresponding GitOps applications.
	QueryProject pulumi.StringPtrInput
	// Forces the GitOps application to reconcile when set to true.
	QueryRefresh pulumi.StringPtrInput
	// Repo URL to restrict returned list applications.
	QueryRepo pulumi.StringPtrInput
	// Shows modifications after a version that is specified with a watch call.
	QueryResourceVersion pulumi.StringPtrInput
	// Filters GitOps applications corresponding to the labels.
	QuerySelector pulumi.StringPtrInput
	// Repository identifier of the GitOps application.
	RepoId pulumi.StringPtrInput
	// Request cascade to delete the GitOps application.
	RequestCascade pulumi.BoolPtrInput
	// Request name to delete the GitOps application.
	RequestName pulumi.StringPtrInput
	// Request propagation policy to delete the GitOps application.
	RequestPropagationPolicy pulumi.StringPtrInput
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
	// Indicates if the GitOps application has to be validated.
	Validate pulumi.BoolPtrInput
}

func (GitopsApplicationsState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsApplicationsState)(nil)).Elem()
}

type gitopsApplicationsArgs struct {
	// Account identifier of the GitOps application.
	AccountId string `pulumi:"accountId"`
	// Agent identifier of the GitOps application.
	AgentId string `pulumi:"agentId"`
	// Definition of the GitOps application resource.
	Applications []GitopsApplicationsApplication `pulumi:"applications"`
	// Cluster identifier of the GitOps application.
	ClusterId string `pulumi:"clusterId"`
	// Identifier of the GitOps application.
	Identifier string `pulumi:"identifier"`
	// Kind of the GitOps application.
	Kind *string `pulumi:"kind"`
	// Options to remove existing finalizers to delete the GitOps application.
	OptionsRemoveExistingFinalizers *bool `pulumi:"optionsRemoveExistingFinalizers"`
	// Organization identifier of the GitOps application.
	OrgId string `pulumi:"orgId"`
	// Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.
	Project *string `pulumi:"project"`
	// Project identifier of the GitOps application.
	ProjectId string `pulumi:"projectId"`
	// Project names to filter the corresponding GitOps applications.
	QueryProject *string `pulumi:"queryProject"`
	// Forces the GitOps application to reconcile when set to true.
	QueryRefresh *string `pulumi:"queryRefresh"`
	// Repo URL to restrict returned list applications.
	QueryRepo *string `pulumi:"queryRepo"`
	// Shows modifications after a version that is specified with a watch call.
	QueryResourceVersion *string `pulumi:"queryResourceVersion"`
	// Filters GitOps applications corresponding to the labels.
	QuerySelector *string `pulumi:"querySelector"`
	// Repository identifier of the GitOps application.
	RepoId string `pulumi:"repoId"`
	// Request cascade to delete the GitOps application.
	RequestCascade *bool `pulumi:"requestCascade"`
	// Request name to delete the GitOps application.
	RequestName *string `pulumi:"requestName"`
	// Request propagation policy to delete the GitOps application.
	RequestPropagationPolicy *string `pulumi:"requestPropagationPolicy"`
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
	// Indicates if the GitOps application has to be validated.
	Validate *bool `pulumi:"validate"`
}

// The set of arguments for constructing a GitopsApplications resource.
type GitopsApplicationsArgs struct {
	// Account identifier of the GitOps application.
	AccountId pulumi.StringInput
	// Agent identifier of the GitOps application.
	AgentId pulumi.StringInput
	// Definition of the GitOps application resource.
	Applications GitopsApplicationsApplicationArrayInput
	// Cluster identifier of the GitOps application.
	ClusterId pulumi.StringInput
	// Identifier of the GitOps application.
	Identifier pulumi.StringInput
	// Kind of the GitOps application.
	Kind pulumi.StringPtrInput
	// Options to remove existing finalizers to delete the GitOps application.
	OptionsRemoveExistingFinalizers pulumi.BoolPtrInput
	// Organization identifier of the GitOps application.
	OrgId pulumi.StringInput
	// Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.
	Project pulumi.StringPtrInput
	// Project identifier of the GitOps application.
	ProjectId pulumi.StringInput
	// Project names to filter the corresponding GitOps applications.
	QueryProject pulumi.StringPtrInput
	// Forces the GitOps application to reconcile when set to true.
	QueryRefresh pulumi.StringPtrInput
	// Repo URL to restrict returned list applications.
	QueryRepo pulumi.StringPtrInput
	// Shows modifications after a version that is specified with a watch call.
	QueryResourceVersion pulumi.StringPtrInput
	// Filters GitOps applications corresponding to the labels.
	QuerySelector pulumi.StringPtrInput
	// Repository identifier of the GitOps application.
	RepoId pulumi.StringInput
	// Request cascade to delete the GitOps application.
	RequestCascade pulumi.BoolPtrInput
	// Request name to delete the GitOps application.
	RequestName pulumi.StringPtrInput
	// Request propagation policy to delete the GitOps application.
	RequestPropagationPolicy pulumi.StringPtrInput
	// Indicates if the GitOps application should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
	// Indicates if the GitOps application has to be validated.
	Validate pulumi.BoolPtrInput
}

func (GitopsApplicationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsApplicationsArgs)(nil)).Elem()
}

type GitopsApplicationsInput interface {
	pulumi.Input

	ToGitopsApplicationsOutput() GitopsApplicationsOutput
	ToGitopsApplicationsOutputWithContext(ctx context.Context) GitopsApplicationsOutput
}

func (*GitopsApplications) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsApplications)(nil)).Elem()
}

func (i *GitopsApplications) ToGitopsApplicationsOutput() GitopsApplicationsOutput {
	return i.ToGitopsApplicationsOutputWithContext(context.Background())
}

func (i *GitopsApplications) ToGitopsApplicationsOutputWithContext(ctx context.Context) GitopsApplicationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsApplicationsOutput)
}

// GitopsApplicationsArrayInput is an input type that accepts GitopsApplicationsArray and GitopsApplicationsArrayOutput values.
// You can construct a concrete instance of `GitopsApplicationsArrayInput` via:
//
//	GitopsApplicationsArray{ GitopsApplicationsArgs{...} }
type GitopsApplicationsArrayInput interface {
	pulumi.Input

	ToGitopsApplicationsArrayOutput() GitopsApplicationsArrayOutput
	ToGitopsApplicationsArrayOutputWithContext(context.Context) GitopsApplicationsArrayOutput
}

type GitopsApplicationsArray []GitopsApplicationsInput

func (GitopsApplicationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsApplications)(nil)).Elem()
}

func (i GitopsApplicationsArray) ToGitopsApplicationsArrayOutput() GitopsApplicationsArrayOutput {
	return i.ToGitopsApplicationsArrayOutputWithContext(context.Background())
}

func (i GitopsApplicationsArray) ToGitopsApplicationsArrayOutputWithContext(ctx context.Context) GitopsApplicationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsApplicationsArrayOutput)
}

// GitopsApplicationsMapInput is an input type that accepts GitopsApplicationsMap and GitopsApplicationsMapOutput values.
// You can construct a concrete instance of `GitopsApplicationsMapInput` via:
//
//	GitopsApplicationsMap{ "key": GitopsApplicationsArgs{...} }
type GitopsApplicationsMapInput interface {
	pulumi.Input

	ToGitopsApplicationsMapOutput() GitopsApplicationsMapOutput
	ToGitopsApplicationsMapOutputWithContext(context.Context) GitopsApplicationsMapOutput
}

type GitopsApplicationsMap map[string]GitopsApplicationsInput

func (GitopsApplicationsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsApplications)(nil)).Elem()
}

func (i GitopsApplicationsMap) ToGitopsApplicationsMapOutput() GitopsApplicationsMapOutput {
	return i.ToGitopsApplicationsMapOutputWithContext(context.Background())
}

func (i GitopsApplicationsMap) ToGitopsApplicationsMapOutputWithContext(ctx context.Context) GitopsApplicationsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsApplicationsMapOutput)
}

type GitopsApplicationsOutput struct{ *pulumi.OutputState }

func (GitopsApplicationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsApplications)(nil)).Elem()
}

func (o GitopsApplicationsOutput) ToGitopsApplicationsOutput() GitopsApplicationsOutput {
	return o
}

func (o GitopsApplicationsOutput) ToGitopsApplicationsOutputWithContext(ctx context.Context) GitopsApplicationsOutput {
	return o
}

// Account identifier of the GitOps application.
func (o GitopsApplicationsOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Agent identifier of the GitOps application.
func (o GitopsApplicationsOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// Definition of the GitOps application resource.
func (o GitopsApplicationsOutput) Applications() GitopsApplicationsApplicationArrayOutput {
	return o.ApplyT(func(v *GitopsApplications) GitopsApplicationsApplicationArrayOutput { return v.Applications }).(GitopsApplicationsApplicationArrayOutput)
}

// Cluster identifier of the GitOps application.
func (o GitopsApplicationsOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Identifier of the GitOps application.
func (o GitopsApplicationsOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Kind of the GitOps application.
func (o GitopsApplicationsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the GitOps application.
func (o GitopsApplicationsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Options to remove existing finalizers to delete the GitOps application.
func (o GitopsApplicationsOutput) OptionsRemoveExistingFinalizers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.BoolPtrOutput { return v.OptionsRemoveExistingFinalizers }).(pulumi.BoolPtrOutput)
}

// Organization identifier of the GitOps application.
func (o GitopsApplicationsOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.
func (o GitopsApplicationsOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

// Project identifier of the GitOps application.
func (o GitopsApplicationsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Project names to filter the corresponding GitOps applications.
func (o GitopsApplicationsOutput) QueryProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringPtrOutput { return v.QueryProject }).(pulumi.StringPtrOutput)
}

// Forces the GitOps application to reconcile when set to true.
func (o GitopsApplicationsOutput) QueryRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringPtrOutput { return v.QueryRefresh }).(pulumi.StringPtrOutput)
}

// Repo URL to restrict returned list applications.
func (o GitopsApplicationsOutput) QueryRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringPtrOutput { return v.QueryRepo }).(pulumi.StringPtrOutput)
}

// Shows modifications after a version that is specified with a watch call.
func (o GitopsApplicationsOutput) QueryResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringPtrOutput { return v.QueryResourceVersion }).(pulumi.StringPtrOutput)
}

// Filters GitOps applications corresponding to the labels.
func (o GitopsApplicationsOutput) QuerySelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringPtrOutput { return v.QuerySelector }).(pulumi.StringPtrOutput)
}

// Repository identifier of the GitOps application.
func (o GitopsApplicationsOutput) RepoId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringOutput { return v.RepoId }).(pulumi.StringOutput)
}

// Request cascade to delete the GitOps application.
func (o GitopsApplicationsOutput) RequestCascade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.BoolPtrOutput { return v.RequestCascade }).(pulumi.BoolPtrOutput)
}

// Request name to delete the GitOps application.
func (o GitopsApplicationsOutput) RequestName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringPtrOutput { return v.RequestName }).(pulumi.StringPtrOutput)
}

// Request propagation policy to delete the GitOps application.
func (o GitopsApplicationsOutput) RequestPropagationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.StringPtrOutput { return v.RequestPropagationPolicy }).(pulumi.StringPtrOutput)
}

// Indicates if the GitOps application should be updated if existing and inserted if not.
func (o GitopsApplicationsOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.BoolPtrOutput { return v.Upsert }).(pulumi.BoolPtrOutput)
}

// Indicates if the GitOps application has to be validated.
func (o GitopsApplicationsOutput) Validate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitopsApplications) pulumi.BoolPtrOutput { return v.Validate }).(pulumi.BoolPtrOutput)
}

type GitopsApplicationsArrayOutput struct{ *pulumi.OutputState }

func (GitopsApplicationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsApplications)(nil)).Elem()
}

func (o GitopsApplicationsArrayOutput) ToGitopsApplicationsArrayOutput() GitopsApplicationsArrayOutput {
	return o
}

func (o GitopsApplicationsArrayOutput) ToGitopsApplicationsArrayOutputWithContext(ctx context.Context) GitopsApplicationsArrayOutput {
	return o
}

func (o GitopsApplicationsArrayOutput) Index(i pulumi.IntInput) GitopsApplicationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitopsApplications {
		return vs[0].([]*GitopsApplications)[vs[1].(int)]
	}).(GitopsApplicationsOutput)
}

type GitopsApplicationsMapOutput struct{ *pulumi.OutputState }

func (GitopsApplicationsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsApplications)(nil)).Elem()
}

func (o GitopsApplicationsMapOutput) ToGitopsApplicationsMapOutput() GitopsApplicationsMapOutput {
	return o
}

func (o GitopsApplicationsMapOutput) ToGitopsApplicationsMapOutputWithContext(ctx context.Context) GitopsApplicationsMapOutput {
	return o
}

func (o GitopsApplicationsMapOutput) MapIndex(k pulumi.StringInput) GitopsApplicationsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitopsApplications {
		return vs[0].(map[string]*GitopsApplications)[vs[1].(string)]
	}).(GitopsApplicationsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsApplicationsInput)(nil)).Elem(), &GitopsApplications{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsApplicationsArrayInput)(nil)).Elem(), GitopsApplicationsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsApplicationsMapInput)(nil)).Elem(), GitopsApplicationsMap{})
	pulumi.RegisterOutputType(GitopsApplicationsOutput{})
	pulumi.RegisterOutputType(GitopsApplicationsArrayOutput{})
	pulumi.RegisterOutputType(GitopsApplicationsMapOutput{})
}
