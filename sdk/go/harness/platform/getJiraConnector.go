// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Jira connector.
func LookupJiraConnector(ctx *pulumi.Context, args *LookupJiraConnectorArgs, opts ...pulumi.InvokeOption) (*LookupJiraConnectorResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupJiraConnectorResult
	err := ctx.Invoke("harness:platform/getJiraConnector:getJiraConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getJiraConnector.
type LookupJiraConnectorArgs struct {
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getJiraConnector.
type LookupJiraConnectorResult struct {
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Reference to a secret containing the password to use for authentication.
	PasswordRef string `pulumi:"passwordRef"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the Jira server.
	Url string `pulumi:"url"`
	// Username to use for authentication.
	Username string `pulumi:"username"`
	// Reference to a secret containing the username to use for authentication.
	UsernameRef string `pulumi:"usernameRef"`
}

func LookupJiraConnectorOutput(ctx *pulumi.Context, args LookupJiraConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupJiraConnectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupJiraConnectorResult, error) {
			args := v.(LookupJiraConnectorArgs)
			r, err := LookupJiraConnector(ctx, &args, opts...)
			var s LookupJiraConnectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupJiraConnectorResultOutput)
}

// A collection of arguments for invoking getJiraConnector.
type LookupJiraConnectorOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupJiraConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJiraConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getJiraConnector.
type LookupJiraConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupJiraConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJiraConnectorResult)(nil)).Elem()
}

func (o LookupJiraConnectorResultOutput) ToLookupJiraConnectorResultOutput() LookupJiraConnectorResultOutput {
	return o
}

func (o LookupJiraConnectorResultOutput) ToLookupJiraConnectorResultOutputWithContext(ctx context.Context) LookupJiraConnectorResultOutput {
	return o
}

// Connect using only the delegates which have these tags.
func (o LookupJiraConnectorResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupJiraConnectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupJiraConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupJiraConnectorResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o LookupJiraConnectorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupJiraConnectorResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Reference to a secret containing the password to use for authentication.
func (o LookupJiraConnectorResultOutput) PasswordRef() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) string { return v.PasswordRef }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o LookupJiraConnectorResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o LookupJiraConnectorResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the Jira server.
func (o LookupJiraConnectorResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) string { return v.Url }).(pulumi.StringOutput)
}

// Username to use for authentication.
func (o LookupJiraConnectorResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) string { return v.Username }).(pulumi.StringOutput)
}

// Reference to a secret containing the username to use for authentication.
func (o LookupJiraConnectorResultOutput) UsernameRef() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJiraConnectorResult) string { return v.UsernameRef }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupJiraConnectorResultOutput{})
}
