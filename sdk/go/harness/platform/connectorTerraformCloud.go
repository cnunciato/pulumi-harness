// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// # Import account level Terraform Cloud provider connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorTerraformCloud:ConnectorTerraformCloud example <connector_id>
//
// ```
//
//	Import org level Terraform Cloud provider connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorTerraformCloud:ConnectorTerraformCloud example <ord_id>/<connector_id>
//
// ```
//
//	Import project level Terraform Cloud provider connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorTerraformCloud:ConnectorTerraformCloud example <org_id>/<project_id>/<connector_id>
//
// ```
type ConnectorTerraformCloud struct {
	pulumi.CustomResourceState

	// Credentials to connect to the Terraform Cloud platform.
	Credentials ConnectorTerraformCloudCredentialsOutput `pulumi:"credentials"`
	// Connect only using delegates with these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the Terraform Cloud platform.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewConnectorTerraformCloud registers a new resource with the given unique name, arguments, and options.
func NewConnectorTerraformCloud(ctx *pulumi.Context,
	name string, args *ConnectorTerraformCloudArgs, opts ...pulumi.ResourceOption) (*ConnectorTerraformCloud, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectorTerraformCloud
	err := ctx.RegisterResource("harness:platform/connectorTerraformCloud:ConnectorTerraformCloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorTerraformCloud gets an existing ConnectorTerraformCloud resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorTerraformCloud(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorTerraformCloudState, opts ...pulumi.ResourceOption) (*ConnectorTerraformCloud, error) {
	var resource ConnectorTerraformCloud
	err := ctx.ReadResource("harness:platform/connectorTerraformCloud:ConnectorTerraformCloud", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorTerraformCloud resources.
type connectorTerraformCloudState struct {
	// Credentials to connect to the Terraform Cloud platform.
	Credentials *ConnectorTerraformCloudCredentials `pulumi:"credentials"`
	// Connect only using delegates with these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the Terraform Cloud platform.
	Url *string `pulumi:"url"`
}

type ConnectorTerraformCloudState struct {
	// Credentials to connect to the Terraform Cloud platform.
	Credentials ConnectorTerraformCloudCredentialsPtrInput
	// Connect only using delegates with these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the Terraform Cloud platform.
	Url pulumi.StringPtrInput
}

func (ConnectorTerraformCloudState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorTerraformCloudState)(nil)).Elem()
}

type connectorTerraformCloudArgs struct {
	// Credentials to connect to the Terraform Cloud platform.
	Credentials ConnectorTerraformCloudCredentials `pulumi:"credentials"`
	// Connect only using delegates with these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the Terraform Cloud platform.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a ConnectorTerraformCloud resource.
type ConnectorTerraformCloudArgs struct {
	// Credentials to connect to the Terraform Cloud platform.
	Credentials ConnectorTerraformCloudCredentialsInput
	// Connect only using delegates with these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the Terraform Cloud platform.
	Url pulumi.StringInput
}

func (ConnectorTerraformCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorTerraformCloudArgs)(nil)).Elem()
}

type ConnectorTerraformCloudInput interface {
	pulumi.Input

	ToConnectorTerraformCloudOutput() ConnectorTerraformCloudOutput
	ToConnectorTerraformCloudOutputWithContext(ctx context.Context) ConnectorTerraformCloudOutput
}

func (*ConnectorTerraformCloud) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorTerraformCloud)(nil)).Elem()
}

func (i *ConnectorTerraformCloud) ToConnectorTerraformCloudOutput() ConnectorTerraformCloudOutput {
	return i.ToConnectorTerraformCloudOutputWithContext(context.Background())
}

func (i *ConnectorTerraformCloud) ToConnectorTerraformCloudOutputWithContext(ctx context.Context) ConnectorTerraformCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorTerraformCloudOutput)
}

// ConnectorTerraformCloudArrayInput is an input type that accepts ConnectorTerraformCloudArray and ConnectorTerraformCloudArrayOutput values.
// You can construct a concrete instance of `ConnectorTerraformCloudArrayInput` via:
//
//	ConnectorTerraformCloudArray{ ConnectorTerraformCloudArgs{...} }
type ConnectorTerraformCloudArrayInput interface {
	pulumi.Input

	ToConnectorTerraformCloudArrayOutput() ConnectorTerraformCloudArrayOutput
	ToConnectorTerraformCloudArrayOutputWithContext(context.Context) ConnectorTerraformCloudArrayOutput
}

type ConnectorTerraformCloudArray []ConnectorTerraformCloudInput

func (ConnectorTerraformCloudArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorTerraformCloud)(nil)).Elem()
}

func (i ConnectorTerraformCloudArray) ToConnectorTerraformCloudArrayOutput() ConnectorTerraformCloudArrayOutput {
	return i.ToConnectorTerraformCloudArrayOutputWithContext(context.Background())
}

func (i ConnectorTerraformCloudArray) ToConnectorTerraformCloudArrayOutputWithContext(ctx context.Context) ConnectorTerraformCloudArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorTerraformCloudArrayOutput)
}

// ConnectorTerraformCloudMapInput is an input type that accepts ConnectorTerraformCloudMap and ConnectorTerraformCloudMapOutput values.
// You can construct a concrete instance of `ConnectorTerraformCloudMapInput` via:
//
//	ConnectorTerraformCloudMap{ "key": ConnectorTerraformCloudArgs{...} }
type ConnectorTerraformCloudMapInput interface {
	pulumi.Input

	ToConnectorTerraformCloudMapOutput() ConnectorTerraformCloudMapOutput
	ToConnectorTerraformCloudMapOutputWithContext(context.Context) ConnectorTerraformCloudMapOutput
}

type ConnectorTerraformCloudMap map[string]ConnectorTerraformCloudInput

func (ConnectorTerraformCloudMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorTerraformCloud)(nil)).Elem()
}

func (i ConnectorTerraformCloudMap) ToConnectorTerraformCloudMapOutput() ConnectorTerraformCloudMapOutput {
	return i.ToConnectorTerraformCloudMapOutputWithContext(context.Background())
}

func (i ConnectorTerraformCloudMap) ToConnectorTerraformCloudMapOutputWithContext(ctx context.Context) ConnectorTerraformCloudMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorTerraformCloudMapOutput)
}

type ConnectorTerraformCloudOutput struct{ *pulumi.OutputState }

func (ConnectorTerraformCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorTerraformCloud)(nil)).Elem()
}

func (o ConnectorTerraformCloudOutput) ToConnectorTerraformCloudOutput() ConnectorTerraformCloudOutput {
	return o
}

func (o ConnectorTerraformCloudOutput) ToConnectorTerraformCloudOutputWithContext(ctx context.Context) ConnectorTerraformCloudOutput {
	return o
}

// Credentials to connect to the Terraform Cloud platform.
func (o ConnectorTerraformCloudOutput) Credentials() ConnectorTerraformCloudCredentialsOutput {
	return o.ApplyT(func(v *ConnectorTerraformCloud) ConnectorTerraformCloudCredentialsOutput { return v.Credentials }).(ConnectorTerraformCloudCredentialsOutput)
}

// Connect only using delegates with these tags.
func (o ConnectorTerraformCloudOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorTerraformCloud) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorTerraformCloudOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorTerraformCloud) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ConnectorTerraformCloudOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorTerraformCloud) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorTerraformCloudOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorTerraformCloud) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorTerraformCloudOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorTerraformCloud) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorTerraformCloudOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorTerraformCloud) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorTerraformCloudOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorTerraformCloud) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the Terraform Cloud platform.
func (o ConnectorTerraformCloudOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorTerraformCloud) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ConnectorTerraformCloudArrayOutput struct{ *pulumi.OutputState }

func (ConnectorTerraformCloudArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorTerraformCloud)(nil)).Elem()
}

func (o ConnectorTerraformCloudArrayOutput) ToConnectorTerraformCloudArrayOutput() ConnectorTerraformCloudArrayOutput {
	return o
}

func (o ConnectorTerraformCloudArrayOutput) ToConnectorTerraformCloudArrayOutputWithContext(ctx context.Context) ConnectorTerraformCloudArrayOutput {
	return o
}

func (o ConnectorTerraformCloudArrayOutput) Index(i pulumi.IntInput) ConnectorTerraformCloudOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorTerraformCloud {
		return vs[0].([]*ConnectorTerraformCloud)[vs[1].(int)]
	}).(ConnectorTerraformCloudOutput)
}

type ConnectorTerraformCloudMapOutput struct{ *pulumi.OutputState }

func (ConnectorTerraformCloudMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorTerraformCloud)(nil)).Elem()
}

func (o ConnectorTerraformCloudMapOutput) ToConnectorTerraformCloudMapOutput() ConnectorTerraformCloudMapOutput {
	return o
}

func (o ConnectorTerraformCloudMapOutput) ToConnectorTerraformCloudMapOutputWithContext(ctx context.Context) ConnectorTerraformCloudMapOutput {
	return o
}

func (o ConnectorTerraformCloudMapOutput) MapIndex(k pulumi.StringInput) ConnectorTerraformCloudOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorTerraformCloud {
		return vs[0].(map[string]*ConnectorTerraformCloud)[vs[1].(string)]
	}).(ConnectorTerraformCloudOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorTerraformCloudInput)(nil)).Elem(), &ConnectorTerraformCloud{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorTerraformCloudArrayInput)(nil)).Elem(), ConnectorTerraformCloudArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorTerraformCloudMapInput)(nil)).Elem(), ConnectorTerraformCloudMap{})
	pulumi.RegisterOutputType(ConnectorTerraformCloudOutput{})
	pulumi.RegisterOutputType(ConnectorTerraformCloudArrayOutput{})
	pulumi.RegisterOutputType(ConnectorTerraformCloudMapOutput{})
}
