// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Policyset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewPolicyset(ctx, "test", &platform.PolicysetArgs{
//				Action:     pulumi.String("onrun"),
//				Enabled:    pulumi.Bool(true),
//				Identifier: pulumi.String("harness_platform_policyset.test.identifier"),
//				Policies: platform.PolicysetPolicyArray{
//					&platform.PolicysetPolicyArgs{
//						Identifier: pulumi.String("always_run"),
//						Severity:   pulumi.String("warning"),
//					},
//				},
//				Type: pulumi.String("pipeline"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import using the organization id
//
// ```sh
//
//	$ pulumi import harness:platform/policyset:Policyset example <organization_id>
//
// ```
type Policyset struct {
	pulumi.CustomResourceState

	// Action for the policyset.
	Action pulumi.StringOutput `pulumi:"action"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enabled for the policyset.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	Policies PolicysetPolicyArrayOutput `pulumi:"policies"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Type for the policyset.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPolicyset registers a new resource with the given unique name, arguments, and options.
func NewPolicyset(ctx *pulumi.Context,
	name string, args *PolicysetArgs, opts ...pulumi.ResourceOption) (*Policyset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Policyset
	err := ctx.RegisterResource("harness:platform/policyset:Policyset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyset gets an existing Policyset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicysetState, opts ...pulumi.ResourceOption) (*Policyset, error) {
	var resource Policyset
	err := ctx.ReadResource("harness:platform/policyset:Policyset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policyset resources.
type policysetState struct {
	// Action for the policyset.
	Action *string `pulumi:"action"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enabled for the policyset.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	Policies []PolicysetPolicy `pulumi:"policies"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Type for the policyset.
	Type *string `pulumi:"type"`
}

type PolicysetState struct {
	// Action for the policyset.
	Action pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enabled for the policyset.
	Enabled pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// List of policy identifiers / severity for the policyset.
	Policies PolicysetPolicyArrayInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Type for the policyset.
	Type pulumi.StringPtrInput
}

func (PolicysetState) ElementType() reflect.Type {
	return reflect.TypeOf((*policysetState)(nil)).Elem()
}

type policysetArgs struct {
	// Action for the policyset.
	Action string `pulumi:"action"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Enabled for the policyset.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	Policies []PolicysetPolicy `pulumi:"policies"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Type for the policyset.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Policyset resource.
type PolicysetArgs struct {
	// Action for the policyset.
	Action pulumi.StringInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Enabled for the policyset.
	Enabled pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// List of policy identifiers / severity for the policyset.
	Policies PolicysetPolicyArrayInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// Type for the policyset.
	Type pulumi.StringInput
}

func (PolicysetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policysetArgs)(nil)).Elem()
}

type PolicysetInput interface {
	pulumi.Input

	ToPolicysetOutput() PolicysetOutput
	ToPolicysetOutputWithContext(ctx context.Context) PolicysetOutput
}

func (*Policyset) ElementType() reflect.Type {
	return reflect.TypeOf((**Policyset)(nil)).Elem()
}

func (i *Policyset) ToPolicysetOutput() PolicysetOutput {
	return i.ToPolicysetOutputWithContext(context.Background())
}

func (i *Policyset) ToPolicysetOutputWithContext(ctx context.Context) PolicysetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicysetOutput)
}

// PolicysetArrayInput is an input type that accepts PolicysetArray and PolicysetArrayOutput values.
// You can construct a concrete instance of `PolicysetArrayInput` via:
//
//	PolicysetArray{ PolicysetArgs{...} }
type PolicysetArrayInput interface {
	pulumi.Input

	ToPolicysetArrayOutput() PolicysetArrayOutput
	ToPolicysetArrayOutputWithContext(context.Context) PolicysetArrayOutput
}

type PolicysetArray []PolicysetInput

func (PolicysetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policyset)(nil)).Elem()
}

func (i PolicysetArray) ToPolicysetArrayOutput() PolicysetArrayOutput {
	return i.ToPolicysetArrayOutputWithContext(context.Background())
}

func (i PolicysetArray) ToPolicysetArrayOutputWithContext(ctx context.Context) PolicysetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicysetArrayOutput)
}

// PolicysetMapInput is an input type that accepts PolicysetMap and PolicysetMapOutput values.
// You can construct a concrete instance of `PolicysetMapInput` via:
//
//	PolicysetMap{ "key": PolicysetArgs{...} }
type PolicysetMapInput interface {
	pulumi.Input

	ToPolicysetMapOutput() PolicysetMapOutput
	ToPolicysetMapOutputWithContext(context.Context) PolicysetMapOutput
}

type PolicysetMap map[string]PolicysetInput

func (PolicysetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policyset)(nil)).Elem()
}

func (i PolicysetMap) ToPolicysetMapOutput() PolicysetMapOutput {
	return i.ToPolicysetMapOutputWithContext(context.Background())
}

func (i PolicysetMap) ToPolicysetMapOutputWithContext(ctx context.Context) PolicysetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicysetMapOutput)
}

type PolicysetOutput struct{ *pulumi.OutputState }

func (PolicysetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policyset)(nil)).Elem()
}

func (o PolicysetOutput) ToPolicysetOutput() PolicysetOutput {
	return o
}

func (o PolicysetOutput) ToPolicysetOutputWithContext(ctx context.Context) PolicysetOutput {
	return o
}

// Action for the policyset.
func (o PolicysetOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Policyset) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Description of the resource.
func (o PolicysetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policyset) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enabled for the policyset.
func (o PolicysetOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policyset) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the resource.
func (o PolicysetOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Policyset) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o PolicysetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policyset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o PolicysetOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policyset) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// List of policy identifiers / severity for the policyset.
func (o PolicysetOutput) Policies() PolicysetPolicyArrayOutput {
	return o.ApplyT(func(v *Policyset) PolicysetPolicyArrayOutput { return v.Policies }).(PolicysetPolicyArrayOutput)
}

// Unique identifier of the project.
func (o PolicysetOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policyset) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o PolicysetOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Policyset) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Type for the policyset.
func (o PolicysetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Policyset) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type PolicysetArrayOutput struct{ *pulumi.OutputState }

func (PolicysetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policyset)(nil)).Elem()
}

func (o PolicysetArrayOutput) ToPolicysetArrayOutput() PolicysetArrayOutput {
	return o
}

func (o PolicysetArrayOutput) ToPolicysetArrayOutputWithContext(ctx context.Context) PolicysetArrayOutput {
	return o
}

func (o PolicysetArrayOutput) Index(i pulumi.IntInput) PolicysetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policyset {
		return vs[0].([]*Policyset)[vs[1].(int)]
	}).(PolicysetOutput)
}

type PolicysetMapOutput struct{ *pulumi.OutputState }

func (PolicysetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policyset)(nil)).Elem()
}

func (o PolicysetMapOutput) ToPolicysetMapOutput() PolicysetMapOutput {
	return o
}

func (o PolicysetMapOutput) ToPolicysetMapOutputWithContext(ctx context.Context) PolicysetMapOutput {
	return o
}

func (o PolicysetMapOutput) MapIndex(k pulumi.StringInput) PolicysetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policyset {
		return vs[0].(map[string]*Policyset)[vs[1].(string)]
	}).(PolicysetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicysetInput)(nil)).Elem(), &Policyset{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicysetArrayInput)(nil)).Elem(), PolicysetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicysetMapInput)(nil)).Elem(), PolicysetMap{})
	pulumi.RegisterOutputType(PolicysetOutput{})
	pulumi.RegisterOutputType(PolicysetArrayOutput{})
	pulumi.RegisterOutputType(PolicysetMapOutput{})
}
