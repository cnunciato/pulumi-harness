// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Prometheus connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewPrometheusConnector(ctx, "example", &platform.PrometheusConnectorArgs{
//				DelegateSelectors: pulumi.StringArray{
//					pulumi.String("harness-delegate"),
//				},
//				Description: pulumi.String("test"),
//				Headers: platform.PrometheusConnectorHeaderArray{
//					&platform.PrometheusConnectorHeaderArgs{
//						EncryptedValueRef: pulumi.String("account.secret_identifier"),
//						Key:               pulumi.String("key"),
//						Value:             pulumi.String("value"),
//						ValueEncrypted:    pulumi.Bool(true),
//					},
//				},
//				Identifier:  pulumi.String("idntifier"),
//				PasswordRef: pulumi.String("account.secret_identifier"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Url:      pulumi.String("https://prometheus.com/"),
//				UserName: pulumi.String("user_name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import using prometheus connector id
//
// ```sh
//
//	$ pulumi import harness:platform/prometheusConnector:PrometheusConnector example <connector_id>
//
// ```
type PrometheusConnector struct {
	pulumi.CustomResourceState

	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Headers.
	Headers PrometheusConnectorHeaderArrayOutput `pulumi:"headers"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the Organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Password reference.
	PasswordRef pulumi.StringPtrOutput `pulumi:"passwordRef"`
	// Unique identifier of the Project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Url of the Prometheus server.
	Url pulumi.StringOutput `pulumi:"url"`
	// User name.
	UserName pulumi.StringPtrOutput `pulumi:"userName"`
}

// NewPrometheusConnector registers a new resource with the given unique name, arguments, and options.
func NewPrometheusConnector(ctx *pulumi.Context,
	name string, args *PrometheusConnectorArgs, opts ...pulumi.ResourceOption) (*PrometheusConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PrometheusConnector
	err := ctx.RegisterResource("harness:platform/prometheusConnector:PrometheusConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrometheusConnector gets an existing PrometheusConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrometheusConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrometheusConnectorState, opts ...pulumi.ResourceOption) (*PrometheusConnector, error) {
	var resource PrometheusConnector
	err := ctx.ReadResource("harness:platform/prometheusConnector:PrometheusConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrometheusConnector resources.
type prometheusConnectorState struct {
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Headers.
	Headers []PrometheusConnectorHeader `pulumi:"headers"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the Organization.
	OrgId *string `pulumi:"orgId"`
	// Password reference.
	PasswordRef *string `pulumi:"passwordRef"`
	// Unique identifier of the Project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the Prometheus server.
	Url *string `pulumi:"url"`
	// User name.
	UserName *string `pulumi:"userName"`
}

type PrometheusConnectorState struct {
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Headers.
	Headers PrometheusConnectorHeaderArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the Organization.
	OrgId pulumi.StringPtrInput
	// Password reference.
	PasswordRef pulumi.StringPtrInput
	// Unique identifier of the Project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the Prometheus server.
	Url pulumi.StringPtrInput
	// User name.
	UserName pulumi.StringPtrInput
}

func (PrometheusConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusConnectorState)(nil)).Elem()
}

type prometheusConnectorArgs struct {
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Headers.
	Headers []PrometheusConnectorHeader `pulumi:"headers"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the Organization.
	OrgId *string `pulumi:"orgId"`
	// Password reference.
	PasswordRef *string `pulumi:"passwordRef"`
	// Unique identifier of the Project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the Prometheus server.
	Url string `pulumi:"url"`
	// User name.
	UserName *string `pulumi:"userName"`
}

// The set of arguments for constructing a PrometheusConnector resource.
type PrometheusConnectorArgs struct {
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Headers.
	Headers PrometheusConnectorHeaderArrayInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the Organization.
	OrgId pulumi.StringPtrInput
	// Password reference.
	PasswordRef pulumi.StringPtrInput
	// Unique identifier of the Project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the Prometheus server.
	Url pulumi.StringInput
	// User name.
	UserName pulumi.StringPtrInput
}

func (PrometheusConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusConnectorArgs)(nil)).Elem()
}

type PrometheusConnectorInput interface {
	pulumi.Input

	ToPrometheusConnectorOutput() PrometheusConnectorOutput
	ToPrometheusConnectorOutputWithContext(ctx context.Context) PrometheusConnectorOutput
}

func (*PrometheusConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusConnector)(nil)).Elem()
}

func (i *PrometheusConnector) ToPrometheusConnectorOutput() PrometheusConnectorOutput {
	return i.ToPrometheusConnectorOutputWithContext(context.Background())
}

func (i *PrometheusConnector) ToPrometheusConnectorOutputWithContext(ctx context.Context) PrometheusConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusConnectorOutput)
}

// PrometheusConnectorArrayInput is an input type that accepts PrometheusConnectorArray and PrometheusConnectorArrayOutput values.
// You can construct a concrete instance of `PrometheusConnectorArrayInput` via:
//
//	PrometheusConnectorArray{ PrometheusConnectorArgs{...} }
type PrometheusConnectorArrayInput interface {
	pulumi.Input

	ToPrometheusConnectorArrayOutput() PrometheusConnectorArrayOutput
	ToPrometheusConnectorArrayOutputWithContext(context.Context) PrometheusConnectorArrayOutput
}

type PrometheusConnectorArray []PrometheusConnectorInput

func (PrometheusConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrometheusConnector)(nil)).Elem()
}

func (i PrometheusConnectorArray) ToPrometheusConnectorArrayOutput() PrometheusConnectorArrayOutput {
	return i.ToPrometheusConnectorArrayOutputWithContext(context.Background())
}

func (i PrometheusConnectorArray) ToPrometheusConnectorArrayOutputWithContext(ctx context.Context) PrometheusConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusConnectorArrayOutput)
}

// PrometheusConnectorMapInput is an input type that accepts PrometheusConnectorMap and PrometheusConnectorMapOutput values.
// You can construct a concrete instance of `PrometheusConnectorMapInput` via:
//
//	PrometheusConnectorMap{ "key": PrometheusConnectorArgs{...} }
type PrometheusConnectorMapInput interface {
	pulumi.Input

	ToPrometheusConnectorMapOutput() PrometheusConnectorMapOutput
	ToPrometheusConnectorMapOutputWithContext(context.Context) PrometheusConnectorMapOutput
}

type PrometheusConnectorMap map[string]PrometheusConnectorInput

func (PrometheusConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrometheusConnector)(nil)).Elem()
}

func (i PrometheusConnectorMap) ToPrometheusConnectorMapOutput() PrometheusConnectorMapOutput {
	return i.ToPrometheusConnectorMapOutputWithContext(context.Background())
}

func (i PrometheusConnectorMap) ToPrometheusConnectorMapOutputWithContext(ctx context.Context) PrometheusConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusConnectorMapOutput)
}

type PrometheusConnectorOutput struct{ *pulumi.OutputState }

func (PrometheusConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusConnector)(nil)).Elem()
}

func (o PrometheusConnectorOutput) ToPrometheusConnectorOutput() PrometheusConnectorOutput {
	return o
}

func (o PrometheusConnectorOutput) ToPrometheusConnectorOutputWithContext(ctx context.Context) PrometheusConnectorOutput {
	return o
}

// Connect using only the delegates which have these tags.
func (o PrometheusConnectorOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrometheusConnector) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o PrometheusConnectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusConnector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Headers.
func (o PrometheusConnectorOutput) Headers() PrometheusConnectorHeaderArrayOutput {
	return o.ApplyT(func(v *PrometheusConnector) PrometheusConnectorHeaderArrayOutput { return v.Headers }).(PrometheusConnectorHeaderArrayOutput)
}

// Unique identifier of the resource.
func (o PrometheusConnectorOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *PrometheusConnector) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o PrometheusConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PrometheusConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the Organization.
func (o PrometheusConnectorOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusConnector) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Password reference.
func (o PrometheusConnectorOutput) PasswordRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusConnector) pulumi.StringPtrOutput { return v.PasswordRef }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Project.
func (o PrometheusConnectorOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusConnector) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o PrometheusConnectorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrometheusConnector) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the Prometheus server.
func (o PrometheusConnectorOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *PrometheusConnector) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// User name.
func (o PrometheusConnectorOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusConnector) pulumi.StringPtrOutput { return v.UserName }).(pulumi.StringPtrOutput)
}

type PrometheusConnectorArrayOutput struct{ *pulumi.OutputState }

func (PrometheusConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrometheusConnector)(nil)).Elem()
}

func (o PrometheusConnectorArrayOutput) ToPrometheusConnectorArrayOutput() PrometheusConnectorArrayOutput {
	return o
}

func (o PrometheusConnectorArrayOutput) ToPrometheusConnectorArrayOutputWithContext(ctx context.Context) PrometheusConnectorArrayOutput {
	return o
}

func (o PrometheusConnectorArrayOutput) Index(i pulumi.IntInput) PrometheusConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrometheusConnector {
		return vs[0].([]*PrometheusConnector)[vs[1].(int)]
	}).(PrometheusConnectorOutput)
}

type PrometheusConnectorMapOutput struct{ *pulumi.OutputState }

func (PrometheusConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrometheusConnector)(nil)).Elem()
}

func (o PrometheusConnectorMapOutput) ToPrometheusConnectorMapOutput() PrometheusConnectorMapOutput {
	return o
}

func (o PrometheusConnectorMapOutput) ToPrometheusConnectorMapOutputWithContext(ctx context.Context) PrometheusConnectorMapOutput {
	return o
}

func (o PrometheusConnectorMapOutput) MapIndex(k pulumi.StringInput) PrometheusConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrometheusConnector {
		return vs[0].(map[string]*PrometheusConnector)[vs[1].(string)]
	}).(PrometheusConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusConnectorInput)(nil)).Elem(), &PrometheusConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusConnectorArrayInput)(nil)).Elem(), PrometheusConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusConnectorMapInput)(nil)).Elem(), PrometheusConnectorMap{})
	pulumi.RegisterOutputType(PrometheusConnectorOutput{})
	pulumi.RegisterOutputType(PrometheusConnectorArrayOutput{})
	pulumi.RegisterOutputType(PrometheusConnectorMapOutput{})
}
