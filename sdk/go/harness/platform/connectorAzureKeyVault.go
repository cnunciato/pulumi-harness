// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an Azure key vault in Harness.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewConnectorAzureKeyVault(ctx, "example", &platform.ConnectorAzureKeyVaultArgs{
//				AzureEnvironmentType: pulumi.String("AZURE"),
//				ClientId:             pulumi.String("client_id"),
//				Description:          pulumi.String("example"),
//				Identifier:           pulumi.String("identifier"),
//				IsDefault:            pulumi.Bool(false),
//				SecretKey:            pulumi.String("account.secret_key"),
//				Subscription:         pulumi.String("subscription"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				TenantId:  pulumi.String("tenant_id"),
//				VaultName: pulumi.String("vault_name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level azure key vault connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorAzureKeyVault:ConnectorAzureKeyVault example <connector_id>
//
// ```
//
//	Import org level azure key vault connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorAzureKeyVault:ConnectorAzureKeyVault example <ord_id>/<connector_id>
//
// ```
//
//	Import project level azure key vault connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorAzureKeyVault:ConnectorAzureKeyVault example <org_id>/<project_id>/<connector_id>
//
// ```
type ConnectorAzureKeyVault struct {
	pulumi.CustomResourceState

	// Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
	AzureEnvironmentType pulumi.StringOutput `pulumi:"azureEnvironmentType"`
	// Application ID of the Azure App.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Specifies whether or not is the default value.
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The Harness text secret with the Azure authentication key as its value.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// Azure subscription ID.
	Subscription pulumi.StringOutput `pulumi:"subscription"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The Azure Active Directory (Azure AD) directory ID where you created your application.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Name of the vault.
	VaultName pulumi.StringOutput `pulumi:"vaultName"`
}

// NewConnectorAzureKeyVault registers a new resource with the given unique name, arguments, and options.
func NewConnectorAzureKeyVault(ctx *pulumi.Context,
	name string, args *ConnectorAzureKeyVaultArgs, opts ...pulumi.ResourceOption) (*ConnectorAzureKeyVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.SecretKey == nil {
		return nil, errors.New("invalid value for required argument 'SecretKey'")
	}
	if args.Subscription == nil {
		return nil, errors.New("invalid value for required argument 'Subscription'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.VaultName == nil {
		return nil, errors.New("invalid value for required argument 'VaultName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectorAzureKeyVault
	err := ctx.RegisterResource("harness:platform/connectorAzureKeyVault:ConnectorAzureKeyVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorAzureKeyVault gets an existing ConnectorAzureKeyVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorAzureKeyVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorAzureKeyVaultState, opts ...pulumi.ResourceOption) (*ConnectorAzureKeyVault, error) {
	var resource ConnectorAzureKeyVault
	err := ctx.ReadResource("harness:platform/connectorAzureKeyVault:ConnectorAzureKeyVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorAzureKeyVault resources.
type connectorAzureKeyVaultState struct {
	// Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
	AzureEnvironmentType *string `pulumi:"azureEnvironmentType"`
	// Application ID of the Azure App.
	ClientId *string `pulumi:"clientId"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Specifies whether or not is the default value.
	IsDefault *bool `pulumi:"isDefault"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The Harness text secret with the Azure authentication key as its value.
	SecretKey *string `pulumi:"secretKey"`
	// Azure subscription ID.
	Subscription *string `pulumi:"subscription"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// The Azure Active Directory (Azure AD) directory ID where you created your application.
	TenantId *string `pulumi:"tenantId"`
	// Name of the vault.
	VaultName *string `pulumi:"vaultName"`
}

type ConnectorAzureKeyVaultState struct {
	// Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
	AzureEnvironmentType pulumi.StringPtrInput
	// Application ID of the Azure App.
	ClientId pulumi.StringPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Specifies whether or not is the default value.
	IsDefault pulumi.BoolPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The Harness text secret with the Azure authentication key as its value.
	SecretKey pulumi.StringPtrInput
	// Azure subscription ID.
	Subscription pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// The Azure Active Directory (Azure AD) directory ID where you created your application.
	TenantId pulumi.StringPtrInput
	// Name of the vault.
	VaultName pulumi.StringPtrInput
}

func (ConnectorAzureKeyVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorAzureKeyVaultState)(nil)).Elem()
}

type connectorAzureKeyVaultArgs struct {
	// Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
	AzureEnvironmentType *string `pulumi:"azureEnvironmentType"`
	// Application ID of the Azure App.
	ClientId string `pulumi:"clientId"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Specifies whether or not is the default value.
	IsDefault *bool `pulumi:"isDefault"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The Harness text secret with the Azure authentication key as its value.
	SecretKey string `pulumi:"secretKey"`
	// Azure subscription ID.
	Subscription string `pulumi:"subscription"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// The Azure Active Directory (Azure AD) directory ID where you created your application.
	TenantId string `pulumi:"tenantId"`
	// Name of the vault.
	VaultName string `pulumi:"vaultName"`
}

// The set of arguments for constructing a ConnectorAzureKeyVault resource.
type ConnectorAzureKeyVaultArgs struct {
	// Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
	AzureEnvironmentType pulumi.StringPtrInput
	// Application ID of the Azure App.
	ClientId pulumi.StringInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Specifies whether or not is the default value.
	IsDefault pulumi.BoolPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The Harness text secret with the Azure authentication key as its value.
	SecretKey pulumi.StringInput
	// Azure subscription ID.
	Subscription pulumi.StringInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// The Azure Active Directory (Azure AD) directory ID where you created your application.
	TenantId pulumi.StringInput
	// Name of the vault.
	VaultName pulumi.StringInput
}

func (ConnectorAzureKeyVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorAzureKeyVaultArgs)(nil)).Elem()
}

type ConnectorAzureKeyVaultInput interface {
	pulumi.Input

	ToConnectorAzureKeyVaultOutput() ConnectorAzureKeyVaultOutput
	ToConnectorAzureKeyVaultOutputWithContext(ctx context.Context) ConnectorAzureKeyVaultOutput
}

func (*ConnectorAzureKeyVault) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorAzureKeyVault)(nil)).Elem()
}

func (i *ConnectorAzureKeyVault) ToConnectorAzureKeyVaultOutput() ConnectorAzureKeyVaultOutput {
	return i.ToConnectorAzureKeyVaultOutputWithContext(context.Background())
}

func (i *ConnectorAzureKeyVault) ToConnectorAzureKeyVaultOutputWithContext(ctx context.Context) ConnectorAzureKeyVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorAzureKeyVaultOutput)
}

// ConnectorAzureKeyVaultArrayInput is an input type that accepts ConnectorAzureKeyVaultArray and ConnectorAzureKeyVaultArrayOutput values.
// You can construct a concrete instance of `ConnectorAzureKeyVaultArrayInput` via:
//
//	ConnectorAzureKeyVaultArray{ ConnectorAzureKeyVaultArgs{...} }
type ConnectorAzureKeyVaultArrayInput interface {
	pulumi.Input

	ToConnectorAzureKeyVaultArrayOutput() ConnectorAzureKeyVaultArrayOutput
	ToConnectorAzureKeyVaultArrayOutputWithContext(context.Context) ConnectorAzureKeyVaultArrayOutput
}

type ConnectorAzureKeyVaultArray []ConnectorAzureKeyVaultInput

func (ConnectorAzureKeyVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorAzureKeyVault)(nil)).Elem()
}

func (i ConnectorAzureKeyVaultArray) ToConnectorAzureKeyVaultArrayOutput() ConnectorAzureKeyVaultArrayOutput {
	return i.ToConnectorAzureKeyVaultArrayOutputWithContext(context.Background())
}

func (i ConnectorAzureKeyVaultArray) ToConnectorAzureKeyVaultArrayOutputWithContext(ctx context.Context) ConnectorAzureKeyVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorAzureKeyVaultArrayOutput)
}

// ConnectorAzureKeyVaultMapInput is an input type that accepts ConnectorAzureKeyVaultMap and ConnectorAzureKeyVaultMapOutput values.
// You can construct a concrete instance of `ConnectorAzureKeyVaultMapInput` via:
//
//	ConnectorAzureKeyVaultMap{ "key": ConnectorAzureKeyVaultArgs{...} }
type ConnectorAzureKeyVaultMapInput interface {
	pulumi.Input

	ToConnectorAzureKeyVaultMapOutput() ConnectorAzureKeyVaultMapOutput
	ToConnectorAzureKeyVaultMapOutputWithContext(context.Context) ConnectorAzureKeyVaultMapOutput
}

type ConnectorAzureKeyVaultMap map[string]ConnectorAzureKeyVaultInput

func (ConnectorAzureKeyVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorAzureKeyVault)(nil)).Elem()
}

func (i ConnectorAzureKeyVaultMap) ToConnectorAzureKeyVaultMapOutput() ConnectorAzureKeyVaultMapOutput {
	return i.ToConnectorAzureKeyVaultMapOutputWithContext(context.Background())
}

func (i ConnectorAzureKeyVaultMap) ToConnectorAzureKeyVaultMapOutputWithContext(ctx context.Context) ConnectorAzureKeyVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorAzureKeyVaultMapOutput)
}

type ConnectorAzureKeyVaultOutput struct{ *pulumi.OutputState }

func (ConnectorAzureKeyVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorAzureKeyVault)(nil)).Elem()
}

func (o ConnectorAzureKeyVaultOutput) ToConnectorAzureKeyVaultOutput() ConnectorAzureKeyVaultOutput {
	return o
}

func (o ConnectorAzureKeyVaultOutput) ToConnectorAzureKeyVaultOutputWithContext(ctx context.Context) ConnectorAzureKeyVaultOutput {
	return o
}

// Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE
func (o ConnectorAzureKeyVaultOutput) AzureEnvironmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringOutput { return v.AzureEnvironmentType }).(pulumi.StringOutput)
}

// Application ID of the Azure App.
func (o ConnectorAzureKeyVaultOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Tags to filter delegates for connection.
func (o ConnectorAzureKeyVaultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorAzureKeyVaultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ConnectorAzureKeyVaultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Specifies whether or not is the default value.
func (o ConnectorAzureKeyVaultOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// Name of the resource.
func (o ConnectorAzureKeyVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorAzureKeyVaultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorAzureKeyVaultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The Harness text secret with the Azure authentication key as its value.
func (o ConnectorAzureKeyVaultOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// Azure subscription ID.
func (o ConnectorAzureKeyVaultOutput) Subscription() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringOutput { return v.Subscription }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o ConnectorAzureKeyVaultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The Azure Active Directory (Azure AD) directory ID where you created your application.
func (o ConnectorAzureKeyVaultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Name of the vault.
func (o ConnectorAzureKeyVaultOutput) VaultName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorAzureKeyVault) pulumi.StringOutput { return v.VaultName }).(pulumi.StringOutput)
}

type ConnectorAzureKeyVaultArrayOutput struct{ *pulumi.OutputState }

func (ConnectorAzureKeyVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorAzureKeyVault)(nil)).Elem()
}

func (o ConnectorAzureKeyVaultArrayOutput) ToConnectorAzureKeyVaultArrayOutput() ConnectorAzureKeyVaultArrayOutput {
	return o
}

func (o ConnectorAzureKeyVaultArrayOutput) ToConnectorAzureKeyVaultArrayOutputWithContext(ctx context.Context) ConnectorAzureKeyVaultArrayOutput {
	return o
}

func (o ConnectorAzureKeyVaultArrayOutput) Index(i pulumi.IntInput) ConnectorAzureKeyVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorAzureKeyVault {
		return vs[0].([]*ConnectorAzureKeyVault)[vs[1].(int)]
	}).(ConnectorAzureKeyVaultOutput)
}

type ConnectorAzureKeyVaultMapOutput struct{ *pulumi.OutputState }

func (ConnectorAzureKeyVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorAzureKeyVault)(nil)).Elem()
}

func (o ConnectorAzureKeyVaultMapOutput) ToConnectorAzureKeyVaultMapOutput() ConnectorAzureKeyVaultMapOutput {
	return o
}

func (o ConnectorAzureKeyVaultMapOutput) ToConnectorAzureKeyVaultMapOutputWithContext(ctx context.Context) ConnectorAzureKeyVaultMapOutput {
	return o
}

func (o ConnectorAzureKeyVaultMapOutput) MapIndex(k pulumi.StringInput) ConnectorAzureKeyVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorAzureKeyVault {
		return vs[0].(map[string]*ConnectorAzureKeyVault)[vs[1].(string)]
	}).(ConnectorAzureKeyVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorAzureKeyVaultInput)(nil)).Elem(), &ConnectorAzureKeyVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorAzureKeyVaultArrayInput)(nil)).Elem(), ConnectorAzureKeyVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorAzureKeyVaultMapInput)(nil)).Elem(), ConnectorAzureKeyVaultMap{})
	pulumi.RegisterOutputType(ConnectorAzureKeyVaultOutput{})
	pulumi.RegisterOutputType(ConnectorAzureKeyVaultArrayOutput{})
	pulumi.RegisterOutputType(ConnectorAzureKeyVaultMapOutput{})
}
