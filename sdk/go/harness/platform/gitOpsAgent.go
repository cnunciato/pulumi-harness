// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GitOpsAgent struct {
	pulumi.CustomResourceState

	// account identifier of the agent.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// description of the agent.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// identifier of the agent.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// tags for the agent.
	Metadatas GitOpsAgentMetadataArrayOutput `pulumi:"metadatas"`
	// name of the agent.
	Name pulumi.StringOutput `pulumi:"name"`
	// org identifier of the agent.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// org identifier of the agent.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// tags for the agent.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// type of the agent.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGitOpsAgent registers a new resource with the given unique name, arguments, and options.
func NewGitOpsAgent(ctx *pulumi.Context,
	name string, args *GitOpsAgentArgs, opts ...pulumi.ResourceOption) (*GitOpsAgent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GitOpsAgent
	err := ctx.RegisterResource("harness:platform/gitOpsAgent:GitOpsAgent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitOpsAgent gets an existing GitOpsAgent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitOpsAgent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitOpsAgentState, opts ...pulumi.ResourceOption) (*GitOpsAgent, error) {
	var resource GitOpsAgent
	err := ctx.ReadResource("harness:platform/gitOpsAgent:GitOpsAgent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitOpsAgent resources.
type gitOpsAgentState struct {
	// account identifier of the agent.
	AccountId *string `pulumi:"accountId"`
	// description of the agent.
	Description *string `pulumi:"description"`
	// identifier of the agent.
	Identifier *string `pulumi:"identifier"`
	// tags for the agent.
	Metadatas []GitOpsAgentMetadata `pulumi:"metadatas"`
	// name of the agent.
	Name *string `pulumi:"name"`
	// org identifier of the agent.
	OrgId *string `pulumi:"orgId"`
	// org identifier of the agent.
	ProjectId *string `pulumi:"projectId"`
	// tags for the agent.
	Tags map[string]string `pulumi:"tags"`
	// type of the agent.
	Type *string `pulumi:"type"`
}

type GitOpsAgentState struct {
	// account identifier of the agent.
	AccountId pulumi.StringPtrInput
	// description of the agent.
	Description pulumi.StringPtrInput
	// identifier of the agent.
	Identifier pulumi.StringPtrInput
	// tags for the agent.
	Metadatas GitOpsAgentMetadataArrayInput
	// name of the agent.
	Name pulumi.StringPtrInput
	// org identifier of the agent.
	OrgId pulumi.StringPtrInput
	// org identifier of the agent.
	ProjectId pulumi.StringPtrInput
	// tags for the agent.
	Tags pulumi.StringMapInput
	// type of the agent.
	Type pulumi.StringPtrInput
}

func (GitOpsAgentState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsAgentState)(nil)).Elem()
}

type gitOpsAgentArgs struct {
	// account identifier of the agent.
	AccountId string `pulumi:"accountId"`
	// description of the agent.
	Description *string `pulumi:"description"`
	// identifier of the agent.
	Identifier string `pulumi:"identifier"`
	// tags for the agent.
	Metadatas []GitOpsAgentMetadata `pulumi:"metadatas"`
	// name of the agent.
	Name *string `pulumi:"name"`
	// org identifier of the agent.
	OrgId string `pulumi:"orgId"`
	// org identifier of the agent.
	ProjectId string `pulumi:"projectId"`
	// tags for the agent.
	Tags map[string]string `pulumi:"tags"`
	// type of the agent.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a GitOpsAgent resource.
type GitOpsAgentArgs struct {
	// account identifier of the agent.
	AccountId pulumi.StringInput
	// description of the agent.
	Description pulumi.StringPtrInput
	// identifier of the agent.
	Identifier pulumi.StringInput
	// tags for the agent.
	Metadatas GitOpsAgentMetadataArrayInput
	// name of the agent.
	Name pulumi.StringPtrInput
	// org identifier of the agent.
	OrgId pulumi.StringInput
	// org identifier of the agent.
	ProjectId pulumi.StringInput
	// tags for the agent.
	Tags pulumi.StringMapInput
	// type of the agent.
	Type pulumi.StringInput
}

func (GitOpsAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsAgentArgs)(nil)).Elem()
}

type GitOpsAgentInput interface {
	pulumi.Input

	ToGitOpsAgentOutput() GitOpsAgentOutput
	ToGitOpsAgentOutputWithContext(ctx context.Context) GitOpsAgentOutput
}

func (*GitOpsAgent) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsAgent)(nil)).Elem()
}

func (i *GitOpsAgent) ToGitOpsAgentOutput() GitOpsAgentOutput {
	return i.ToGitOpsAgentOutputWithContext(context.Background())
}

func (i *GitOpsAgent) ToGitOpsAgentOutputWithContext(ctx context.Context) GitOpsAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsAgentOutput)
}

// GitOpsAgentArrayInput is an input type that accepts GitOpsAgentArray and GitOpsAgentArrayOutput values.
// You can construct a concrete instance of `GitOpsAgentArrayInput` via:
//
//	GitOpsAgentArray{ GitOpsAgentArgs{...} }
type GitOpsAgentArrayInput interface {
	pulumi.Input

	ToGitOpsAgentArrayOutput() GitOpsAgentArrayOutput
	ToGitOpsAgentArrayOutputWithContext(context.Context) GitOpsAgentArrayOutput
}

type GitOpsAgentArray []GitOpsAgentInput

func (GitOpsAgentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitOpsAgent)(nil)).Elem()
}

func (i GitOpsAgentArray) ToGitOpsAgentArrayOutput() GitOpsAgentArrayOutput {
	return i.ToGitOpsAgentArrayOutputWithContext(context.Background())
}

func (i GitOpsAgentArray) ToGitOpsAgentArrayOutputWithContext(ctx context.Context) GitOpsAgentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsAgentArrayOutput)
}

// GitOpsAgentMapInput is an input type that accepts GitOpsAgentMap and GitOpsAgentMapOutput values.
// You can construct a concrete instance of `GitOpsAgentMapInput` via:
//
//	GitOpsAgentMap{ "key": GitOpsAgentArgs{...} }
type GitOpsAgentMapInput interface {
	pulumi.Input

	ToGitOpsAgentMapOutput() GitOpsAgentMapOutput
	ToGitOpsAgentMapOutputWithContext(context.Context) GitOpsAgentMapOutput
}

type GitOpsAgentMap map[string]GitOpsAgentInput

func (GitOpsAgentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitOpsAgent)(nil)).Elem()
}

func (i GitOpsAgentMap) ToGitOpsAgentMapOutput() GitOpsAgentMapOutput {
	return i.ToGitOpsAgentMapOutputWithContext(context.Background())
}

func (i GitOpsAgentMap) ToGitOpsAgentMapOutputWithContext(ctx context.Context) GitOpsAgentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsAgentMapOutput)
}

type GitOpsAgentOutput struct{ *pulumi.OutputState }

func (GitOpsAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsAgent)(nil)).Elem()
}

func (o GitOpsAgentOutput) ToGitOpsAgentOutput() GitOpsAgentOutput {
	return o
}

func (o GitOpsAgentOutput) ToGitOpsAgentOutputWithContext(ctx context.Context) GitOpsAgentOutput {
	return o
}

// account identifier of the agent.
func (o GitOpsAgentOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsAgent) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// description of the agent.
func (o GitOpsAgentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsAgent) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// identifier of the agent.
func (o GitOpsAgentOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsAgent) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// tags for the agent.
func (o GitOpsAgentOutput) Metadatas() GitOpsAgentMetadataArrayOutput {
	return o.ApplyT(func(v *GitOpsAgent) GitOpsAgentMetadataArrayOutput { return v.Metadatas }).(GitOpsAgentMetadataArrayOutput)
}

// name of the agent.
func (o GitOpsAgentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsAgent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// org identifier of the agent.
func (o GitOpsAgentOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsAgent) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// org identifier of the agent.
func (o GitOpsAgentOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsAgent) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// tags for the agent.
func (o GitOpsAgentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitOpsAgent) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// type of the agent.
func (o GitOpsAgentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsAgent) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type GitOpsAgentArrayOutput struct{ *pulumi.OutputState }

func (GitOpsAgentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitOpsAgent)(nil)).Elem()
}

func (o GitOpsAgentArrayOutput) ToGitOpsAgentArrayOutput() GitOpsAgentArrayOutput {
	return o
}

func (o GitOpsAgentArrayOutput) ToGitOpsAgentArrayOutputWithContext(ctx context.Context) GitOpsAgentArrayOutput {
	return o
}

func (o GitOpsAgentArrayOutput) Index(i pulumi.IntInput) GitOpsAgentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitOpsAgent {
		return vs[0].([]*GitOpsAgent)[vs[1].(int)]
	}).(GitOpsAgentOutput)
}

type GitOpsAgentMapOutput struct{ *pulumi.OutputState }

func (GitOpsAgentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitOpsAgent)(nil)).Elem()
}

func (o GitOpsAgentMapOutput) ToGitOpsAgentMapOutput() GitOpsAgentMapOutput {
	return o
}

func (o GitOpsAgentMapOutput) ToGitOpsAgentMapOutputWithContext(ctx context.Context) GitOpsAgentMapOutput {
	return o
}

func (o GitOpsAgentMapOutput) MapIndex(k pulumi.StringInput) GitOpsAgentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitOpsAgent {
		return vs[0].(map[string]*GitOpsAgent)[vs[1].(string)]
	}).(GitOpsAgentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsAgentInput)(nil)).Elem(), &GitOpsAgent{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsAgentArrayInput)(nil)).Elem(), GitOpsAgentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsAgentMapInput)(nil)).Elem(), GitOpsAgentMap{})
	pulumi.RegisterOutputType(GitOpsAgentOutput{})
	pulumi.RegisterOutputType(GitOpsAgentArrayOutput{})
	pulumi.RegisterOutputType(GitOpsAgentMapOutput{})
}
