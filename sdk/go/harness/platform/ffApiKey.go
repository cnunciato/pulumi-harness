// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an environment SDK key for Feature Flags.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testserverapikey, err := platform.NewFfApiKey(ctx, "testserverapikey", &platform.FfApiKeyArgs{
//				Identifier:  pulumi.String("testserver"),
//				Description: pulumi.String("this is a server SDK key"),
//				OrgId:       pulumi.String("test"),
//				ProjectId:   pulumi.String("testff"),
//				EnvId:       pulumi.String("testenv"),
//				ExpiredAt:   pulumi.Int(1713729225),
//				Type:        pulumi.String("Server"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("serversdkkey", testserverapikey.ApiKey)
//			return nil
//		})
//	}
//
// ```
type FfApiKey struct {
	pulumi.CustomResourceState

	// The value of the SDK API Key
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// Description of the SDK API Key
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Environment Identifier
	EnvId pulumi.StringOutput `pulumi:"envId"`
	// Expiration datetime of the SDK API Key
	ExpiredAt pulumi.IntPtrOutput `pulumi:"expiredAt"`
	// Identifier of the SDK API Key
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the SDK API Key
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization Identifier
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Project Identifier
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Type of SDK. Valid values are `Server` or `Client`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFfApiKey registers a new resource with the given unique name, arguments, and options.
func NewFfApiKey(ctx *pulumi.Context,
	name string, args *FfApiKeyArgs, opts ...pulumi.ResourceOption) (*FfApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvId == nil {
		return nil, errors.New("invalid value for required argument 'EnvId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource FfApiKey
	err := ctx.RegisterResource("harness:platform/ffApiKey:FfApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFfApiKey gets an existing FfApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFfApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FfApiKeyState, opts ...pulumi.ResourceOption) (*FfApiKey, error) {
	var resource FfApiKey
	err := ctx.ReadResource("harness:platform/ffApiKey:FfApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FfApiKey resources.
type ffApiKeyState struct {
	// The value of the SDK API Key
	ApiKey *string `pulumi:"apiKey"`
	// Description of the SDK API Key
	Description *string `pulumi:"description"`
	// Environment Identifier
	EnvId *string `pulumi:"envId"`
	// Expiration datetime of the SDK API Key
	ExpiredAt *int `pulumi:"expiredAt"`
	// Identifier of the SDK API Key
	Identifier *string `pulumi:"identifier"`
	// Name of the SDK API Key
	Name *string `pulumi:"name"`
	// Organization Identifier
	OrgId *string `pulumi:"orgId"`
	// Project Identifier
	ProjectId *string `pulumi:"projectId"`
	// Type of SDK. Valid values are `Server` or `Client`.
	Type *string `pulumi:"type"`
}

type FfApiKeyState struct {
	// The value of the SDK API Key
	ApiKey pulumi.StringPtrInput
	// Description of the SDK API Key
	Description pulumi.StringPtrInput
	// Environment Identifier
	EnvId pulumi.StringPtrInput
	// Expiration datetime of the SDK API Key
	ExpiredAt pulumi.IntPtrInput
	// Identifier of the SDK API Key
	Identifier pulumi.StringPtrInput
	// Name of the SDK API Key
	Name pulumi.StringPtrInput
	// Organization Identifier
	OrgId pulumi.StringPtrInput
	// Project Identifier
	ProjectId pulumi.StringPtrInput
	// Type of SDK. Valid values are `Server` or `Client`.
	Type pulumi.StringPtrInput
}

func (FfApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ffApiKeyState)(nil)).Elem()
}

type ffApiKeyArgs struct {
	// Description of the SDK API Key
	Description *string `pulumi:"description"`
	// Environment Identifier
	EnvId string `pulumi:"envId"`
	// Expiration datetime of the SDK API Key
	ExpiredAt *int `pulumi:"expiredAt"`
	// Identifier of the SDK API Key
	Identifier string `pulumi:"identifier"`
	// Name of the SDK API Key
	Name *string `pulumi:"name"`
	// Organization Identifier
	OrgId string `pulumi:"orgId"`
	// Project Identifier
	ProjectId string `pulumi:"projectId"`
	// Type of SDK. Valid values are `Server` or `Client`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a FfApiKey resource.
type FfApiKeyArgs struct {
	// Description of the SDK API Key
	Description pulumi.StringPtrInput
	// Environment Identifier
	EnvId pulumi.StringInput
	// Expiration datetime of the SDK API Key
	ExpiredAt pulumi.IntPtrInput
	// Identifier of the SDK API Key
	Identifier pulumi.StringInput
	// Name of the SDK API Key
	Name pulumi.StringPtrInput
	// Organization Identifier
	OrgId pulumi.StringInput
	// Project Identifier
	ProjectId pulumi.StringInput
	// Type of SDK. Valid values are `Server` or `Client`.
	Type pulumi.StringInput
}

func (FfApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ffApiKeyArgs)(nil)).Elem()
}

type FfApiKeyInput interface {
	pulumi.Input

	ToFfApiKeyOutput() FfApiKeyOutput
	ToFfApiKeyOutputWithContext(ctx context.Context) FfApiKeyOutput
}

func (*FfApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**FfApiKey)(nil)).Elem()
}

func (i *FfApiKey) ToFfApiKeyOutput() FfApiKeyOutput {
	return i.ToFfApiKeyOutputWithContext(context.Background())
}

func (i *FfApiKey) ToFfApiKeyOutputWithContext(ctx context.Context) FfApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FfApiKeyOutput)
}

// FfApiKeyArrayInput is an input type that accepts FfApiKeyArray and FfApiKeyArrayOutput values.
// You can construct a concrete instance of `FfApiKeyArrayInput` via:
//
//	FfApiKeyArray{ FfApiKeyArgs{...} }
type FfApiKeyArrayInput interface {
	pulumi.Input

	ToFfApiKeyArrayOutput() FfApiKeyArrayOutput
	ToFfApiKeyArrayOutputWithContext(context.Context) FfApiKeyArrayOutput
}

type FfApiKeyArray []FfApiKeyInput

func (FfApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FfApiKey)(nil)).Elem()
}

func (i FfApiKeyArray) ToFfApiKeyArrayOutput() FfApiKeyArrayOutput {
	return i.ToFfApiKeyArrayOutputWithContext(context.Background())
}

func (i FfApiKeyArray) ToFfApiKeyArrayOutputWithContext(ctx context.Context) FfApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FfApiKeyArrayOutput)
}

// FfApiKeyMapInput is an input type that accepts FfApiKeyMap and FfApiKeyMapOutput values.
// You can construct a concrete instance of `FfApiKeyMapInput` via:
//
//	FfApiKeyMap{ "key": FfApiKeyArgs{...} }
type FfApiKeyMapInput interface {
	pulumi.Input

	ToFfApiKeyMapOutput() FfApiKeyMapOutput
	ToFfApiKeyMapOutputWithContext(context.Context) FfApiKeyMapOutput
}

type FfApiKeyMap map[string]FfApiKeyInput

func (FfApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FfApiKey)(nil)).Elem()
}

func (i FfApiKeyMap) ToFfApiKeyMapOutput() FfApiKeyMapOutput {
	return i.ToFfApiKeyMapOutputWithContext(context.Background())
}

func (i FfApiKeyMap) ToFfApiKeyMapOutputWithContext(ctx context.Context) FfApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FfApiKeyMapOutput)
}

type FfApiKeyOutput struct{ *pulumi.OutputState }

func (FfApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FfApiKey)(nil)).Elem()
}

func (o FfApiKeyOutput) ToFfApiKeyOutput() FfApiKeyOutput {
	return o
}

func (o FfApiKeyOutput) ToFfApiKeyOutputWithContext(ctx context.Context) FfApiKeyOutput {
	return o
}

// The value of the SDK API Key
func (o FfApiKeyOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *FfApiKey) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// Description of the SDK API Key
func (o FfApiKeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FfApiKey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment Identifier
func (o FfApiKeyOutput) EnvId() pulumi.StringOutput {
	return o.ApplyT(func(v *FfApiKey) pulumi.StringOutput { return v.EnvId }).(pulumi.StringOutput)
}

// Expiration datetime of the SDK API Key
func (o FfApiKeyOutput) ExpiredAt() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FfApiKey) pulumi.IntPtrOutput { return v.ExpiredAt }).(pulumi.IntPtrOutput)
}

// Identifier of the SDK API Key
func (o FfApiKeyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *FfApiKey) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the SDK API Key
func (o FfApiKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FfApiKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization Identifier
func (o FfApiKeyOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *FfApiKey) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Project Identifier
func (o FfApiKeyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FfApiKey) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Type of SDK. Valid values are `Server` or `Client`.
func (o FfApiKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FfApiKey) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type FfApiKeyArrayOutput struct{ *pulumi.OutputState }

func (FfApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FfApiKey)(nil)).Elem()
}

func (o FfApiKeyArrayOutput) ToFfApiKeyArrayOutput() FfApiKeyArrayOutput {
	return o
}

func (o FfApiKeyArrayOutput) ToFfApiKeyArrayOutputWithContext(ctx context.Context) FfApiKeyArrayOutput {
	return o
}

func (o FfApiKeyArrayOutput) Index(i pulumi.IntInput) FfApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FfApiKey {
		return vs[0].([]*FfApiKey)[vs[1].(int)]
	}).(FfApiKeyOutput)
}

type FfApiKeyMapOutput struct{ *pulumi.OutputState }

func (FfApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FfApiKey)(nil)).Elem()
}

func (o FfApiKeyMapOutput) ToFfApiKeyMapOutput() FfApiKeyMapOutput {
	return o
}

func (o FfApiKeyMapOutput) ToFfApiKeyMapOutputWithContext(ctx context.Context) FfApiKeyMapOutput {
	return o
}

func (o FfApiKeyMapOutput) MapIndex(k pulumi.StringInput) FfApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FfApiKey {
		return vs[0].(map[string]*FfApiKey)[vs[1].(string)]
	}).(FfApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FfApiKeyInput)(nil)).Elem(), &FfApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*FfApiKeyArrayInput)(nil)).Elem(), FfApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FfApiKeyMapInput)(nil)).Elem(), FfApiKeyMap{})
	pulumi.RegisterOutputType(FfApiKeyOutput{})
	pulumi.RegisterOutputType(FfApiKeyArrayOutput{})
	pulumi.RegisterOutputType(FfApiKeyMapOutput{})
}
