// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a GitOps RepoCred.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupGitopsRepoCred(ctx, &platform.LookupGitopsRepoCredArgs{
//				AccountId:  "account_id",
//				AgentId:    "agent_id",
//				Identifier: "identifier",
//				OrgId:      pulumi.StringRef("org_id"),
//				ProjectId:  pulumi.StringRef("project_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupGitopsRepoCred(ctx *pulumi.Context, args *LookupGitopsRepoCredArgs, opts ...pulumi.InvokeOption) (*LookupGitopsRepoCredResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupGitopsRepoCredResult
	err := ctx.Invoke("harness:platform/getGitopsRepoCred:getGitopsRepoCred", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitopsRepoCred.
type LookupGitopsRepoCredArgs struct {
	// account identifier of the Repository Credentials.
	AccountId string `pulumi:"accountId"`
	// agent identifier of the Repository Credentials.
	AgentId string `pulumi:"agentId"`
	// credential details.
	Creds []GetGitopsRepoCredCred `pulumi:"creds"`
	// Identifier of the Repository Credentials.
	Identifier string `pulumi:"identifier"`
	// Organization identifier of the Repository Credential.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the Repository Credential.
	ProjectId *string `pulumi:"projectId"`
	// if the Repository credential should be upserted.
	Upsert *bool `pulumi:"upsert"`
}

// A collection of values returned by getGitopsRepoCred.
type LookupGitopsRepoCredResult struct {
	// account identifier of the Repository Credentials.
	AccountId string `pulumi:"accountId"`
	// agent identifier of the Repository Credentials.
	AgentId string `pulumi:"agentId"`
	// credential details.
	Creds []GetGitopsRepoCredCred `pulumi:"creds"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Identifier of the Repository Credentials.
	Identifier string `pulumi:"identifier"`
	// Organization identifier of the Repository Credential.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the Repository Credential.
	ProjectId *string `pulumi:"projectId"`
	// if the Repository credential should be upserted.
	Upsert *bool `pulumi:"upsert"`
}

func LookupGitopsRepoCredOutput(ctx *pulumi.Context, args LookupGitopsRepoCredOutputArgs, opts ...pulumi.InvokeOption) LookupGitopsRepoCredResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGitopsRepoCredResult, error) {
			args := v.(LookupGitopsRepoCredArgs)
			r, err := LookupGitopsRepoCred(ctx, &args, opts...)
			var s LookupGitopsRepoCredResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGitopsRepoCredResultOutput)
}

// A collection of arguments for invoking getGitopsRepoCred.
type LookupGitopsRepoCredOutputArgs struct {
	// account identifier of the Repository Credentials.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// agent identifier of the Repository Credentials.
	AgentId pulumi.StringInput `pulumi:"agentId"`
	// credential details.
	Creds GetGitopsRepoCredCredArrayInput `pulumi:"creds"`
	// Identifier of the Repository Credentials.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Organization identifier of the Repository Credential.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Project identifier of the Repository Credential.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// if the Repository credential should be upserted.
	Upsert pulumi.BoolPtrInput `pulumi:"upsert"`
}

func (LookupGitopsRepoCredOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitopsRepoCredArgs)(nil)).Elem()
}

// A collection of values returned by getGitopsRepoCred.
type LookupGitopsRepoCredResultOutput struct{ *pulumi.OutputState }

func (LookupGitopsRepoCredResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitopsRepoCredResult)(nil)).Elem()
}

func (o LookupGitopsRepoCredResultOutput) ToLookupGitopsRepoCredResultOutput() LookupGitopsRepoCredResultOutput {
	return o
}

func (o LookupGitopsRepoCredResultOutput) ToLookupGitopsRepoCredResultOutputWithContext(ctx context.Context) LookupGitopsRepoCredResultOutput {
	return o
}

// account identifier of the Repository Credentials.
func (o LookupGitopsRepoCredResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsRepoCredResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// agent identifier of the Repository Credentials.
func (o LookupGitopsRepoCredResultOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsRepoCredResult) string { return v.AgentId }).(pulumi.StringOutput)
}

// credential details.
func (o LookupGitopsRepoCredResultOutput) Creds() GetGitopsRepoCredCredArrayOutput {
	return o.ApplyT(func(v LookupGitopsRepoCredResult) []GetGitopsRepoCredCred { return v.Creds }).(GetGitopsRepoCredCredArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGitopsRepoCredResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsRepoCredResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifier of the Repository Credentials.
func (o LookupGitopsRepoCredResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsRepoCredResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Organization identifier of the Repository Credential.
func (o LookupGitopsRepoCredResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitopsRepoCredResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project identifier of the Repository Credential.
func (o LookupGitopsRepoCredResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitopsRepoCredResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// if the Repository credential should be upserted.
func (o LookupGitopsRepoCredResultOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupGitopsRepoCredResult) *bool { return v.Upsert }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitopsRepoCredResultOutput{})
}
