// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness Infrastructure.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewInfrastructure(ctx, "example", &platform.InfrastructureArgs{
//				DeploymentType: pulumi.String("Kubernetes"),
//				EnvId:          pulumi.String("environmentIdentifier"),
//				Identifier:     pulumi.String("identifier"),
//				OrgId:          pulumi.String("orgIdentifer"),
//				ProjectId:      pulumi.String("projectIdentifier"),
//				Type:           pulumi.String("KubernetesDirect"),
//				Yaml: pulumi.String(fmt.Sprintf(`			   infrastructureDefinition:
//	         name: name
//	         identifier: identifier
//	         description: ""
//	         tags:
//	           asda: ""
//	         orgIdentifier: orgIdentifer
//	         projectIdentifier: projectIdentifier
//	         environmentRef: environmentIdentifier
//	         deploymentType: Kubernetes
//	         type: KubernetesDirect
//	         spec:
//	          connectorRef: account.gfgf
//	          namespace: asdasdsa
//	          releaseName: release-<+INFRA_KEY>
//	          allowSimultaneousDeployments: false
//
// `)),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import using infrastructure id
//
// ```sh
//
//	$ pulumi import harness:platform/infrastructure:Infrastructure example <infrastructure_id>
//
// ```
type Infrastructure struct {
	pulumi.CustomResourceState

	// Infrastructure deployment type. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
	DeploymentType pulumi.StringPtrOutput `pulumi:"deploymentType"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// environment identifier.
	EnvId pulumi.StringOutput `pulumi:"envId"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the Organization.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Unique identifier of the Project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Type of Infrastructure. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
	Type pulumi.StringOutput `pulumi:"type"`
	// Infrastructure YAML
	Yaml pulumi.StringOutput `pulumi:"yaml"`
}

// NewInfrastructure registers a new resource with the given unique name, arguments, and options.
func NewInfrastructure(ctx *pulumi.Context,
	name string, args *InfrastructureArgs, opts ...pulumi.ResourceOption) (*Infrastructure, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvId == nil {
		return nil, errors.New("invalid value for required argument 'EnvId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Yaml == nil {
		return nil, errors.New("invalid value for required argument 'Yaml'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Infrastructure
	err := ctx.RegisterResource("harness:platform/infrastructure:Infrastructure", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfrastructure gets an existing Infrastructure resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfrastructure(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfrastructureState, opts ...pulumi.ResourceOption) (*Infrastructure, error) {
	var resource Infrastructure
	err := ctx.ReadResource("harness:platform/infrastructure:Infrastructure", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Infrastructure resources.
type infrastructureState struct {
	// Infrastructure deployment type. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
	DeploymentType *string `pulumi:"deploymentType"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// environment identifier.
	EnvId *string `pulumi:"envId"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the Organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the Project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Type of Infrastructure. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
	Type *string `pulumi:"type"`
	// Infrastructure YAML
	Yaml *string `pulumi:"yaml"`
}

type InfrastructureState struct {
	// Infrastructure deployment type. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
	DeploymentType pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// environment identifier.
	EnvId pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the Organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the Project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Type of Infrastructure. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
	Type pulumi.StringPtrInput
	// Infrastructure YAML
	Yaml pulumi.StringPtrInput
}

func (InfrastructureState) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureState)(nil)).Elem()
}

type infrastructureArgs struct {
	// Infrastructure deployment type. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
	DeploymentType *string `pulumi:"deploymentType"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// environment identifier.
	EnvId string `pulumi:"envId"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the Organization.
	OrgId string `pulumi:"orgId"`
	// Unique identifier of the Project.
	ProjectId string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Type of Infrastructure. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
	Type string `pulumi:"type"`
	// Infrastructure YAML
	Yaml string `pulumi:"yaml"`
}

// The set of arguments for constructing a Infrastructure resource.
type InfrastructureArgs struct {
	// Infrastructure deployment type. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
	DeploymentType pulumi.StringPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// environment identifier.
	EnvId pulumi.StringInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the Organization.
	OrgId pulumi.StringInput
	// Unique identifier of the Project.
	ProjectId pulumi.StringInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Type of Infrastructure. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
	Type pulumi.StringInput
	// Infrastructure YAML
	Yaml pulumi.StringInput
}

func (InfrastructureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*infrastructureArgs)(nil)).Elem()
}

type InfrastructureInput interface {
	pulumi.Input

	ToInfrastructureOutput() InfrastructureOutput
	ToInfrastructureOutputWithContext(ctx context.Context) InfrastructureOutput
}

func (*Infrastructure) ElementType() reflect.Type {
	return reflect.TypeOf((**Infrastructure)(nil)).Elem()
}

func (i *Infrastructure) ToInfrastructureOutput() InfrastructureOutput {
	return i.ToInfrastructureOutputWithContext(context.Background())
}

func (i *Infrastructure) ToInfrastructureOutputWithContext(ctx context.Context) InfrastructureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureOutput)
}

// InfrastructureArrayInput is an input type that accepts InfrastructureArray and InfrastructureArrayOutput values.
// You can construct a concrete instance of `InfrastructureArrayInput` via:
//
//	InfrastructureArray{ InfrastructureArgs{...} }
type InfrastructureArrayInput interface {
	pulumi.Input

	ToInfrastructureArrayOutput() InfrastructureArrayOutput
	ToInfrastructureArrayOutputWithContext(context.Context) InfrastructureArrayOutput
}

type InfrastructureArray []InfrastructureInput

func (InfrastructureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Infrastructure)(nil)).Elem()
}

func (i InfrastructureArray) ToInfrastructureArrayOutput() InfrastructureArrayOutput {
	return i.ToInfrastructureArrayOutputWithContext(context.Background())
}

func (i InfrastructureArray) ToInfrastructureArrayOutputWithContext(ctx context.Context) InfrastructureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureArrayOutput)
}

// InfrastructureMapInput is an input type that accepts InfrastructureMap and InfrastructureMapOutput values.
// You can construct a concrete instance of `InfrastructureMapInput` via:
//
//	InfrastructureMap{ "key": InfrastructureArgs{...} }
type InfrastructureMapInput interface {
	pulumi.Input

	ToInfrastructureMapOutput() InfrastructureMapOutput
	ToInfrastructureMapOutputWithContext(context.Context) InfrastructureMapOutput
}

type InfrastructureMap map[string]InfrastructureInput

func (InfrastructureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Infrastructure)(nil)).Elem()
}

func (i InfrastructureMap) ToInfrastructureMapOutput() InfrastructureMapOutput {
	return i.ToInfrastructureMapOutputWithContext(context.Background())
}

func (i InfrastructureMap) ToInfrastructureMapOutputWithContext(ctx context.Context) InfrastructureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfrastructureMapOutput)
}

type InfrastructureOutput struct{ *pulumi.OutputState }

func (InfrastructureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Infrastructure)(nil)).Elem()
}

func (o InfrastructureOutput) ToInfrastructureOutput() InfrastructureOutput {
	return o
}

func (o InfrastructureOutput) ToInfrastructureOutputWithContext(ctx context.Context) InfrastructureOutput {
	return o
}

// Infrastructure deployment type. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
func (o InfrastructureOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringPtrOutput { return v.DeploymentType }).(pulumi.StringPtrOutput)
}

// Description of the resource.
func (o InfrastructureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// environment identifier.
func (o InfrastructureOutput) EnvId() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.EnvId }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o InfrastructureOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o InfrastructureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the Organization.
func (o InfrastructureOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Unique identifier of the Project.
func (o InfrastructureOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o InfrastructureOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Type of Infrastructure. Valid values are KUBERNETES*DIRECT, KUBERNETES*GCP, SERVERLESS*AWS*LAMBDA, PDC, KUBERNETES*AZURE, SSH*WINRM*AZURE, SSH*WINRM*AWS, AZURE*WEB*APP, ECS, GITOPS, CUSTOM*DEPLOYMENT.
func (o InfrastructureOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Infrastructure YAML
func (o InfrastructureOutput) Yaml() pulumi.StringOutput {
	return o.ApplyT(func(v *Infrastructure) pulumi.StringOutput { return v.Yaml }).(pulumi.StringOutput)
}

type InfrastructureArrayOutput struct{ *pulumi.OutputState }

func (InfrastructureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Infrastructure)(nil)).Elem()
}

func (o InfrastructureArrayOutput) ToInfrastructureArrayOutput() InfrastructureArrayOutput {
	return o
}

func (o InfrastructureArrayOutput) ToInfrastructureArrayOutputWithContext(ctx context.Context) InfrastructureArrayOutput {
	return o
}

func (o InfrastructureArrayOutput) Index(i pulumi.IntInput) InfrastructureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Infrastructure {
		return vs[0].([]*Infrastructure)[vs[1].(int)]
	}).(InfrastructureOutput)
}

type InfrastructureMapOutput struct{ *pulumi.OutputState }

func (InfrastructureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Infrastructure)(nil)).Elem()
}

func (o InfrastructureMapOutput) ToInfrastructureMapOutput() InfrastructureMapOutput {
	return o
}

func (o InfrastructureMapOutput) ToInfrastructureMapOutputWithContext(ctx context.Context) InfrastructureMapOutput {
	return o
}

func (o InfrastructureMapOutput) MapIndex(k pulumi.StringInput) InfrastructureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Infrastructure {
		return vs[0].(map[string]*Infrastructure)[vs[1].(string)]
	}).(InfrastructureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureInput)(nil)).Elem(), &Infrastructure{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureArrayInput)(nil)).Elem(), InfrastructureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfrastructureMapInput)(nil)).Elem(), InfrastructureMap{})
	pulumi.RegisterOutputType(InfrastructureOutput{})
	pulumi.RegisterOutputType(InfrastructureArrayOutput{})
	pulumi.RegisterOutputType(InfrastructureMapOutput{})
}
