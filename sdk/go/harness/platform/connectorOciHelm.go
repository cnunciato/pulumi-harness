// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a OCI Helm connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewConnectorOciHelm(ctx, "test", &platform.ConnectorOciHelmArgs{
//				DelegateSelectors: pulumi.StringArray{
//					pulumi.String("harness-delegate"),
//				},
//				Description: pulumi.String("test"),
//				Identifier:  pulumi.String("identifier"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Url: pulumi.String("admin.azurecr.io"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level helm connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorOciHelm:ConnectorOciHelm example <connector_id>
//
// ```
//
//	Import org level helm connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorOciHelm:ConnectorOciHelm example <ord_id>/<connector_id>
//
// ```
//
//	Import project level helm connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorOciHelm:ConnectorOciHelm example <org_id>/<project_id>/<connector_id>
//
// ```
type ConnectorOciHelm struct {
	pulumi.CustomResourceState

	// Credentials to use for authentication.
	Credentials ConnectorOciHelmCredentialsPtrOutput `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the helm server.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewConnectorOciHelm registers a new resource with the given unique name, arguments, and options.
func NewConnectorOciHelm(ctx *pulumi.Context,
	name string, args *ConnectorOciHelmArgs, opts ...pulumi.ResourceOption) (*ConnectorOciHelm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectorOciHelm
	err := ctx.RegisterResource("harness:platform/connectorOciHelm:ConnectorOciHelm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorOciHelm gets an existing ConnectorOciHelm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorOciHelm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorOciHelmState, opts ...pulumi.ResourceOption) (*ConnectorOciHelm, error) {
	var resource ConnectorOciHelm
	err := ctx.ReadResource("harness:platform/connectorOciHelm:ConnectorOciHelm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorOciHelm resources.
type connectorOciHelmState struct {
	// Credentials to use for authentication.
	Credentials *ConnectorOciHelmCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the helm server.
	Url *string `pulumi:"url"`
}

type ConnectorOciHelmState struct {
	// Credentials to use for authentication.
	Credentials ConnectorOciHelmCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the helm server.
	Url pulumi.StringPtrInput
}

func (ConnectorOciHelmState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorOciHelmState)(nil)).Elem()
}

type connectorOciHelmArgs struct {
	// Credentials to use for authentication.
	Credentials *ConnectorOciHelmCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// URL of the helm server.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a ConnectorOciHelm resource.
type ConnectorOciHelmArgs struct {
	// Credentials to use for authentication.
	Credentials ConnectorOciHelmCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
	// URL of the helm server.
	Url pulumi.StringInput
}

func (ConnectorOciHelmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorOciHelmArgs)(nil)).Elem()
}

type ConnectorOciHelmInput interface {
	pulumi.Input

	ToConnectorOciHelmOutput() ConnectorOciHelmOutput
	ToConnectorOciHelmOutputWithContext(ctx context.Context) ConnectorOciHelmOutput
}

func (*ConnectorOciHelm) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorOciHelm)(nil)).Elem()
}

func (i *ConnectorOciHelm) ToConnectorOciHelmOutput() ConnectorOciHelmOutput {
	return i.ToConnectorOciHelmOutputWithContext(context.Background())
}

func (i *ConnectorOciHelm) ToConnectorOciHelmOutputWithContext(ctx context.Context) ConnectorOciHelmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOciHelmOutput)
}

// ConnectorOciHelmArrayInput is an input type that accepts ConnectorOciHelmArray and ConnectorOciHelmArrayOutput values.
// You can construct a concrete instance of `ConnectorOciHelmArrayInput` via:
//
//	ConnectorOciHelmArray{ ConnectorOciHelmArgs{...} }
type ConnectorOciHelmArrayInput interface {
	pulumi.Input

	ToConnectorOciHelmArrayOutput() ConnectorOciHelmArrayOutput
	ToConnectorOciHelmArrayOutputWithContext(context.Context) ConnectorOciHelmArrayOutput
}

type ConnectorOciHelmArray []ConnectorOciHelmInput

func (ConnectorOciHelmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorOciHelm)(nil)).Elem()
}

func (i ConnectorOciHelmArray) ToConnectorOciHelmArrayOutput() ConnectorOciHelmArrayOutput {
	return i.ToConnectorOciHelmArrayOutputWithContext(context.Background())
}

func (i ConnectorOciHelmArray) ToConnectorOciHelmArrayOutputWithContext(ctx context.Context) ConnectorOciHelmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOciHelmArrayOutput)
}

// ConnectorOciHelmMapInput is an input type that accepts ConnectorOciHelmMap and ConnectorOciHelmMapOutput values.
// You can construct a concrete instance of `ConnectorOciHelmMapInput` via:
//
//	ConnectorOciHelmMap{ "key": ConnectorOciHelmArgs{...} }
type ConnectorOciHelmMapInput interface {
	pulumi.Input

	ToConnectorOciHelmMapOutput() ConnectorOciHelmMapOutput
	ToConnectorOciHelmMapOutputWithContext(context.Context) ConnectorOciHelmMapOutput
}

type ConnectorOciHelmMap map[string]ConnectorOciHelmInput

func (ConnectorOciHelmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorOciHelm)(nil)).Elem()
}

func (i ConnectorOciHelmMap) ToConnectorOciHelmMapOutput() ConnectorOciHelmMapOutput {
	return i.ToConnectorOciHelmMapOutputWithContext(context.Background())
}

func (i ConnectorOciHelmMap) ToConnectorOciHelmMapOutputWithContext(ctx context.Context) ConnectorOciHelmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOciHelmMapOutput)
}

type ConnectorOciHelmOutput struct{ *pulumi.OutputState }

func (ConnectorOciHelmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorOciHelm)(nil)).Elem()
}

func (o ConnectorOciHelmOutput) ToConnectorOciHelmOutput() ConnectorOciHelmOutput {
	return o
}

func (o ConnectorOciHelmOutput) ToConnectorOciHelmOutputWithContext(ctx context.Context) ConnectorOciHelmOutput {
	return o
}

// Credentials to use for authentication.
func (o ConnectorOciHelmOutput) Credentials() ConnectorOciHelmCredentialsPtrOutput {
	return o.ApplyT(func(v *ConnectorOciHelm) ConnectorOciHelmCredentialsPtrOutput { return v.Credentials }).(ConnectorOciHelmCredentialsPtrOutput)
}

// Tags to filter delegates for connection.
func (o ConnectorOciHelmOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorOciHelm) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorOciHelmOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorOciHelm) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ConnectorOciHelmOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorOciHelm) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorOciHelmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorOciHelm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorOciHelmOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorOciHelm) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorOciHelmOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorOciHelm) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorOciHelmOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorOciHelm) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the helm server.
func (o ConnectorOciHelmOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorOciHelm) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ConnectorOciHelmArrayOutput struct{ *pulumi.OutputState }

func (ConnectorOciHelmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorOciHelm)(nil)).Elem()
}

func (o ConnectorOciHelmArrayOutput) ToConnectorOciHelmArrayOutput() ConnectorOciHelmArrayOutput {
	return o
}

func (o ConnectorOciHelmArrayOutput) ToConnectorOciHelmArrayOutputWithContext(ctx context.Context) ConnectorOciHelmArrayOutput {
	return o
}

func (o ConnectorOciHelmArrayOutput) Index(i pulumi.IntInput) ConnectorOciHelmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorOciHelm {
		return vs[0].([]*ConnectorOciHelm)[vs[1].(int)]
	}).(ConnectorOciHelmOutput)
}

type ConnectorOciHelmMapOutput struct{ *pulumi.OutputState }

func (ConnectorOciHelmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorOciHelm)(nil)).Elem()
}

func (o ConnectorOciHelmMapOutput) ToConnectorOciHelmMapOutput() ConnectorOciHelmMapOutput {
	return o
}

func (o ConnectorOciHelmMapOutput) ToConnectorOciHelmMapOutputWithContext(ctx context.Context) ConnectorOciHelmMapOutput {
	return o
}

func (o ConnectorOciHelmMapOutput) MapIndex(k pulumi.StringInput) ConnectorOciHelmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorOciHelm {
		return vs[0].(map[string]*ConnectorOciHelm)[vs[1].(string)]
	}).(ConnectorOciHelmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorOciHelmInput)(nil)).Elem(), &ConnectorOciHelm{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorOciHelmArrayInput)(nil)).Elem(), ConnectorOciHelmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorOciHelmMapInput)(nil)).Elem(), ConnectorOciHelmMap{})
	pulumi.RegisterOutputType(ConnectorOciHelmOutput{})
	pulumi.RegisterOutputType(ConnectorOciHelmArrayOutput{})
	pulumi.RegisterOutputType(ConnectorOciHelmMapOutput{})
}
