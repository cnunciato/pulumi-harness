// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a GitOps RepoCert.
func LookupGitopsRepoCert(ctx *pulumi.Context, args *LookupGitopsRepoCertArgs, opts ...pulumi.InvokeOption) (*LookupGitopsRepoCertResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupGitopsRepoCertResult
	err := ctx.Invoke("harness:platform/getGitopsRepoCert:getGitopsRepoCert", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitopsRepoCert.
type LookupGitopsRepoCertArgs struct {
	// account identifier of the Repository Certificates.
	AccountId string `pulumi:"accountId"`
	// agent identifier of the Repository Certificates.
	AgentId *string `pulumi:"agentId"`
	// organization identifier of the Repository Certificates.
	OrgId *string `pulumi:"orgId"`
	// project identifier of the Repository Certificates.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getGitopsRepoCert.
type LookupGitopsRepoCertResult struct {
	// account identifier of the Repository Certificates.
	AccountId string `pulumi:"accountId"`
	// agent identifier of the Repository Certificates.
	AgentId *string `pulumi:"agentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// organization identifier of the Repository Certificates.
	OrgId *string `pulumi:"orgId"`
	// project identifier of the Repository Certificates.
	ProjectId *string `pulumi:"projectId"`
}

func LookupGitopsRepoCertOutput(ctx *pulumi.Context, args LookupGitopsRepoCertOutputArgs, opts ...pulumi.InvokeOption) LookupGitopsRepoCertResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGitopsRepoCertResult, error) {
			args := v.(LookupGitopsRepoCertArgs)
			r, err := LookupGitopsRepoCert(ctx, &args, opts...)
			var s LookupGitopsRepoCertResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGitopsRepoCertResultOutput)
}

// A collection of arguments for invoking getGitopsRepoCert.
type LookupGitopsRepoCertOutputArgs struct {
	// account identifier of the Repository Certificates.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// agent identifier of the Repository Certificates.
	AgentId pulumi.StringPtrInput `pulumi:"agentId"`
	// organization identifier of the Repository Certificates.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// project identifier of the Repository Certificates.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupGitopsRepoCertOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitopsRepoCertArgs)(nil)).Elem()
}

// A collection of values returned by getGitopsRepoCert.
type LookupGitopsRepoCertResultOutput struct{ *pulumi.OutputState }

func (LookupGitopsRepoCertResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitopsRepoCertResult)(nil)).Elem()
}

func (o LookupGitopsRepoCertResultOutput) ToLookupGitopsRepoCertResultOutput() LookupGitopsRepoCertResultOutput {
	return o
}

func (o LookupGitopsRepoCertResultOutput) ToLookupGitopsRepoCertResultOutputWithContext(ctx context.Context) LookupGitopsRepoCertResultOutput {
	return o
}

// account identifier of the Repository Certificates.
func (o LookupGitopsRepoCertResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsRepoCertResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// agent identifier of the Repository Certificates.
func (o LookupGitopsRepoCertResultOutput) AgentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitopsRepoCertResult) *string { return v.AgentId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGitopsRepoCertResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsRepoCertResult) string { return v.Id }).(pulumi.StringOutput)
}

// organization identifier of the Repository Certificates.
func (o LookupGitopsRepoCertResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitopsRepoCertResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// project identifier of the Repository Certificates.
func (o LookupGitopsRepoCertResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitopsRepoCertResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitopsRepoCertResultOutput{})
}
