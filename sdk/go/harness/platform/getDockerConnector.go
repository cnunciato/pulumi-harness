// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Datadog connector.
func LookupDockerConnector(ctx *pulumi.Context, args *LookupDockerConnectorArgs, opts ...pulumi.InvokeOption) (*LookupDockerConnectorResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupDockerConnectorResult
	err := ctx.Invoke("harness:platform/getDockerConnector:getDockerConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDockerConnector.
type LookupDockerConnectorArgs struct {
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the Organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the Project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getDockerConnector.
type LookupDockerConnectorResult struct {
	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials []GetDockerConnectorCredential `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the Organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the Project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type string `pulumi:"type"`
	// The url of the docker registry.
	Url string `pulumi:"url"`
}

func LookupDockerConnectorOutput(ctx *pulumi.Context, args LookupDockerConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupDockerConnectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDockerConnectorResult, error) {
			args := v.(LookupDockerConnectorArgs)
			r, err := LookupDockerConnector(ctx, &args, opts...)
			var s LookupDockerConnectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDockerConnectorResultOutput)
}

// A collection of arguments for invoking getDockerConnector.
type LookupDockerConnectorOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the Organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the Project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupDockerConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDockerConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getDockerConnector.
type LookupDockerConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupDockerConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDockerConnectorResult)(nil)).Elem()
}

func (o LookupDockerConnectorResultOutput) ToLookupDockerConnectorResultOutput() LookupDockerConnectorResultOutput {
	return o
}

func (o LookupDockerConnectorResultOutput) ToLookupDockerConnectorResultOutputWithContext(ctx context.Context) LookupDockerConnectorResultOutput {
	return o
}

// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
func (o LookupDockerConnectorResultOutput) Credentials() GetDockerConnectorCredentialArrayOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) []GetDockerConnectorCredential { return v.Credentials }).(GetDockerConnectorCredentialArrayOutput)
}

// Connect using only the delegates which have these tags.
func (o LookupDockerConnectorResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupDockerConnectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDockerConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupDockerConnectorResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o LookupDockerConnectorResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Organization.
func (o LookupDockerConnectorResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Project.
func (o LookupDockerConnectorResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o LookupDockerConnectorResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
func (o LookupDockerConnectorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) string { return v.Type }).(pulumi.StringOutput)
}

// The url of the docker registry.
func (o LookupDockerConnectorResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDockerConnectorResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDockerConnectorResultOutput{})
}
