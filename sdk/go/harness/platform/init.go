// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/lbrlabs/pulumi-harness/sdk/go/harness"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "harness:platform/apiKey:ApiKey":
		r = &ApiKey{}
	case "harness:platform/appDynamicsConnector:AppDynamicsConnector":
		r = &AppDynamicsConnector{}
	case "harness:platform/artifactoryConnector:ArtifactoryConnector":
		r = &ArtifactoryConnector{}
	case "harness:platform/awsCCConnector:AwsCCConnector":
		r = &AwsCCConnector{}
	case "harness:platform/awsConnector:AwsConnector":
		r = &AwsConnector{}
	case "harness:platform/awsKmsConnector:AwsKmsConnector":
		r = &AwsKmsConnector{}
	case "harness:platform/awsSecretManagerConnector:AwsSecretManagerConnector":
		r = &AwsSecretManagerConnector{}
	case "harness:platform/bitbucketConnector:BitbucketConnector":
		r = &BitbucketConnector{}
	case "harness:platform/ccmFilters:CcmFilters":
		r = &CcmFilters{}
	case "harness:platform/connectorAzureCloudCost:ConnectorAzureCloudCost":
		r = &ConnectorAzureCloudCost{}
	case "harness:platform/connectorAzureCloudProvider:ConnectorAzureCloudProvider":
		r = &ConnectorAzureCloudProvider{}
	case "harness:platform/connectorAzureKeyVault:ConnectorAzureKeyVault":
		r = &ConnectorAzureKeyVault{}
	case "harness:platform/connectorGcpCloudCost:ConnectorGcpCloudCost":
		r = &ConnectorGcpCloudCost{}
	case "harness:platform/connectorGcpSecretManager:ConnectorGcpSecretManager":
		r = &ConnectorGcpSecretManager{}
	case "harness:platform/connectorJenkins:ConnectorJenkins":
		r = &ConnectorJenkins{}
	case "harness:platform/connectorKubernetesCloudCost:ConnectorKubernetesCloudCost":
		r = &ConnectorKubernetesCloudCost{}
	case "harness:platform/connectorOciHelm:ConnectorOciHelm":
		r = &ConnectorOciHelm{}
	case "harness:platform/connectorServiceNow:ConnectorServiceNow":
		r = &ConnectorServiceNow{}
	case "harness:platform/connectorSpot:ConnectorSpot":
		r = &ConnectorSpot{}
	case "harness:platform/connectorTas:ConnectorTas":
		r = &ConnectorTas{}
	case "harness:platform/connectorTerraformCloud:ConnectorTerraformCloud":
		r = &ConnectorTerraformCloud{}
	case "harness:platform/datadogConnector:DatadogConnector":
		r = &DatadogConnector{}
	case "harness:platform/dockerConnector:DockerConnector":
		r = &DockerConnector{}
	case "harness:platform/dynatraceConnector:DynatraceConnector":
		r = &DynatraceConnector{}
	case "harness:platform/environment:Environment":
		r = &Environment{}
	case "harness:platform/environmentClustersMapping:EnvironmentClustersMapping":
		r = &EnvironmentClustersMapping{}
	case "harness:platform/environmentGroup:EnvironmentGroup":
		r = &EnvironmentGroup{}
	case "harness:platform/environmentServiceOverrides:EnvironmentServiceOverrides":
		r = &EnvironmentServiceOverrides{}
	case "harness:platform/featureFlag:FeatureFlag":
		r = &FeatureFlag{}
	case "harness:platform/ffApiKey:FfApiKey":
		r = &FfApiKey{}
	case "harness:platform/filters:Filters":
		r = &Filters{}
	case "harness:platform/gcpConnector:GcpConnector":
		r = &GcpConnector{}
	case "harness:platform/gitConnector:GitConnector":
		r = &GitConnector{}
	case "harness:platform/gitOpsAgent:GitOpsAgent":
		r = &GitOpsAgent{}
	case "harness:platform/gitOpsCluster:GitOpsCluster":
		r = &GitOpsCluster{}
	case "harness:platform/gitOpsRepository:GitOpsRepository":
		r = &GitOpsRepository{}
	case "harness:platform/githubConnector:GithubConnector":
		r = &GithubConnector{}
	case "harness:platform/gitlabConnector:GitlabConnector":
		r = &GitlabConnector{}
	case "harness:platform/gitopsApplications:GitopsApplications":
		r = &GitopsApplications{}
	case "harness:platform/gitopsGnupg:GitopsGnupg":
		r = &GitopsGnupg{}
	case "harness:platform/gitopsRepoCert:GitopsRepoCert":
		r = &GitopsRepoCert{}
	case "harness:platform/gitopsRepoCred:GitopsRepoCred":
		r = &GitopsRepoCred{}
	case "harness:platform/helmConnector:HelmConnector":
		r = &HelmConnector{}
	case "harness:platform/infrastructure:Infrastructure":
		r = &Infrastructure{}
	case "harness:platform/inputSet:InputSet":
		r = &InputSet{}
	case "harness:platform/jiraConnector:JiraConnector":
		r = &JiraConnector{}
	case "harness:platform/kubernetesConnector:KubernetesConnector":
		r = &KubernetesConnector{}
	case "harness:platform/manualFreeze:ManualFreeze":
		r = &ManualFreeze{}
	case "harness:platform/monitoredService:MonitoredService":
		r = &MonitoredService{}
	case "harness:platform/newrelicConnector:NewrelicConnector":
		r = &NewrelicConnector{}
	case "harness:platform/nexusConnector:NexusConnector":
		r = &NexusConnector{}
	case "harness:platform/organization:Organization":
		r = &Organization{}
	case "harness:platform/pagerdutyConnector:PagerdutyConnector":
		r = &PagerdutyConnector{}
	case "harness:platform/pipeline:Pipeline":
		r = &Pipeline{}
	case "harness:platform/pipelineFilters:PipelineFilters":
		r = &PipelineFilters{}
	case "harness:platform/policy:Policy":
		r = &Policy{}
	case "harness:platform/policyset:Policyset":
		r = &Policyset{}
	case "harness:platform/project:Project":
		r = &Project{}
	case "harness:platform/prometheusConnector:PrometheusConnector":
		r = &PrometheusConnector{}
	case "harness:platform/resourceGroup:ResourceGroup":
		r = &ResourceGroup{}
	case "harness:platform/roleAssignments:RoleAssignments":
		r = &RoleAssignments{}
	case "harness:platform/roles:Roles":
		r = &Roles{}
	case "harness:platform/secretFile:SecretFile":
		r = &SecretFile{}
	case "harness:platform/secretSshkey:SecretSshkey":
		r = &SecretSshkey{}
	case "harness:platform/secretText:SecretText":
		r = &SecretText{}
	case "harness:platform/service:Service":
		r = &Service{}
	case "harness:platform/serviceAccount:ServiceAccount":
		r = &ServiceAccount{}
	case "harness:platform/slo:Slo":
		r = &Slo{}
	case "harness:platform/splunkConnector:SplunkConnector":
		r = &SplunkConnector{}
	case "harness:platform/sumologicConnector:SumologicConnector":
		r = &SumologicConnector{}
	case "harness:platform/template:Template":
		r = &Template{}
	case "harness:platform/templateFilters:TemplateFilters":
		r = &TemplateFilters{}
	case "harness:platform/triggers:Triggers":
		r = &Triggers{}
	case "harness:platform/user:User":
		r = &User{}
	case "harness:platform/usergroup:Usergroup":
		r = &Usergroup{}
	case "harness:platform/variables:Variables":
		r = &Variables{}
	case "harness:platform/vaultConnector:VaultConnector":
		r = &VaultConnector{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := harness.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"harness",
		"platform/apiKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/appDynamicsConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/artifactoryConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/awsCCConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/awsConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/awsKmsConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/awsSecretManagerConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/bitbucketConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/ccmFilters",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorAzureCloudCost",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorAzureCloudProvider",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorAzureKeyVault",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorGcpCloudCost",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorGcpSecretManager",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorJenkins",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorKubernetesCloudCost",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorOciHelm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorServiceNow",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorSpot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorTas",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/connectorTerraformCloud",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/datadogConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/dockerConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/dynatraceConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/environment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/environmentClustersMapping",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/environmentGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/environmentServiceOverrides",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/featureFlag",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/ffApiKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/filters",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/gcpConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/gitConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/gitOpsAgent",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/gitOpsCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/gitOpsRepository",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/githubConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/gitlabConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/gitopsApplications",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/gitopsGnupg",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/gitopsRepoCert",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/gitopsRepoCred",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/helmConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/infrastructure",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/inputSet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/jiraConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/kubernetesConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/manualFreeze",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/monitoredService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/newrelicConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/nexusConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/organization",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/pagerdutyConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/pipeline",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/pipelineFilters",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/policy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/policyset",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/prometheusConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/resourceGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/roleAssignments",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/roles",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/secretFile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/secretSshkey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/secretText",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/service",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/serviceAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/slo",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/splunkConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/sumologicConnector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/template",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/templateFilters",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/triggers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/usergroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/variables",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"harness",
		"platform/vaultConnector",
		&module{version},
	)
}
