// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Spot connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewConnectorSpot(ctx, "spot", &platform.ConnectorSpotArgs{
//				Description: pulumi.String("description of spot connector"),
//				Identifier:  pulumi.String("example_spot_cloud_provider"),
//				PermanentToken: &platform.ConnectorSpotPermanentTokenArgs{
//					ApiTokenRef: pulumi.String("account.TEST_spot_api_token"),
//					DelegateSelectors: pulumi.StringArray{
//						pulumi.String("harness-delegate"),
//					},
//					ExecuteOnDelegate: pulumi.Bool(false),
//					SpotAccountId:     pulumi.String("<my-account-id>"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import using spot cloud provider connector id
//
// ```sh
//
//	$ pulumi import harness:platform/connectorSpot:ConnectorSpot example <connector_id>
//
// ```
type ConnectorSpot struct {
	pulumi.CustomResourceState

	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Authenticate to Spot using account id and permanent token.
	PermanentToken ConnectorSpotPermanentTokenOutput `pulumi:"permanentToken"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewConnectorSpot registers a new resource with the given unique name, arguments, and options.
func NewConnectorSpot(ctx *pulumi.Context,
	name string, args *ConnectorSpotArgs, opts ...pulumi.ResourceOption) (*ConnectorSpot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.PermanentToken == nil {
		return nil, errors.New("invalid value for required argument 'PermanentToken'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectorSpot
	err := ctx.RegisterResource("harness:platform/connectorSpot:ConnectorSpot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorSpot gets an existing ConnectorSpot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorSpot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorSpotState, opts ...pulumi.ResourceOption) (*ConnectorSpot, error) {
	var resource ConnectorSpot
	err := ctx.ReadResource("harness:platform/connectorSpot:ConnectorSpot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorSpot resources.
type connectorSpotState struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Authenticate to Spot using account id and permanent token.
	PermanentToken *ConnectorSpotPermanentToken `pulumi:"permanentToken"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type ConnectorSpotState struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Authenticate to Spot using account id and permanent token.
	PermanentToken ConnectorSpotPermanentTokenPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorSpotState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorSpotState)(nil)).Elem()
}

type connectorSpotArgs struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Authenticate to Spot using account id and permanent token.
	PermanentToken ConnectorSpotPermanentToken `pulumi:"permanentToken"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ConnectorSpot resource.
type ConnectorSpotArgs struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Authenticate to Spot using account id and permanent token.
	PermanentToken ConnectorSpotPermanentTokenInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorSpotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorSpotArgs)(nil)).Elem()
}

type ConnectorSpotInput interface {
	pulumi.Input

	ToConnectorSpotOutput() ConnectorSpotOutput
	ToConnectorSpotOutputWithContext(ctx context.Context) ConnectorSpotOutput
}

func (*ConnectorSpot) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorSpot)(nil)).Elem()
}

func (i *ConnectorSpot) ToConnectorSpotOutput() ConnectorSpotOutput {
	return i.ToConnectorSpotOutputWithContext(context.Background())
}

func (i *ConnectorSpot) ToConnectorSpotOutputWithContext(ctx context.Context) ConnectorSpotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorSpotOutput)
}

// ConnectorSpotArrayInput is an input type that accepts ConnectorSpotArray and ConnectorSpotArrayOutput values.
// You can construct a concrete instance of `ConnectorSpotArrayInput` via:
//
//	ConnectorSpotArray{ ConnectorSpotArgs{...} }
type ConnectorSpotArrayInput interface {
	pulumi.Input

	ToConnectorSpotArrayOutput() ConnectorSpotArrayOutput
	ToConnectorSpotArrayOutputWithContext(context.Context) ConnectorSpotArrayOutput
}

type ConnectorSpotArray []ConnectorSpotInput

func (ConnectorSpotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorSpot)(nil)).Elem()
}

func (i ConnectorSpotArray) ToConnectorSpotArrayOutput() ConnectorSpotArrayOutput {
	return i.ToConnectorSpotArrayOutputWithContext(context.Background())
}

func (i ConnectorSpotArray) ToConnectorSpotArrayOutputWithContext(ctx context.Context) ConnectorSpotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorSpotArrayOutput)
}

// ConnectorSpotMapInput is an input type that accepts ConnectorSpotMap and ConnectorSpotMapOutput values.
// You can construct a concrete instance of `ConnectorSpotMapInput` via:
//
//	ConnectorSpotMap{ "key": ConnectorSpotArgs{...} }
type ConnectorSpotMapInput interface {
	pulumi.Input

	ToConnectorSpotMapOutput() ConnectorSpotMapOutput
	ToConnectorSpotMapOutputWithContext(context.Context) ConnectorSpotMapOutput
}

type ConnectorSpotMap map[string]ConnectorSpotInput

func (ConnectorSpotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorSpot)(nil)).Elem()
}

func (i ConnectorSpotMap) ToConnectorSpotMapOutput() ConnectorSpotMapOutput {
	return i.ToConnectorSpotMapOutputWithContext(context.Background())
}

func (i ConnectorSpotMap) ToConnectorSpotMapOutputWithContext(ctx context.Context) ConnectorSpotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorSpotMapOutput)
}

type ConnectorSpotOutput struct{ *pulumi.OutputState }

func (ConnectorSpotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorSpot)(nil)).Elem()
}

func (o ConnectorSpotOutput) ToConnectorSpotOutput() ConnectorSpotOutput {
	return o
}

func (o ConnectorSpotOutput) ToConnectorSpotOutputWithContext(ctx context.Context) ConnectorSpotOutput {
	return o
}

// Description of the resource.
func (o ConnectorSpotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorSpot) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ConnectorSpotOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorSpot) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorSpotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorSpot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorSpotOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorSpot) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Authenticate to Spot using account id and permanent token.
func (o ConnectorSpotOutput) PermanentToken() ConnectorSpotPermanentTokenOutput {
	return o.ApplyT(func(v *ConnectorSpot) ConnectorSpotPermanentTokenOutput { return v.PermanentToken }).(ConnectorSpotPermanentTokenOutput)
}

// Unique identifier of the project.
func (o ConnectorSpotOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorSpot) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorSpotOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorSpot) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ConnectorSpotArrayOutput struct{ *pulumi.OutputState }

func (ConnectorSpotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorSpot)(nil)).Elem()
}

func (o ConnectorSpotArrayOutput) ToConnectorSpotArrayOutput() ConnectorSpotArrayOutput {
	return o
}

func (o ConnectorSpotArrayOutput) ToConnectorSpotArrayOutputWithContext(ctx context.Context) ConnectorSpotArrayOutput {
	return o
}

func (o ConnectorSpotArrayOutput) Index(i pulumi.IntInput) ConnectorSpotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorSpot {
		return vs[0].([]*ConnectorSpot)[vs[1].(int)]
	}).(ConnectorSpotOutput)
}

type ConnectorSpotMapOutput struct{ *pulumi.OutputState }

func (ConnectorSpotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorSpot)(nil)).Elem()
}

func (o ConnectorSpotMapOutput) ToConnectorSpotMapOutput() ConnectorSpotMapOutput {
	return o
}

func (o ConnectorSpotMapOutput) ToConnectorSpotMapOutputWithContext(ctx context.Context) ConnectorSpotMapOutput {
	return o
}

func (o ConnectorSpotMapOutput) MapIndex(k pulumi.StringInput) ConnectorSpotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorSpot {
		return vs[0].(map[string]*ConnectorSpot)[vs[1].(string)]
	}).(ConnectorSpotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorSpotInput)(nil)).Elem(), &ConnectorSpot{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorSpotArrayInput)(nil)).Elem(), ConnectorSpotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorSpotMapInput)(nil)).Elem(), ConnectorSpotMap{})
	pulumi.RegisterOutputType(ConnectorSpotOutput{})
	pulumi.RegisterOutputType(ConnectorSpotArrayOutput{})
	pulumi.RegisterOutputType(ConnectorSpotMapOutput{})
}
