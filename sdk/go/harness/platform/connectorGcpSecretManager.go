// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a GCP Secret Manager connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewConnectorGcpSecretManager(ctx, "gcpSm", &platform.ConnectorGcpSecretManagerArgs{
//				CredentialsRef: pulumi.String(fmt.Sprintf("account.%v", harness_platform_secret_text.Test.Id)),
//				DelegateSelectors: pulumi.StringArray{
//					pulumi.String("harness-delegate"),
//				},
//				Description: pulumi.String("test"),
//				Identifier:  pulumi.String("identifier"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level gcp secret manager connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorGcpSecretManager:ConnectorGcpSecretManager example <connector_id>
//
// ```
//
//	Import org level gcp secret manager connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorGcpSecretManager:ConnectorGcpSecretManager example <ord_id>/<connector_id>
//
// ```
//
//	Import project level gcp secret manager connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorGcpSecretManager:ConnectorGcpSecretManager example <org_id>/<project_id>/<connector_id>
//
// ```
type ConnectorGcpSecretManager struct {
	pulumi.CustomResourceState

	// Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	CredentialsRef pulumi.StringOutput `pulumi:"credentialsRef"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Indicative if this is default Secret manager for secrets.
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewConnectorGcpSecretManager registers a new resource with the given unique name, arguments, and options.
func NewConnectorGcpSecretManager(ctx *pulumi.Context,
	name string, args *ConnectorGcpSecretManagerArgs, opts ...pulumi.ResourceOption) (*ConnectorGcpSecretManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CredentialsRef == nil {
		return nil, errors.New("invalid value for required argument 'CredentialsRef'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectorGcpSecretManager
	err := ctx.RegisterResource("harness:platform/connectorGcpSecretManager:ConnectorGcpSecretManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorGcpSecretManager gets an existing ConnectorGcpSecretManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorGcpSecretManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorGcpSecretManagerState, opts ...pulumi.ResourceOption) (*ConnectorGcpSecretManager, error) {
	var resource ConnectorGcpSecretManager
	err := ctx.ReadResource("harness:platform/connectorGcpSecretManager:ConnectorGcpSecretManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorGcpSecretManager resources.
type connectorGcpSecretManagerState struct {
	// Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	CredentialsRef *string `pulumi:"credentialsRef"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Indicative if this is default Secret manager for secrets.
	IsDefault *bool `pulumi:"isDefault"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type ConnectorGcpSecretManagerState struct {
	// Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	CredentialsRef pulumi.StringPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Indicative if this is default Secret manager for secrets.
	IsDefault pulumi.BoolPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorGcpSecretManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorGcpSecretManagerState)(nil)).Elem()
}

type connectorGcpSecretManagerArgs struct {
	// Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	CredentialsRef string `pulumi:"credentialsRef"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Indicative if this is default Secret manager for secrets.
	IsDefault *bool `pulumi:"isDefault"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ConnectorGcpSecretManager resource.
type ConnectorGcpSecretManagerArgs struct {
	// Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	CredentialsRef pulumi.StringInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Indicative if this is default Secret manager for secrets.
	IsDefault pulumi.BoolPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorGcpSecretManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorGcpSecretManagerArgs)(nil)).Elem()
}

type ConnectorGcpSecretManagerInput interface {
	pulumi.Input

	ToConnectorGcpSecretManagerOutput() ConnectorGcpSecretManagerOutput
	ToConnectorGcpSecretManagerOutputWithContext(ctx context.Context) ConnectorGcpSecretManagerOutput
}

func (*ConnectorGcpSecretManager) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorGcpSecretManager)(nil)).Elem()
}

func (i *ConnectorGcpSecretManager) ToConnectorGcpSecretManagerOutput() ConnectorGcpSecretManagerOutput {
	return i.ToConnectorGcpSecretManagerOutputWithContext(context.Background())
}

func (i *ConnectorGcpSecretManager) ToConnectorGcpSecretManagerOutputWithContext(ctx context.Context) ConnectorGcpSecretManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorGcpSecretManagerOutput)
}

// ConnectorGcpSecretManagerArrayInput is an input type that accepts ConnectorGcpSecretManagerArray and ConnectorGcpSecretManagerArrayOutput values.
// You can construct a concrete instance of `ConnectorGcpSecretManagerArrayInput` via:
//
//	ConnectorGcpSecretManagerArray{ ConnectorGcpSecretManagerArgs{...} }
type ConnectorGcpSecretManagerArrayInput interface {
	pulumi.Input

	ToConnectorGcpSecretManagerArrayOutput() ConnectorGcpSecretManagerArrayOutput
	ToConnectorGcpSecretManagerArrayOutputWithContext(context.Context) ConnectorGcpSecretManagerArrayOutput
}

type ConnectorGcpSecretManagerArray []ConnectorGcpSecretManagerInput

func (ConnectorGcpSecretManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorGcpSecretManager)(nil)).Elem()
}

func (i ConnectorGcpSecretManagerArray) ToConnectorGcpSecretManagerArrayOutput() ConnectorGcpSecretManagerArrayOutput {
	return i.ToConnectorGcpSecretManagerArrayOutputWithContext(context.Background())
}

func (i ConnectorGcpSecretManagerArray) ToConnectorGcpSecretManagerArrayOutputWithContext(ctx context.Context) ConnectorGcpSecretManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorGcpSecretManagerArrayOutput)
}

// ConnectorGcpSecretManagerMapInput is an input type that accepts ConnectorGcpSecretManagerMap and ConnectorGcpSecretManagerMapOutput values.
// You can construct a concrete instance of `ConnectorGcpSecretManagerMapInput` via:
//
//	ConnectorGcpSecretManagerMap{ "key": ConnectorGcpSecretManagerArgs{...} }
type ConnectorGcpSecretManagerMapInput interface {
	pulumi.Input

	ToConnectorGcpSecretManagerMapOutput() ConnectorGcpSecretManagerMapOutput
	ToConnectorGcpSecretManagerMapOutputWithContext(context.Context) ConnectorGcpSecretManagerMapOutput
}

type ConnectorGcpSecretManagerMap map[string]ConnectorGcpSecretManagerInput

func (ConnectorGcpSecretManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorGcpSecretManager)(nil)).Elem()
}

func (i ConnectorGcpSecretManagerMap) ToConnectorGcpSecretManagerMapOutput() ConnectorGcpSecretManagerMapOutput {
	return i.ToConnectorGcpSecretManagerMapOutputWithContext(context.Background())
}

func (i ConnectorGcpSecretManagerMap) ToConnectorGcpSecretManagerMapOutputWithContext(ctx context.Context) ConnectorGcpSecretManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorGcpSecretManagerMapOutput)
}

type ConnectorGcpSecretManagerOutput struct{ *pulumi.OutputState }

func (ConnectorGcpSecretManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorGcpSecretManager)(nil)).Elem()
}

func (o ConnectorGcpSecretManagerOutput) ToConnectorGcpSecretManagerOutput() ConnectorGcpSecretManagerOutput {
	return o
}

func (o ConnectorGcpSecretManagerOutput) ToConnectorGcpSecretManagerOutputWithContext(ctx context.Context) ConnectorGcpSecretManagerOutput {
	return o
}

// Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
func (o ConnectorGcpSecretManagerOutput) CredentialsRef() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorGcpSecretManager) pulumi.StringOutput { return v.CredentialsRef }).(pulumi.StringOutput)
}

// Tags to filter delegates for connection.
func (o ConnectorGcpSecretManagerOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorGcpSecretManager) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorGcpSecretManagerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorGcpSecretManager) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ConnectorGcpSecretManagerOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorGcpSecretManager) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Indicative if this is default Secret manager for secrets.
func (o ConnectorGcpSecretManagerOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorGcpSecretManager) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// Name of the resource.
func (o ConnectorGcpSecretManagerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorGcpSecretManager) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorGcpSecretManagerOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorGcpSecretManager) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorGcpSecretManagerOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorGcpSecretManager) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorGcpSecretManagerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorGcpSecretManager) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ConnectorGcpSecretManagerArrayOutput struct{ *pulumi.OutputState }

func (ConnectorGcpSecretManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorGcpSecretManager)(nil)).Elem()
}

func (o ConnectorGcpSecretManagerArrayOutput) ToConnectorGcpSecretManagerArrayOutput() ConnectorGcpSecretManagerArrayOutput {
	return o
}

func (o ConnectorGcpSecretManagerArrayOutput) ToConnectorGcpSecretManagerArrayOutputWithContext(ctx context.Context) ConnectorGcpSecretManagerArrayOutput {
	return o
}

func (o ConnectorGcpSecretManagerArrayOutput) Index(i pulumi.IntInput) ConnectorGcpSecretManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorGcpSecretManager {
		return vs[0].([]*ConnectorGcpSecretManager)[vs[1].(int)]
	}).(ConnectorGcpSecretManagerOutput)
}

type ConnectorGcpSecretManagerMapOutput struct{ *pulumi.OutputState }

func (ConnectorGcpSecretManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorGcpSecretManager)(nil)).Elem()
}

func (o ConnectorGcpSecretManagerMapOutput) ToConnectorGcpSecretManagerMapOutput() ConnectorGcpSecretManagerMapOutput {
	return o
}

func (o ConnectorGcpSecretManagerMapOutput) ToConnectorGcpSecretManagerMapOutputWithContext(ctx context.Context) ConnectorGcpSecretManagerMapOutput {
	return o
}

func (o ConnectorGcpSecretManagerMapOutput) MapIndex(k pulumi.StringInput) ConnectorGcpSecretManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorGcpSecretManager {
		return vs[0].(map[string]*ConnectorGcpSecretManager)[vs[1].(string)]
	}).(ConnectorGcpSecretManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorGcpSecretManagerInput)(nil)).Elem(), &ConnectorGcpSecretManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorGcpSecretManagerArrayInput)(nil)).Elem(), ConnectorGcpSecretManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorGcpSecretManagerMapInput)(nil)).Elem(), ConnectorGcpSecretManagerMap{})
	pulumi.RegisterOutputType(ConnectorGcpSecretManagerOutput{})
	pulumi.RegisterOutputType(ConnectorGcpSecretManagerArrayOutput{})
	pulumi.RegisterOutputType(ConnectorGcpSecretManagerMapOutput{})
}
