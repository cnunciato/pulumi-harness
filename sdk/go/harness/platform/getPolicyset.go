// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Data source for retrieving a Harness policyset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupPolicyset(ctx, &platform.LookupPolicysetArgs{
//				Action:     "onrun",
//				Enabled:    pulumi.BoolRef(true),
//				Identifier: "harness_platform_policyset.test.identifier",
//				Name:       pulumi.StringRef("harness_platform_policyset.test.name"),
//				Policies: []platform.GetPolicysetPolicy{
//					{
//						Identifier: "always_run",
//						Severity:   "warning",
//					},
//				},
//				Type: "pipeline",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPolicyset(ctx *pulumi.Context, args *LookupPolicysetArgs, opts ...pulumi.InvokeOption) (*LookupPolicysetResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupPolicysetResult
	err := ctx.Invoke("harness:platform/getPolicyset:getPolicyset", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicyset.
type LookupPolicysetArgs struct {
	// Action code for the policyset.
	Action string `pulumi:"action"`
	// Enabled for the policyset.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	Policies []GetPolicysetPolicy `pulumi:"policies"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Type of the policyset.
	Type string `pulumi:"type"`
}

// A collection of values returned by getPolicyset.
type LookupPolicysetResult struct {
	// Action code for the policyset.
	Action string `pulumi:"action"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// Enabled for the policyset.
	Enabled *bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	Policies []GetPolicysetPolicy `pulumi:"policies"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Type of the policyset.
	Type string `pulumi:"type"`
}

func LookupPolicysetOutput(ctx *pulumi.Context, args LookupPolicysetOutputArgs, opts ...pulumi.InvokeOption) LookupPolicysetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicysetResult, error) {
			args := v.(LookupPolicysetArgs)
			r, err := LookupPolicyset(ctx, &args, opts...)
			var s LookupPolicysetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPolicysetResultOutput)
}

// A collection of arguments for invoking getPolicyset.
type LookupPolicysetOutputArgs struct {
	// Action code for the policyset.
	Action pulumi.StringInput `pulumi:"action"`
	// Enabled for the policyset.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// List of policy identifiers / severity for the policyset.
	Policies GetPolicysetPolicyArrayInput `pulumi:"policies"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Type of the policyset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupPolicysetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicysetArgs)(nil)).Elem()
}

// A collection of values returned by getPolicyset.
type LookupPolicysetResultOutput struct{ *pulumi.OutputState }

func (LookupPolicysetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicysetResult)(nil)).Elem()
}

func (o LookupPolicysetResultOutput) ToLookupPolicysetResultOutput() LookupPolicysetResultOutput {
	return o
}

func (o LookupPolicysetResultOutput) ToLookupPolicysetResultOutputWithContext(ctx context.Context) LookupPolicysetResultOutput {
	return o
}

// Action code for the policyset.
func (o LookupPolicysetResultOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicysetResult) string { return v.Action }).(pulumi.StringOutput)
}

// Description of the resource.
func (o LookupPolicysetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicysetResult) string { return v.Description }).(pulumi.StringOutput)
}

// Enabled for the policyset.
func (o LookupPolicysetResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupPolicysetResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPolicysetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicysetResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupPolicysetResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicysetResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupPolicysetResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicysetResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupPolicysetResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicysetResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// List of policy identifiers / severity for the policyset.
func (o LookupPolicysetResultOutput) Policies() GetPolicysetPolicyArrayOutput {
	return o.ApplyT(func(v LookupPolicysetResult) []GetPolicysetPolicy { return v.Policies }).(GetPolicysetPolicyArrayOutput)
}

// Unique identifier of the project.
func (o LookupPolicysetResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicysetResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupPolicysetResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPolicysetResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Type of the policyset.
func (o LookupPolicysetResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicysetResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicysetResultOutput{})
}
