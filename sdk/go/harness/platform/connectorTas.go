// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an Tas in Harness.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewConnectorTas(ctx, "tas", &platform.ConnectorTasArgs{
//				Credentials: &platform.ConnectorTasCredentialsArgs{
//					TasManualDetails: &platform.ConnectorTasCredentialsTasManualDetailsArgs{
//						EndpointUrl: pulumi.String("https://tas.example.com"),
//						PasswordRef: pulumi.String("account.secret_id"),
//						UsernameRef: pulumi.String("account.username_id"),
//					},
//					Type: pulumi.String("ManualConfig"),
//				},
//				DelegateSelectors: pulumi.StringArray{
//					pulumi.String("harness-delegate"),
//				},
//				Description:       pulumi.String("description of tas connector"),
//				ExecuteOnDelegate: pulumi.Bool(true),
//				Identifier:        pulumi.String("example_tas_cloud_provider"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level tas connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorTas:ConnectorTas example <connector_id>
//
// ```
//
//	Import organization level tas connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorTas:ConnectorTas example <organization_id>/<connector_id>
//
// ```
//
//	Import project level tas connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorTas:ConnectorTas example <organization_id>/<project_id>/<connector_id>
//
// ```
type ConnectorTas struct {
	pulumi.CustomResourceState

	// Contains Tas connector credentials.
	Credentials ConnectorTasCredentialsOutput `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrOutput `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewConnectorTas registers a new resource with the given unique name, arguments, and options.
func NewConnectorTas(ctx *pulumi.Context,
	name string, args *ConnectorTasArgs, opts ...pulumi.ResourceOption) (*ConnectorTas, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectorTas
	err := ctx.RegisterResource("harness:platform/connectorTas:ConnectorTas", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorTas gets an existing ConnectorTas resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorTas(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorTasState, opts ...pulumi.ResourceOption) (*ConnectorTas, error) {
	var resource ConnectorTas
	err := ctx.ReadResource("harness:platform/connectorTas:ConnectorTas", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorTas resources.
type connectorTasState struct {
	// Contains Tas connector credentials.
	Credentials *ConnectorTasCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type ConnectorTasState struct {
	// Contains Tas connector credentials.
	Credentials ConnectorTasCredentialsPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorTasState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorTasState)(nil)).Elem()
}

type connectorTasArgs struct {
	// Contains Tas connector credentials.
	Credentials ConnectorTasCredentials `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate *bool `pulumi:"executeOnDelegate"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ConnectorTas resource.
type ConnectorTasArgs struct {
	// Contains Tas connector credentials.
	Credentials ConnectorTasCredentialsInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Execute on delegate or not.
	ExecuteOnDelegate pulumi.BoolPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorTasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorTasArgs)(nil)).Elem()
}

type ConnectorTasInput interface {
	pulumi.Input

	ToConnectorTasOutput() ConnectorTasOutput
	ToConnectorTasOutputWithContext(ctx context.Context) ConnectorTasOutput
}

func (*ConnectorTas) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorTas)(nil)).Elem()
}

func (i *ConnectorTas) ToConnectorTasOutput() ConnectorTasOutput {
	return i.ToConnectorTasOutputWithContext(context.Background())
}

func (i *ConnectorTas) ToConnectorTasOutputWithContext(ctx context.Context) ConnectorTasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorTasOutput)
}

// ConnectorTasArrayInput is an input type that accepts ConnectorTasArray and ConnectorTasArrayOutput values.
// You can construct a concrete instance of `ConnectorTasArrayInput` via:
//
//	ConnectorTasArray{ ConnectorTasArgs{...} }
type ConnectorTasArrayInput interface {
	pulumi.Input

	ToConnectorTasArrayOutput() ConnectorTasArrayOutput
	ToConnectorTasArrayOutputWithContext(context.Context) ConnectorTasArrayOutput
}

type ConnectorTasArray []ConnectorTasInput

func (ConnectorTasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorTas)(nil)).Elem()
}

func (i ConnectorTasArray) ToConnectorTasArrayOutput() ConnectorTasArrayOutput {
	return i.ToConnectorTasArrayOutputWithContext(context.Background())
}

func (i ConnectorTasArray) ToConnectorTasArrayOutputWithContext(ctx context.Context) ConnectorTasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorTasArrayOutput)
}

// ConnectorTasMapInput is an input type that accepts ConnectorTasMap and ConnectorTasMapOutput values.
// You can construct a concrete instance of `ConnectorTasMapInput` via:
//
//	ConnectorTasMap{ "key": ConnectorTasArgs{...} }
type ConnectorTasMapInput interface {
	pulumi.Input

	ToConnectorTasMapOutput() ConnectorTasMapOutput
	ToConnectorTasMapOutputWithContext(context.Context) ConnectorTasMapOutput
}

type ConnectorTasMap map[string]ConnectorTasInput

func (ConnectorTasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorTas)(nil)).Elem()
}

func (i ConnectorTasMap) ToConnectorTasMapOutput() ConnectorTasMapOutput {
	return i.ToConnectorTasMapOutputWithContext(context.Background())
}

func (i ConnectorTasMap) ToConnectorTasMapOutputWithContext(ctx context.Context) ConnectorTasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorTasMapOutput)
}

type ConnectorTasOutput struct{ *pulumi.OutputState }

func (ConnectorTasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorTas)(nil)).Elem()
}

func (o ConnectorTasOutput) ToConnectorTasOutput() ConnectorTasOutput {
	return o
}

func (o ConnectorTasOutput) ToConnectorTasOutputWithContext(ctx context.Context) ConnectorTasOutput {
	return o
}

// Contains Tas connector credentials.
func (o ConnectorTasOutput) Credentials() ConnectorTasCredentialsOutput {
	return o.ApplyT(func(v *ConnectorTas) ConnectorTasCredentialsOutput { return v.Credentials }).(ConnectorTasCredentialsOutput)
}

// Tags to filter delegates for connection.
func (o ConnectorTasOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorTas) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorTasOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorTas) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Execute on delegate or not.
func (o ConnectorTasOutput) ExecuteOnDelegate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorTas) pulumi.BoolPtrOutput { return v.ExecuteOnDelegate }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the resource.
func (o ConnectorTasOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorTas) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorTasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorTas) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorTasOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorTas) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorTasOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorTas) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorTasOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorTas) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ConnectorTasArrayOutput struct{ *pulumi.OutputState }

func (ConnectorTasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorTas)(nil)).Elem()
}

func (o ConnectorTasArrayOutput) ToConnectorTasArrayOutput() ConnectorTasArrayOutput {
	return o
}

func (o ConnectorTasArrayOutput) ToConnectorTasArrayOutputWithContext(ctx context.Context) ConnectorTasArrayOutput {
	return o
}

func (o ConnectorTasArrayOutput) Index(i pulumi.IntInput) ConnectorTasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorTas {
		return vs[0].([]*ConnectorTas)[vs[1].(int)]
	}).(ConnectorTasOutput)
}

type ConnectorTasMapOutput struct{ *pulumi.OutputState }

func (ConnectorTasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorTas)(nil)).Elem()
}

func (o ConnectorTasMapOutput) ToConnectorTasMapOutput() ConnectorTasMapOutput {
	return o
}

func (o ConnectorTasMapOutput) ToConnectorTasMapOutputWithContext(ctx context.Context) ConnectorTasMapOutput {
	return o
}

func (o ConnectorTasMapOutput) MapIndex(k pulumi.StringInput) ConnectorTasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorTas {
		return vs[0].(map[string]*ConnectorTas)[vs[1].(string)]
	}).(ConnectorTasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorTasInput)(nil)).Elem(), &ConnectorTas{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorTasArrayInput)(nil)).Elem(), ConnectorTasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorTasMapInput)(nil)).Elem(), ConnectorTasMap{})
	pulumi.RegisterOutputType(ConnectorTasOutput{})
	pulumi.RegisterOutputType(ConnectorTasArrayOutput{})
	pulumi.RegisterOutputType(ConnectorTasMapOutput{})
}
