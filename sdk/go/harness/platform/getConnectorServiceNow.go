// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Service Now connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupConnectorServiceNow(ctx, &platform.LookupConnectorServiceNowArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupConnectorServiceNow(ctx *pulumi.Context, args *LookupConnectorServiceNowArgs, opts ...pulumi.InvokeOption) (*LookupConnectorServiceNowResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupConnectorServiceNowResult
	err := ctx.Invoke("harness:platform/getConnectorServiceNow:getConnectorServiceNow", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectorServiceNow.
type LookupConnectorServiceNowArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getConnectorServiceNow.
type LookupConnectorServiceNowResult struct {
	// The credentials to use for the service now authentication.
	Auths []GetConnectorServiceNowAuth `pulumi:"auths"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	PasswordRef string `pulumi:"passwordRef"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// URL of service now.
	ServiceNowUrl string `pulumi:"serviceNowUrl"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
	// Username to use for authentication.
	Username string `pulumi:"username"`
	// Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
	UsernameRef string `pulumi:"usernameRef"`
}

func LookupConnectorServiceNowOutput(ctx *pulumi.Context, args LookupConnectorServiceNowOutputArgs, opts ...pulumi.InvokeOption) LookupConnectorServiceNowResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectorServiceNowResult, error) {
			args := v.(LookupConnectorServiceNowArgs)
			r, err := LookupConnectorServiceNow(ctx, &args, opts...)
			var s LookupConnectorServiceNowResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConnectorServiceNowResultOutput)
}

// A collection of arguments for invoking getConnectorServiceNow.
type LookupConnectorServiceNowOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupConnectorServiceNowOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorServiceNowArgs)(nil)).Elem()
}

// A collection of values returned by getConnectorServiceNow.
type LookupConnectorServiceNowResultOutput struct{ *pulumi.OutputState }

func (LookupConnectorServiceNowResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorServiceNowResult)(nil)).Elem()
}

func (o LookupConnectorServiceNowResultOutput) ToLookupConnectorServiceNowResultOutput() LookupConnectorServiceNowResultOutput {
	return o
}

func (o LookupConnectorServiceNowResultOutput) ToLookupConnectorServiceNowResultOutputWithContext(ctx context.Context) LookupConnectorServiceNowResultOutput {
	return o
}

// The credentials to use for the service now authentication.
func (o LookupConnectorServiceNowResultOutput) Auths() GetConnectorServiceNowAuthArrayOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) []GetConnectorServiceNowAuth { return v.Auths }).(GetConnectorServiceNowAuthArrayOutput)
}

// Tags to filter delegates for connection.
func (o LookupConnectorServiceNowResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupConnectorServiceNowResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConnectorServiceNowResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupConnectorServiceNowResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupConnectorServiceNowResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupConnectorServiceNowResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
func (o LookupConnectorServiceNowResultOutput) PasswordRef() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) string { return v.PasswordRef }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o LookupConnectorServiceNowResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// URL of service now.
func (o LookupConnectorServiceNowResultOutput) ServiceNowUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) string { return v.ServiceNowUrl }).(pulumi.StringOutput)
}

// Tags to associate with the resource.
func (o LookupConnectorServiceNowResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Username to use for authentication.
func (o LookupConnectorServiceNowResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) string { return v.Username }).(pulumi.StringOutput)
}

// Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.
func (o LookupConnectorServiceNowResultOutput) UsernameRef() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorServiceNowResult) string { return v.UsernameRef }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectorServiceNowResultOutput{})
}
