// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up an Azure Cloud Provider Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.LookupConnectorAzureCloudProvider(ctx, &platform.LookupConnectorAzureCloudProviderArgs{
//				Identifier: "identifier",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupConnectorAzureCloudProvider(ctx *pulumi.Context, args *LookupConnectorAzureCloudProviderArgs, opts ...pulumi.InvokeOption) (*LookupConnectorAzureCloudProviderResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupConnectorAzureCloudProviderResult
	err := ctx.Invoke("harness:platform/getConnectorAzureCloudProvider:getConnectorAzureCloudProvider", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectorAzureCloudProvider.
type LookupConnectorAzureCloudProviderArgs struct {
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getConnectorAzureCloudProvider.
type LookupConnectorAzureCloudProviderResult struct {
	// Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT
	AzureEnvironmentType string `pulumi:"azureEnvironmentType"`
	// Contains Azure connector credentials.
	Credentials []GetConnectorAzureCloudProviderCredential `pulumi:"credentials"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// Execute on delegate or not.
	ExecuteOnDelegate bool `pulumi:"executeOnDelegate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

func LookupConnectorAzureCloudProviderOutput(ctx *pulumi.Context, args LookupConnectorAzureCloudProviderOutputArgs, opts ...pulumi.InvokeOption) LookupConnectorAzureCloudProviderResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectorAzureCloudProviderResult, error) {
			args := v.(LookupConnectorAzureCloudProviderArgs)
			r, err := LookupConnectorAzureCloudProvider(ctx, &args, opts...)
			var s LookupConnectorAzureCloudProviderResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConnectorAzureCloudProviderResultOutput)
}

// A collection of arguments for invoking getConnectorAzureCloudProvider.
type LookupConnectorAzureCloudProviderOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupConnectorAzureCloudProviderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorAzureCloudProviderArgs)(nil)).Elem()
}

// A collection of values returned by getConnectorAzureCloudProvider.
type LookupConnectorAzureCloudProviderResultOutput struct{ *pulumi.OutputState }

func (LookupConnectorAzureCloudProviderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorAzureCloudProviderResult)(nil)).Elem()
}

func (o LookupConnectorAzureCloudProviderResultOutput) ToLookupConnectorAzureCloudProviderResultOutput() LookupConnectorAzureCloudProviderResultOutput {
	return o
}

func (o LookupConnectorAzureCloudProviderResultOutput) ToLookupConnectorAzureCloudProviderResultOutputWithContext(ctx context.Context) LookupConnectorAzureCloudProviderResultOutput {
	return o
}

// Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT
func (o LookupConnectorAzureCloudProviderResultOutput) AzureEnvironmentType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) string { return v.AzureEnvironmentType }).(pulumi.StringOutput)
}

// Contains Azure connector credentials.
func (o LookupConnectorAzureCloudProviderResultOutput) Credentials() GetConnectorAzureCloudProviderCredentialArrayOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) []GetConnectorAzureCloudProviderCredential {
		return v.Credentials
	}).(GetConnectorAzureCloudProviderCredentialArrayOutput)
}

// Tags to filter delegates for connection.
func (o LookupConnectorAzureCloudProviderResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupConnectorAzureCloudProviderResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) string { return v.Description }).(pulumi.StringOutput)
}

// Execute on delegate or not.
func (o LookupConnectorAzureCloudProviderResultOutput) ExecuteOnDelegate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) bool { return v.ExecuteOnDelegate }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupConnectorAzureCloudProviderResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupConnectorAzureCloudProviderResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o LookupConnectorAzureCloudProviderResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupConnectorAzureCloudProviderResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupConnectorAzureCloudProviderResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o LookupConnectorAzureCloudProviderResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupConnectorAzureCloudProviderResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectorAzureCloudProviderResultOutput{})
}
