// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Jenkins connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewConnectorJenkins(ctx, "test", &platform.ConnectorJenkinsArgs{
//				Auth: &platform.ConnectorJenkinsAuthArgs{
//					JenkinsBearerToken: &platform.ConnectorJenkinsAuthJenkinsBearerTokenArgs{
//						TokenRef: pulumi.String(fmt.Sprintf("account.%v", harness_platform_secret_text.Test.Id)),
//					},
//					Type: pulumi.String("Bearer Token(HTTP Header)"),
//				},
//				DelegateSelectors: pulumi.StringArray{
//					pulumi.String("harness-delegate"),
//				},
//				Description: pulumi.String("test"),
//				Identifier:  pulumi.String("identifier"),
//				JenkinsUrl:  pulumi.String("https://jenkinss.com/"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level jenkins connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorJenkins:ConnectorJenkins example <connector_id>
//
// ```
//
//	Import org level jenkins connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorJenkins:ConnectorJenkins example <ord_id>/<connector_id>
//
// ```
//
//	Import project level jenkins connector
//
// ```sh
//
//	$ pulumi import harness:platform/connectorJenkins:ConnectorJenkins example <org_id>/<project_id>/<connector_id>
//
// ```
type ConnectorJenkins struct {
	pulumi.CustomResourceState

	// This entity contains the details for Jenkins Authentication.
	Auth ConnectorJenkinsAuthPtrOutput `pulumi:"auth"`
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Jenkins Url.
	JenkinsUrl pulumi.StringOutput `pulumi:"jenkinsUrl"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewConnectorJenkins registers a new resource with the given unique name, arguments, and options.
func NewConnectorJenkins(ctx *pulumi.Context,
	name string, args *ConnectorJenkinsArgs, opts ...pulumi.ResourceOption) (*ConnectorJenkins, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.JenkinsUrl == nil {
		return nil, errors.New("invalid value for required argument 'JenkinsUrl'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectorJenkins
	err := ctx.RegisterResource("harness:platform/connectorJenkins:ConnectorJenkins", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorJenkins gets an existing ConnectorJenkins resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorJenkins(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorJenkinsState, opts ...pulumi.ResourceOption) (*ConnectorJenkins, error) {
	var resource ConnectorJenkins
	err := ctx.ReadResource("harness:platform/connectorJenkins:ConnectorJenkins", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorJenkins resources.
type connectorJenkinsState struct {
	// This entity contains the details for Jenkins Authentication.
	Auth *ConnectorJenkinsAuth `pulumi:"auth"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Jenkins Url.
	JenkinsUrl *string `pulumi:"jenkinsUrl"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type ConnectorJenkinsState struct {
	// This entity contains the details for Jenkins Authentication.
	Auth ConnectorJenkinsAuthPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Jenkins Url.
	JenkinsUrl pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorJenkinsState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorJenkinsState)(nil)).Elem()
}

type connectorJenkinsArgs struct {
	// This entity contains the details for Jenkins Authentication.
	Auth *ConnectorJenkinsAuth `pulumi:"auth"`
	// Tags to filter delegates for connection.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Jenkins Url.
	JenkinsUrl string `pulumi:"jenkinsUrl"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ConnectorJenkins resource.
type ConnectorJenkinsArgs struct {
	// This entity contains the details for Jenkins Authentication.
	Auth ConnectorJenkinsAuthPtrInput
	// Tags to filter delegates for connection.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Jenkins Url.
	JenkinsUrl pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (ConnectorJenkinsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorJenkinsArgs)(nil)).Elem()
}

type ConnectorJenkinsInput interface {
	pulumi.Input

	ToConnectorJenkinsOutput() ConnectorJenkinsOutput
	ToConnectorJenkinsOutputWithContext(ctx context.Context) ConnectorJenkinsOutput
}

func (*ConnectorJenkins) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorJenkins)(nil)).Elem()
}

func (i *ConnectorJenkins) ToConnectorJenkinsOutput() ConnectorJenkinsOutput {
	return i.ToConnectorJenkinsOutputWithContext(context.Background())
}

func (i *ConnectorJenkins) ToConnectorJenkinsOutputWithContext(ctx context.Context) ConnectorJenkinsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorJenkinsOutput)
}

// ConnectorJenkinsArrayInput is an input type that accepts ConnectorJenkinsArray and ConnectorJenkinsArrayOutput values.
// You can construct a concrete instance of `ConnectorJenkinsArrayInput` via:
//
//	ConnectorJenkinsArray{ ConnectorJenkinsArgs{...} }
type ConnectorJenkinsArrayInput interface {
	pulumi.Input

	ToConnectorJenkinsArrayOutput() ConnectorJenkinsArrayOutput
	ToConnectorJenkinsArrayOutputWithContext(context.Context) ConnectorJenkinsArrayOutput
}

type ConnectorJenkinsArray []ConnectorJenkinsInput

func (ConnectorJenkinsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorJenkins)(nil)).Elem()
}

func (i ConnectorJenkinsArray) ToConnectorJenkinsArrayOutput() ConnectorJenkinsArrayOutput {
	return i.ToConnectorJenkinsArrayOutputWithContext(context.Background())
}

func (i ConnectorJenkinsArray) ToConnectorJenkinsArrayOutputWithContext(ctx context.Context) ConnectorJenkinsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorJenkinsArrayOutput)
}

// ConnectorJenkinsMapInput is an input type that accepts ConnectorJenkinsMap and ConnectorJenkinsMapOutput values.
// You can construct a concrete instance of `ConnectorJenkinsMapInput` via:
//
//	ConnectorJenkinsMap{ "key": ConnectorJenkinsArgs{...} }
type ConnectorJenkinsMapInput interface {
	pulumi.Input

	ToConnectorJenkinsMapOutput() ConnectorJenkinsMapOutput
	ToConnectorJenkinsMapOutputWithContext(context.Context) ConnectorJenkinsMapOutput
}

type ConnectorJenkinsMap map[string]ConnectorJenkinsInput

func (ConnectorJenkinsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorJenkins)(nil)).Elem()
}

func (i ConnectorJenkinsMap) ToConnectorJenkinsMapOutput() ConnectorJenkinsMapOutput {
	return i.ToConnectorJenkinsMapOutputWithContext(context.Background())
}

func (i ConnectorJenkinsMap) ToConnectorJenkinsMapOutputWithContext(ctx context.Context) ConnectorJenkinsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorJenkinsMapOutput)
}

type ConnectorJenkinsOutput struct{ *pulumi.OutputState }

func (ConnectorJenkinsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorJenkins)(nil)).Elem()
}

func (o ConnectorJenkinsOutput) ToConnectorJenkinsOutput() ConnectorJenkinsOutput {
	return o
}

func (o ConnectorJenkinsOutput) ToConnectorJenkinsOutputWithContext(ctx context.Context) ConnectorJenkinsOutput {
	return o
}

// This entity contains the details for Jenkins Authentication.
func (o ConnectorJenkinsOutput) Auth() ConnectorJenkinsAuthPtrOutput {
	return o.ApplyT(func(v *ConnectorJenkins) ConnectorJenkinsAuthPtrOutput { return v.Auth }).(ConnectorJenkinsAuthPtrOutput)
}

// Tags to filter delegates for connection.
func (o ConnectorJenkinsOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorJenkins) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ConnectorJenkinsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorJenkins) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ConnectorJenkinsOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorJenkins) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Jenkins Url.
func (o ConnectorJenkinsOutput) JenkinsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorJenkins) pulumi.StringOutput { return v.JenkinsUrl }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ConnectorJenkinsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorJenkins) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ConnectorJenkinsOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorJenkins) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ConnectorJenkinsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorJenkins) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource.
func (o ConnectorJenkinsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectorJenkins) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ConnectorJenkinsArrayOutput struct{ *pulumi.OutputState }

func (ConnectorJenkinsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorJenkins)(nil)).Elem()
}

func (o ConnectorJenkinsArrayOutput) ToConnectorJenkinsArrayOutput() ConnectorJenkinsArrayOutput {
	return o
}

func (o ConnectorJenkinsArrayOutput) ToConnectorJenkinsArrayOutputWithContext(ctx context.Context) ConnectorJenkinsArrayOutput {
	return o
}

func (o ConnectorJenkinsArrayOutput) Index(i pulumi.IntInput) ConnectorJenkinsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorJenkins {
		return vs[0].([]*ConnectorJenkins)[vs[1].(int)]
	}).(ConnectorJenkinsOutput)
}

type ConnectorJenkinsMapOutput struct{ *pulumi.OutputState }

func (ConnectorJenkinsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorJenkins)(nil)).Elem()
}

func (o ConnectorJenkinsMapOutput) ToConnectorJenkinsMapOutput() ConnectorJenkinsMapOutput {
	return o
}

func (o ConnectorJenkinsMapOutput) ToConnectorJenkinsMapOutputWithContext(ctx context.Context) ConnectorJenkinsMapOutput {
	return o
}

func (o ConnectorJenkinsMapOutput) MapIndex(k pulumi.StringInput) ConnectorJenkinsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorJenkins {
		return vs[0].(map[string]*ConnectorJenkins)[vs[1].(string)]
	}).(ConnectorJenkinsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorJenkinsInput)(nil)).Elem(), &ConnectorJenkins{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorJenkinsArrayInput)(nil)).Elem(), ConnectorJenkinsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorJenkinsMapInput)(nil)).Elem(), ConnectorJenkinsMap{})
	pulumi.RegisterOutputType(ConnectorJenkinsOutput{})
	pulumi.RegisterOutputType(ConnectorJenkinsArrayOutput{})
	pulumi.RegisterOutputType(ConnectorJenkinsMapOutput{})
}
