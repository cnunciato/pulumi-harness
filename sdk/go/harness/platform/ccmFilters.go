// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness CCM Filters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewCcmFilters(ctx, "test", &platform.CcmFiltersArgs{
//				FilterProperties: &platform.CcmFiltersFilterPropertiesArgs{
//					FilterType: pulumi.String("CCMRecommendation"),
//					Tags: pulumi.StringArray{
//						pulumi.String("foo:bar"),
//					},
//				},
//				FilterVisibility: pulumi.String("EveryOne"),
//				Identifier:       pulumi.String("identifier"),
//				OrgId:            pulumi.String("org_id"),
//				ProjectId:        pulumi.String("project_id"),
//				Type:             pulumi.String("CCMRecommendation"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level ccm filter
//
// ```sh
//
//	$ pulumi import harness:platform/ccmFilters:CcmFilters example <filter_id>/<type>
//
// ```
//
//	Import org level ccm filter
//
// ```sh
//
//	$ pulumi import harness:platform/ccmFilters:CcmFilters example <ord_id>/<filter_id>/<type>
//
// ```
//
//	Import project level ccm filter
//
// ```sh
//
//	$ pulumi import harness:platform/ccmFilters:CcmFilters example <org_id>/<project_id>/<filter_id>/<type>
//
// ```
type CcmFilters struct {
	pulumi.CustomResourceState

	// Properties of the filters entity defined in Harness.
	FilterProperties CcmFiltersFilterPropertiesOutput `pulumi:"filterProperties"`
	// This indicates visibility of filters. By default, everyone can view this filter..
	FilterVisibility pulumi.StringPtrOutput `pulumi:"filterVisibility"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the ccm filters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization Identifier for the Entity.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Type of ccm filters.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCcmFilters registers a new resource with the given unique name, arguments, and options.
func NewCcmFilters(ctx *pulumi.Context,
	name string, args *CcmFiltersArgs, opts ...pulumi.ResourceOption) (*CcmFilters, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FilterProperties == nil {
		return nil, errors.New("invalid value for required argument 'FilterProperties'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CcmFilters
	err := ctx.RegisterResource("harness:platform/ccmFilters:CcmFilters", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCcmFilters gets an existing CcmFilters resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCcmFilters(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CcmFiltersState, opts ...pulumi.ResourceOption) (*CcmFilters, error) {
	var resource CcmFilters
	err := ctx.ReadResource("harness:platform/ccmFilters:CcmFilters", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CcmFilters resources.
type ccmFiltersState struct {
	// Properties of the filters entity defined in Harness.
	FilterProperties *CcmFiltersFilterProperties `pulumi:"filterProperties"`
	// This indicates visibility of filters. By default, everyone can view this filter..
	FilterVisibility *string `pulumi:"filterVisibility"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the ccm filters.
	Name *string `pulumi:"name"`
	// Organization Identifier for the Entity.
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId *string `pulumi:"projectId"`
	// Type of ccm filters.
	Type *string `pulumi:"type"`
}

type CcmFiltersState struct {
	// Properties of the filters entity defined in Harness.
	FilterProperties CcmFiltersFilterPropertiesPtrInput
	// This indicates visibility of filters. By default, everyone can view this filter..
	FilterVisibility pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the ccm filters.
	Name pulumi.StringPtrInput
	// Organization Identifier for the Entity.
	OrgId pulumi.StringPtrInput
	// Project Identifier for the Entity.
	ProjectId pulumi.StringPtrInput
	// Type of ccm filters.
	Type pulumi.StringPtrInput
}

func (CcmFiltersState) ElementType() reflect.Type {
	return reflect.TypeOf((*ccmFiltersState)(nil)).Elem()
}

type ccmFiltersArgs struct {
	// Properties of the filters entity defined in Harness.
	FilterProperties CcmFiltersFilterProperties `pulumi:"filterProperties"`
	// This indicates visibility of filters. By default, everyone can view this filter..
	FilterVisibility *string `pulumi:"filterVisibility"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the ccm filters.
	Name *string `pulumi:"name"`
	// Organization Identifier for the Entity.
	OrgId *string `pulumi:"orgId"`
	// Project Identifier for the Entity.
	ProjectId *string `pulumi:"projectId"`
	// Type of ccm filters.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a CcmFilters resource.
type CcmFiltersArgs struct {
	// Properties of the filters entity defined in Harness.
	FilterProperties CcmFiltersFilterPropertiesInput
	// This indicates visibility of filters. By default, everyone can view this filter..
	FilterVisibility pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the ccm filters.
	Name pulumi.StringPtrInput
	// Organization Identifier for the Entity.
	OrgId pulumi.StringPtrInput
	// Project Identifier for the Entity.
	ProjectId pulumi.StringPtrInput
	// Type of ccm filters.
	Type pulumi.StringInput
}

func (CcmFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ccmFiltersArgs)(nil)).Elem()
}

type CcmFiltersInput interface {
	pulumi.Input

	ToCcmFiltersOutput() CcmFiltersOutput
	ToCcmFiltersOutputWithContext(ctx context.Context) CcmFiltersOutput
}

func (*CcmFilters) ElementType() reflect.Type {
	return reflect.TypeOf((**CcmFilters)(nil)).Elem()
}

func (i *CcmFilters) ToCcmFiltersOutput() CcmFiltersOutput {
	return i.ToCcmFiltersOutputWithContext(context.Background())
}

func (i *CcmFilters) ToCcmFiltersOutputWithContext(ctx context.Context) CcmFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcmFiltersOutput)
}

// CcmFiltersArrayInput is an input type that accepts CcmFiltersArray and CcmFiltersArrayOutput values.
// You can construct a concrete instance of `CcmFiltersArrayInput` via:
//
//	CcmFiltersArray{ CcmFiltersArgs{...} }
type CcmFiltersArrayInput interface {
	pulumi.Input

	ToCcmFiltersArrayOutput() CcmFiltersArrayOutput
	ToCcmFiltersArrayOutputWithContext(context.Context) CcmFiltersArrayOutput
}

type CcmFiltersArray []CcmFiltersInput

func (CcmFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcmFilters)(nil)).Elem()
}

func (i CcmFiltersArray) ToCcmFiltersArrayOutput() CcmFiltersArrayOutput {
	return i.ToCcmFiltersArrayOutputWithContext(context.Background())
}

func (i CcmFiltersArray) ToCcmFiltersArrayOutputWithContext(ctx context.Context) CcmFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcmFiltersArrayOutput)
}

// CcmFiltersMapInput is an input type that accepts CcmFiltersMap and CcmFiltersMapOutput values.
// You can construct a concrete instance of `CcmFiltersMapInput` via:
//
//	CcmFiltersMap{ "key": CcmFiltersArgs{...} }
type CcmFiltersMapInput interface {
	pulumi.Input

	ToCcmFiltersMapOutput() CcmFiltersMapOutput
	ToCcmFiltersMapOutputWithContext(context.Context) CcmFiltersMapOutput
}

type CcmFiltersMap map[string]CcmFiltersInput

func (CcmFiltersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcmFilters)(nil)).Elem()
}

func (i CcmFiltersMap) ToCcmFiltersMapOutput() CcmFiltersMapOutput {
	return i.ToCcmFiltersMapOutputWithContext(context.Background())
}

func (i CcmFiltersMap) ToCcmFiltersMapOutputWithContext(ctx context.Context) CcmFiltersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcmFiltersMapOutput)
}

type CcmFiltersOutput struct{ *pulumi.OutputState }

func (CcmFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CcmFilters)(nil)).Elem()
}

func (o CcmFiltersOutput) ToCcmFiltersOutput() CcmFiltersOutput {
	return o
}

func (o CcmFiltersOutput) ToCcmFiltersOutputWithContext(ctx context.Context) CcmFiltersOutput {
	return o
}

// Properties of the filters entity defined in Harness.
func (o CcmFiltersOutput) FilterProperties() CcmFiltersFilterPropertiesOutput {
	return o.ApplyT(func(v *CcmFilters) CcmFiltersFilterPropertiesOutput { return v.FilterProperties }).(CcmFiltersFilterPropertiesOutput)
}

// This indicates visibility of filters. By default, everyone can view this filter..
func (o CcmFiltersOutput) FilterVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CcmFilters) pulumi.StringPtrOutput { return v.FilterVisibility }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o CcmFiltersOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *CcmFilters) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the ccm filters.
func (o CcmFiltersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CcmFilters) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization Identifier for the Entity.
func (o CcmFiltersOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CcmFilters) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project Identifier for the Entity.
func (o CcmFiltersOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CcmFilters) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Type of ccm filters.
func (o CcmFiltersOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CcmFilters) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type CcmFiltersArrayOutput struct{ *pulumi.OutputState }

func (CcmFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcmFilters)(nil)).Elem()
}

func (o CcmFiltersArrayOutput) ToCcmFiltersArrayOutput() CcmFiltersArrayOutput {
	return o
}

func (o CcmFiltersArrayOutput) ToCcmFiltersArrayOutputWithContext(ctx context.Context) CcmFiltersArrayOutput {
	return o
}

func (o CcmFiltersArrayOutput) Index(i pulumi.IntInput) CcmFiltersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CcmFilters {
		return vs[0].([]*CcmFilters)[vs[1].(int)]
	}).(CcmFiltersOutput)
}

type CcmFiltersMapOutput struct{ *pulumi.OutputState }

func (CcmFiltersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcmFilters)(nil)).Elem()
}

func (o CcmFiltersMapOutput) ToCcmFiltersMapOutput() CcmFiltersMapOutput {
	return o
}

func (o CcmFiltersMapOutput) ToCcmFiltersMapOutputWithContext(ctx context.Context) CcmFiltersMapOutput {
	return o
}

func (o CcmFiltersMapOutput) MapIndex(k pulumi.StringInput) CcmFiltersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CcmFilters {
		return vs[0].(map[string]*CcmFilters)[vs[1].(string)]
	}).(CcmFiltersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CcmFiltersInput)(nil)).Elem(), &CcmFilters{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcmFiltersArrayInput)(nil)).Elem(), CcmFiltersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcmFiltersMapInput)(nil)).Elem(), CcmFiltersMap{})
	pulumi.RegisterOutputType(CcmFiltersOutput{})
	pulumi.RegisterOutputType(CcmFiltersArrayOutput{})
	pulumi.RegisterOutputType(CcmFiltersMapOutput{})
}
