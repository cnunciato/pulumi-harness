// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an ssh key type secret.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/lbrlabs/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewSecretSshkey(ctx, "keyTabFilePath", &platform.SecretSshkeyArgs{
//				Identifier:  pulumi.String("identifier"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Port: pulumi.Int(22),
//				Kerberos: &platform.SecretSshkeyKerberosArgs{
//					TgtKeyTabFilePathSpec: &platform.SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs{
//						KeyPath: pulumi.String("key_path"),
//					},
//					Principal:           pulumi.String("principal"),
//					Realm:               pulumi.String("realm"),
//					TgtGenerationMethod: pulumi.String("KeyTabFilePath"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = platform.NewSecretSshkey(ctx, " tgtPassword", &platform.SecretSshkeyArgs{
//				Identifier:  pulumi.String("identifier"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Port: pulumi.Int(22),
//				Kerberos: &platform.SecretSshkeyKerberosArgs{
//					TgtPasswordSpec: &platform.SecretSshkeyKerberosTgtPasswordSpecArgs{
//						Password: pulumi.String(fmt.Sprintf("account.%v", secret.Id)),
//					},
//					Principal:           pulumi.String("principal"),
//					Realm:               pulumi.String("realm"),
//					TgtGenerationMethod: pulumi.String("Password"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = platform.NewSecretSshkey(ctx, "sshkeyReference", &platform.SecretSshkeyArgs{
//				Identifier:  pulumi.String("identifier"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Port: pulumi.Int(22),
//				Ssh: &platform.SecretSshkeySshArgs{
//					SshkeyReferenceCredential: &platform.SecretSshkeySshSshkeyReferenceCredentialArgs{
//						UserName:            pulumi.String("user_name"),
//						Key:                 pulumi.String(fmt.Sprintf("account.%v", key.Id)),
//						EncryptedPassphrase: pulumi.String(fmt.Sprintf("account.%v", secret.Id)),
//					},
//					CredentialType: pulumi.String("KeyReference"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = platform.NewSecretSshkey(ctx, " sshkeyPath", &platform.SecretSshkeyArgs{
//				Identifier:  pulumi.String("identifier"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Port: pulumi.Int(22),
//				Ssh: &platform.SecretSshkeySshArgs{
//					SshkeyPathCredential: &platform.SecretSshkeySshSshkeyPathCredentialArgs{
//						UserName:            pulumi.String("user_name"),
//						KeyPath:             pulumi.String("key_path"),
//						EncryptedPassphrase: pulumi.String("encrypted_passphrase"),
//					},
//					CredentialType: pulumi.String("KeyPath"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = platform.NewSecretSshkey(ctx, "sshPassword", &platform.SecretSshkeyArgs{
//				Identifier:  pulumi.String("identifier"),
//				Description: pulumi.String("test"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo:bar"),
//				},
//				Port: pulumi.Int(22),
//				Ssh: &platform.SecretSshkeySshArgs{
//					SshPasswordCredential: &platform.SecretSshkeySshSshPasswordCredentialArgs{
//						UserName: pulumi.String("user_name"),
//						Password: pulumi.String(fmt.Sprintf("account.%v", secret.Id)),
//					},
//					CredentialType: pulumi.String("Password"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import account level secret sshkey
//
// ```sh
//
//	$ pulumi import harness:platform/secretSshkey:SecretSshkey example <secret_sshkey_id>
//
// ```
//
//	Import org level secret sshkey
//
// ```sh
//
//	$ pulumi import harness:platform/secretSshkey:SecretSshkey example <ord_id>/<secret_sshkey_id>
//
// ```
//
//	Import project level secret sshkey
//
// ```sh
//
//	$ pulumi import harness:platform/secretSshkey:SecretSshkey example <org_id>/<project_id>/<secret_sshkey_id>
//
// ```
type SecretSshkey struct {
	pulumi.CustomResourceState

	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Kerberos authentication scheme
	Kerberos SecretSshkeyKerberosPtrOutput `pulumi:"kerberos"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// SSH port
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Kerberos authentication scheme
	Ssh SecretSshkeySshPtrOutput `pulumi:"ssh"`
	// Tags to associate with the resource.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewSecretSshkey registers a new resource with the given unique name, arguments, and options.
func NewSecretSshkey(ctx *pulumi.Context,
	name string, args *SecretSshkeyArgs, opts ...pulumi.ResourceOption) (*SecretSshkey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SecretSshkey
	err := ctx.RegisterResource("harness:platform/secretSshkey:SecretSshkey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretSshkey gets an existing SecretSshkey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretSshkey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretSshkeyState, opts ...pulumi.ResourceOption) (*SecretSshkey, error) {
	var resource SecretSshkey
	err := ctx.ReadResource("harness:platform/secretSshkey:SecretSshkey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretSshkey resources.
type secretSshkeyState struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Kerberos authentication scheme
	Kerberos *SecretSshkeyKerberos `pulumi:"kerberos"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// SSH port
	Port *int `pulumi:"port"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Kerberos authentication scheme
	Ssh *SecretSshkeySsh `pulumi:"ssh"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

type SecretSshkeyState struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Kerberos authentication scheme
	Kerberos SecretSshkeyKerberosPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// SSH port
	Port pulumi.IntPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Kerberos authentication scheme
	Ssh SecretSshkeySshPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (SecretSshkeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSshkeyState)(nil)).Elem()
}

type secretSshkeyArgs struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Kerberos authentication scheme
	Kerberos *SecretSshkeyKerberos `pulumi:"kerberos"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// SSH port
	Port *int `pulumi:"port"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Kerberos authentication scheme
	Ssh *SecretSshkeySsh `pulumi:"ssh"`
	// Tags to associate with the resource.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a SecretSshkey resource.
type SecretSshkeyArgs struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Kerberos authentication scheme
	Kerberos SecretSshkeyKerberosPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// SSH port
	Port pulumi.IntPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Kerberos authentication scheme
	Ssh SecretSshkeySshPtrInput
	// Tags to associate with the resource.
	Tags pulumi.StringArrayInput
}

func (SecretSshkeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretSshkeyArgs)(nil)).Elem()
}

type SecretSshkeyInput interface {
	pulumi.Input

	ToSecretSshkeyOutput() SecretSshkeyOutput
	ToSecretSshkeyOutputWithContext(ctx context.Context) SecretSshkeyOutput
}

func (*SecretSshkey) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSshkey)(nil)).Elem()
}

func (i *SecretSshkey) ToSecretSshkeyOutput() SecretSshkeyOutput {
	return i.ToSecretSshkeyOutputWithContext(context.Background())
}

func (i *SecretSshkey) ToSecretSshkeyOutputWithContext(ctx context.Context) SecretSshkeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSshkeyOutput)
}

// SecretSshkeyArrayInput is an input type that accepts SecretSshkeyArray and SecretSshkeyArrayOutput values.
// You can construct a concrete instance of `SecretSshkeyArrayInput` via:
//
//	SecretSshkeyArray{ SecretSshkeyArgs{...} }
type SecretSshkeyArrayInput interface {
	pulumi.Input

	ToSecretSshkeyArrayOutput() SecretSshkeyArrayOutput
	ToSecretSshkeyArrayOutputWithContext(context.Context) SecretSshkeyArrayOutput
}

type SecretSshkeyArray []SecretSshkeyInput

func (SecretSshkeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSshkey)(nil)).Elem()
}

func (i SecretSshkeyArray) ToSecretSshkeyArrayOutput() SecretSshkeyArrayOutput {
	return i.ToSecretSshkeyArrayOutputWithContext(context.Background())
}

func (i SecretSshkeyArray) ToSecretSshkeyArrayOutputWithContext(ctx context.Context) SecretSshkeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSshkeyArrayOutput)
}

// SecretSshkeyMapInput is an input type that accepts SecretSshkeyMap and SecretSshkeyMapOutput values.
// You can construct a concrete instance of `SecretSshkeyMapInput` via:
//
//	SecretSshkeyMap{ "key": SecretSshkeyArgs{...} }
type SecretSshkeyMapInput interface {
	pulumi.Input

	ToSecretSshkeyMapOutput() SecretSshkeyMapOutput
	ToSecretSshkeyMapOutputWithContext(context.Context) SecretSshkeyMapOutput
}

type SecretSshkeyMap map[string]SecretSshkeyInput

func (SecretSshkeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSshkey)(nil)).Elem()
}

func (i SecretSshkeyMap) ToSecretSshkeyMapOutput() SecretSshkeyMapOutput {
	return i.ToSecretSshkeyMapOutputWithContext(context.Background())
}

func (i SecretSshkeyMap) ToSecretSshkeyMapOutputWithContext(ctx context.Context) SecretSshkeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretSshkeyMapOutput)
}

type SecretSshkeyOutput struct{ *pulumi.OutputState }

func (SecretSshkeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretSshkey)(nil)).Elem()
}

func (o SecretSshkeyOutput) ToSecretSshkeyOutput() SecretSshkeyOutput {
	return o
}

func (o SecretSshkeyOutput) ToSecretSshkeyOutputWithContext(ctx context.Context) SecretSshkeyOutput {
	return o
}

// Description of the resource.
func (o SecretSshkeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSshkey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o SecretSshkeyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSshkey) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Kerberos authentication scheme
func (o SecretSshkeyOutput) Kerberos() SecretSshkeyKerberosPtrOutput {
	return o.ApplyT(func(v *SecretSshkey) SecretSshkeyKerberosPtrOutput { return v.Kerberos }).(SecretSshkeyKerberosPtrOutput)
}

// Name of the resource.
func (o SecretSshkeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretSshkey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o SecretSshkeyOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSshkey) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// SSH port
func (o SecretSshkeyOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretSshkey) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// Unique identifier of the project.
func (o SecretSshkeyOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretSshkey) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Kerberos authentication scheme
func (o SecretSshkeyOutput) Ssh() SecretSshkeySshPtrOutput {
	return o.ApplyT(func(v *SecretSshkey) SecretSshkeySshPtrOutput { return v.Ssh }).(SecretSshkeySshPtrOutput)
}

// Tags to associate with the resource.
func (o SecretSshkeyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretSshkey) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type SecretSshkeyArrayOutput struct{ *pulumi.OutputState }

func (SecretSshkeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretSshkey)(nil)).Elem()
}

func (o SecretSshkeyArrayOutput) ToSecretSshkeyArrayOutput() SecretSshkeyArrayOutput {
	return o
}

func (o SecretSshkeyArrayOutput) ToSecretSshkeyArrayOutputWithContext(ctx context.Context) SecretSshkeyArrayOutput {
	return o
}

func (o SecretSshkeyArrayOutput) Index(i pulumi.IntInput) SecretSshkeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretSshkey {
		return vs[0].([]*SecretSshkey)[vs[1].(int)]
	}).(SecretSshkeyOutput)
}

type SecretSshkeyMapOutput struct{ *pulumi.OutputState }

func (SecretSshkeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretSshkey)(nil)).Elem()
}

func (o SecretSshkeyMapOutput) ToSecretSshkeyMapOutput() SecretSshkeyMapOutput {
	return o
}

func (o SecretSshkeyMapOutput) ToSecretSshkeyMapOutputWithContext(ctx context.Context) SecretSshkeyMapOutput {
	return o
}

func (o SecretSshkeyMapOutput) MapIndex(k pulumi.StringInput) SecretSshkeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretSshkey {
		return vs[0].(map[string]*SecretSshkey)[vs[1].(string)]
	}).(SecretSshkeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSshkeyInput)(nil)).Elem(), &SecretSshkey{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSshkeyArrayInput)(nil)).Elem(), SecretSshkeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretSshkeyMapInput)(nil)).Elem(), SecretSshkeyMap{})
	pulumi.RegisterOutputType(SecretSshkeyOutput{})
	pulumi.RegisterOutputType(SecretSshkeyArrayOutput{})
	pulumi.RegisterOutputType(SecretSshkeyMapOutput{})
}
