// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Gitlab connector.
type Gitlab struct {
	pulumi.CustomResourceState

	// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication GitlabApiAuthenticationPtrOutput `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials GitlabCredentialsOutput `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Url of the gitlab repository or account.
	Url pulumi.StringOutput `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrOutput `pulumi:"validationRepo"`
}

// NewGitlab registers a new resource with the given unique name, arguments, and options.
func NewGitlab(ctx *pulumi.Context,
	name string, args *GitlabArgs, opts ...pulumi.ResourceOption) (*Gitlab, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionType'")
	}
	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Gitlab
	err := ctx.RegisterResource("harness:PlatformConnector/gitlab:Gitlab", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitlab gets an existing Gitlab resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitlab(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitlabState, opts ...pulumi.ResourceOption) (*Gitlab, error) {
	var resource Gitlab
	err := ctx.ReadResource("harness:PlatformConnector/gitlab:Gitlab", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gitlab resources.
type gitlabState struct {
	// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication *GitlabApiAuthentication `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType *string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials *GitlabCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the gitlab repository or account.
	Url *string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

type GitlabState struct {
	// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication GitlabApiAuthenticationPtrInput
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType pulumi.StringPtrInput
	// Credentials to use for the connection.
	Credentials GitlabCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the gitlab repository or account.
	Url pulumi.StringPtrInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (GitlabState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitlabState)(nil)).Elem()
}

type gitlabArgs struct {
	// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication *GitlabApiAuthentication `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials GitlabCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the gitlab repository or account.
	Url string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

// The set of arguments for constructing a Gitlab resource.
type GitlabArgs struct {
	// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication GitlabApiAuthenticationPtrInput
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType pulumi.StringInput
	// Credentials to use for the connection.
	Credentials GitlabCredentialsInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the gitlab repository or account.
	Url pulumi.StringInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (GitlabArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitlabArgs)(nil)).Elem()
}

type GitlabInput interface {
	pulumi.Input

	ToGitlabOutput() GitlabOutput
	ToGitlabOutputWithContext(ctx context.Context) GitlabOutput
}

func (*Gitlab) ElementType() reflect.Type {
	return reflect.TypeOf((**Gitlab)(nil)).Elem()
}

func (i *Gitlab) ToGitlabOutput() GitlabOutput {
	return i.ToGitlabOutputWithContext(context.Background())
}

func (i *Gitlab) ToGitlabOutputWithContext(ctx context.Context) GitlabOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitlabOutput)
}

// GitlabArrayInput is an input type that accepts GitlabArray and GitlabArrayOutput values.
// You can construct a concrete instance of `GitlabArrayInput` via:
//
//	GitlabArray{ GitlabArgs{...} }
type GitlabArrayInput interface {
	pulumi.Input

	ToGitlabArrayOutput() GitlabArrayOutput
	ToGitlabArrayOutputWithContext(context.Context) GitlabArrayOutput
}

type GitlabArray []GitlabInput

func (GitlabArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gitlab)(nil)).Elem()
}

func (i GitlabArray) ToGitlabArrayOutput() GitlabArrayOutput {
	return i.ToGitlabArrayOutputWithContext(context.Background())
}

func (i GitlabArray) ToGitlabArrayOutputWithContext(ctx context.Context) GitlabArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitlabArrayOutput)
}

// GitlabMapInput is an input type that accepts GitlabMap and GitlabMapOutput values.
// You can construct a concrete instance of `GitlabMapInput` via:
//
//	GitlabMap{ "key": GitlabArgs{...} }
type GitlabMapInput interface {
	pulumi.Input

	ToGitlabMapOutput() GitlabMapOutput
	ToGitlabMapOutputWithContext(context.Context) GitlabMapOutput
}

type GitlabMap map[string]GitlabInput

func (GitlabMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gitlab)(nil)).Elem()
}

func (i GitlabMap) ToGitlabMapOutput() GitlabMapOutput {
	return i.ToGitlabMapOutputWithContext(context.Background())
}

func (i GitlabMap) ToGitlabMapOutputWithContext(ctx context.Context) GitlabMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitlabMapOutput)
}

type GitlabOutput struct{ *pulumi.OutputState }

func (GitlabOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gitlab)(nil)).Elem()
}

func (o GitlabOutput) ToGitlabOutput() GitlabOutput {
	return o
}

func (o GitlabOutput) ToGitlabOutputWithContext(ctx context.Context) GitlabOutput {
	return o
}

// Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
func (o GitlabOutput) ApiAuthentication() GitlabApiAuthenticationPtrOutput {
	return o.ApplyT(func(v *Gitlab) GitlabApiAuthenticationPtrOutput { return v.ApiAuthentication }).(GitlabApiAuthenticationPtrOutput)
}

// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
func (o GitlabOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Gitlab) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// Credentials to use for the connection.
func (o GitlabOutput) Credentials() GitlabCredentialsOutput {
	return o.ApplyT(func(v *Gitlab) GitlabCredentialsOutput { return v.Credentials }).(GitlabCredentialsOutput)
}

// Connect using only the delegates which have these tags.
func (o GitlabOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Gitlab) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o GitlabOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gitlab) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o GitlabOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Gitlab) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o GitlabOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gitlab) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o GitlabOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gitlab) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o GitlabOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gitlab) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o GitlabOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Gitlab) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the gitlab repository or account.
func (o GitlabOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Gitlab) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Repository to test the connection with. This is only used when `connectionType` is `Account`.
func (o GitlabOutput) ValidationRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gitlab) pulumi.StringPtrOutput { return v.ValidationRepo }).(pulumi.StringPtrOutput)
}

type GitlabArrayOutput struct{ *pulumi.OutputState }

func (GitlabArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gitlab)(nil)).Elem()
}

func (o GitlabArrayOutput) ToGitlabArrayOutput() GitlabArrayOutput {
	return o
}

func (o GitlabArrayOutput) ToGitlabArrayOutputWithContext(ctx context.Context) GitlabArrayOutput {
	return o
}

func (o GitlabArrayOutput) Index(i pulumi.IntInput) GitlabOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gitlab {
		return vs[0].([]*Gitlab)[vs[1].(int)]
	}).(GitlabOutput)
}

type GitlabMapOutput struct{ *pulumi.OutputState }

func (GitlabMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gitlab)(nil)).Elem()
}

func (o GitlabMapOutput) ToGitlabMapOutput() GitlabMapOutput {
	return o
}

func (o GitlabMapOutput) ToGitlabMapOutputWithContext(ctx context.Context) GitlabMapOutput {
	return o
}

func (o GitlabMapOutput) MapIndex(k pulumi.StringInput) GitlabOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gitlab {
		return vs[0].(map[string]*Gitlab)[vs[1].(string)]
	}).(GitlabOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitlabInput)(nil)).Elem(), &Gitlab{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitlabArrayInput)(nil)).Elem(), GitlabArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitlabMapInput)(nil)).Elem(), GitlabMap{})
	pulumi.RegisterOutputType(GitlabOutput{})
	pulumi.RegisterOutputType(GitlabArrayOutput{})
	pulumi.RegisterOutputType(GitlabMapOutput{})
}
