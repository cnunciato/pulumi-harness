// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Github connector.
type Github struct {
	pulumi.CustomResourceState

	// Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication GithubApiAuthenticationPtrOutput `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials GithubCredentialsOutput `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Url of the Githubhub repository or account.
	Url pulumi.StringOutput `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrOutput `pulumi:"validationRepo"`
}

// NewGithub registers a new resource with the given unique name, arguments, and options.
func NewGithub(ctx *pulumi.Context,
	name string, args *GithubArgs, opts ...pulumi.ResourceOption) (*Github, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionType'")
	}
	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource Github
	err := ctx.RegisterResource("harness:PlatformConnector/github:Github", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGithub gets an existing Github resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGithub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GithubState, opts ...pulumi.ResourceOption) (*Github, error) {
	var resource Github
	err := ctx.ReadResource("harness:PlatformConnector/github:Github", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Github resources.
type githubState struct {
	// Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication *GithubApiAuthentication `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.
	ConnectionType *string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials *GithubCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the Githubhub repository or account.
	Url *string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

type GithubState struct {
	// Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication GithubApiAuthenticationPtrInput
	// Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.
	ConnectionType pulumi.StringPtrInput
	// Credentials to use for the connection.
	Credentials GithubCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the Githubhub repository or account.
	Url pulumi.StringPtrInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (GithubState) ElementType() reflect.Type {
	return reflect.TypeOf((*githubState)(nil)).Elem()
}

type githubArgs struct {
	// Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication *GithubApiAuthentication `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.
	ConnectionType string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials GithubCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the Githubhub repository or account.
	Url string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

// The set of arguments for constructing a Github resource.
type GithubArgs struct {
	// Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication GithubApiAuthenticationPtrInput
	// Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.
	ConnectionType pulumi.StringInput
	// Credentials to use for the connection.
	Credentials GithubCredentialsInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the Githubhub repository or account.
	Url pulumi.StringInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (GithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*githubArgs)(nil)).Elem()
}

type GithubInput interface {
	pulumi.Input

	ToGithubOutput() GithubOutput
	ToGithubOutputWithContext(ctx context.Context) GithubOutput
}

func (*Github) ElementType() reflect.Type {
	return reflect.TypeOf((**Github)(nil)).Elem()
}

func (i *Github) ToGithubOutput() GithubOutput {
	return i.ToGithubOutputWithContext(context.Background())
}

func (i *Github) ToGithubOutputWithContext(ctx context.Context) GithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubOutput)
}

// GithubArrayInput is an input type that accepts GithubArray and GithubArrayOutput values.
// You can construct a concrete instance of `GithubArrayInput` via:
//
//	GithubArray{ GithubArgs{...} }
type GithubArrayInput interface {
	pulumi.Input

	ToGithubArrayOutput() GithubArrayOutput
	ToGithubArrayOutputWithContext(context.Context) GithubArrayOutput
}

type GithubArray []GithubInput

func (GithubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Github)(nil)).Elem()
}

func (i GithubArray) ToGithubArrayOutput() GithubArrayOutput {
	return i.ToGithubArrayOutputWithContext(context.Background())
}

func (i GithubArray) ToGithubArrayOutputWithContext(ctx context.Context) GithubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubArrayOutput)
}

// GithubMapInput is an input type that accepts GithubMap and GithubMapOutput values.
// You can construct a concrete instance of `GithubMapInput` via:
//
//	GithubMap{ "key": GithubArgs{...} }
type GithubMapInput interface {
	pulumi.Input

	ToGithubMapOutput() GithubMapOutput
	ToGithubMapOutputWithContext(context.Context) GithubMapOutput
}

type GithubMap map[string]GithubInput

func (GithubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Github)(nil)).Elem()
}

func (i GithubMap) ToGithubMapOutput() GithubMapOutput {
	return i.ToGithubMapOutputWithContext(context.Background())
}

func (i GithubMap) ToGithubMapOutputWithContext(ctx context.Context) GithubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubMapOutput)
}

type GithubOutput struct{ *pulumi.OutputState }

func (GithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Github)(nil)).Elem()
}

func (o GithubOutput) ToGithubOutput() GithubOutput {
	return o
}

func (o GithubOutput) ToGithubOutputWithContext(ctx context.Context) GithubOutput {
	return o
}

// Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
func (o GithubOutput) ApiAuthentication() GithubApiAuthenticationPtrOutput {
	return o.ApplyT(func(v *Github) GithubApiAuthenticationPtrOutput { return v.ApiAuthentication }).(GithubApiAuthenticationPtrOutput)
}

// Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.
func (o GithubOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Github) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// Credentials to use for the connection.
func (o GithubOutput) Credentials() GithubCredentialsOutput {
	return o.ApplyT(func(v *Github) GithubCredentialsOutput { return v.Credentials }).(GithubCredentialsOutput)
}

// Connect using only the delegates which have these tags.
func (o GithubOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Github) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o GithubOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Github) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o GithubOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Github) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o GithubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Github) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o GithubOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Github) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o GithubOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Github) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o GithubOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Github) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the Githubhub repository or account.
func (o GithubOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Github) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Repository to test the connection with. This is only used when `connectionType` is `Account`.
func (o GithubOutput) ValidationRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Github) pulumi.StringPtrOutput { return v.ValidationRepo }).(pulumi.StringPtrOutput)
}

type GithubArrayOutput struct{ *pulumi.OutputState }

func (GithubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Github)(nil)).Elem()
}

func (o GithubArrayOutput) ToGithubArrayOutput() GithubArrayOutput {
	return o
}

func (o GithubArrayOutput) ToGithubArrayOutputWithContext(ctx context.Context) GithubArrayOutput {
	return o
}

func (o GithubArrayOutput) Index(i pulumi.IntInput) GithubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Github {
		return vs[0].([]*Github)[vs[1].(int)]
	}).(GithubOutput)
}

type GithubMapOutput struct{ *pulumi.OutputState }

func (GithubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Github)(nil)).Elem()
}

func (o GithubMapOutput) ToGithubMapOutput() GithubMapOutput {
	return o
}

func (o GithubMapOutput) ToGithubMapOutputWithContext(ctx context.Context) GithubMapOutput {
	return o
}

func (o GithubMapOutput) MapIndex(k pulumi.StringInput) GithubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Github {
		return vs[0].(map[string]*Github)[vs[1].(string)]
	}).(GithubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GithubInput)(nil)).Elem(), &Github{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubArrayInput)(nil)).Elem(), GithubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubMapInput)(nil)).Elem(), GithubMap{})
	pulumi.RegisterOutputType(GithubOutput{})
	pulumi.RegisterOutputType(GithubArrayOutput{})
	pulumi.RegisterOutputType(GithubMapOutput{})
}
