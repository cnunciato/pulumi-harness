// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Github connector.
func LookupGithub(ctx *pulumi.Context, args *LookupGithubArgs, opts ...pulumi.InvokeOption) (*LookupGithubResult, error) {
	var rv LookupGithubResult
	err := ctx.Invoke("harness:PlatformConnector/getGithub:getGithub", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGithub.
type LookupGithubArgs struct {
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getGithub.
type LookupGithubResult struct {
	// Configuration for using the github api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentications []GetGithubApiAuthentication `pulumi:"apiAuthentications"`
	// Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.
	ConnectionType string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials []GetGithubCredential `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the github repository or account.
	Url string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo string `pulumi:"validationRepo"`
}

func LookupGithubOutput(ctx *pulumi.Context, args LookupGithubOutputArgs, opts ...pulumi.InvokeOption) LookupGithubResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGithubResult, error) {
			args := v.(LookupGithubArgs)
			r, err := LookupGithub(ctx, &args, opts...)
			var s LookupGithubResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGithubResultOutput)
}

// A collection of arguments for invoking getGithub.
type LookupGithubOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupGithubOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGithubArgs)(nil)).Elem()
}

// A collection of values returned by getGithub.
type LookupGithubResultOutput struct{ *pulumi.OutputState }

func (LookupGithubResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGithubResult)(nil)).Elem()
}

func (o LookupGithubResultOutput) ToLookupGithubResultOutput() LookupGithubResultOutput {
	return o
}

func (o LookupGithubResultOutput) ToLookupGithubResultOutputWithContext(ctx context.Context) LookupGithubResultOutput {
	return o
}

// Configuration for using the github api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
func (o LookupGithubResultOutput) ApiAuthentications() GetGithubApiAuthenticationArrayOutput {
	return o.ApplyT(func(v LookupGithubResult) []GetGithubApiAuthentication { return v.ApiAuthentications }).(GetGithubApiAuthenticationArrayOutput)
}

// Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.
func (o LookupGithubResultOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGithubResult) string { return v.ConnectionType }).(pulumi.StringOutput)
}

// Credentials to use for the connection.
func (o LookupGithubResultOutput) Credentials() GetGithubCredentialArrayOutput {
	return o.ApplyT(func(v LookupGithubResult) []GetGithubCredential { return v.Credentials }).(GetGithubCredentialArrayOutput)
}

// Connect using only the delegates which have these tags.
func (o LookupGithubResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGithubResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupGithubResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGithubResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGithubResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGithubResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupGithubResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGithubResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o LookupGithubResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGithubResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupGithubResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGithubResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupGithubResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGithubResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o LookupGithubResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGithubResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the github repository or account.
func (o LookupGithubResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGithubResult) string { return v.Url }).(pulumi.StringOutput)
}

// Repository to test the connection with. This is only used when `connectionType` is `Account`.
func (o LookupGithubResultOutput) ValidationRepo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGithubResult) string { return v.ValidationRepo }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGithubResultOutput{})
}
