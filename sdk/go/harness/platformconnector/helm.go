// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Helm connector.
type Helm struct {
	pulumi.CustomResourceState

	// Credentials to use for authentication.
	Credentials HelmCredentialsPtrOutput `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the helm server.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewHelm registers a new resource with the given unique name, arguments, and options.
func NewHelm(ctx *pulumi.Context,
	name string, args *HelmArgs, opts ...pulumi.ResourceOption) (*Helm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Helm
	err := ctx.RegisterResource("harness:PlatformConnector/helm:Helm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelm gets an existing Helm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmState, opts ...pulumi.ResourceOption) (*Helm, error) {
	var resource Helm
	err := ctx.ReadResource("harness:PlatformConnector/helm:Helm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Helm resources.
type helmState struct {
	// Credentials to use for authentication.
	Credentials *HelmCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// URL of the helm server.
	Url *string `pulumi:"url"`
}

type HelmState struct {
	// Credentials to use for authentication.
	Credentials HelmCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// URL of the helm server.
	Url pulumi.StringPtrInput
}

func (HelmState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmState)(nil)).Elem()
}

type helmArgs struct {
	// Credentials to use for authentication.
	Credentials *HelmCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// URL of the helm server.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Helm resource.
type HelmArgs struct {
	// Credentials to use for authentication.
	Credentials HelmCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// URL of the helm server.
	Url pulumi.StringInput
}

func (HelmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmArgs)(nil)).Elem()
}

type HelmInput interface {
	pulumi.Input

	ToHelmOutput() HelmOutput
	ToHelmOutputWithContext(ctx context.Context) HelmOutput
}

func (*Helm) ElementType() reflect.Type {
	return reflect.TypeOf((**Helm)(nil)).Elem()
}

func (i *Helm) ToHelmOutput() HelmOutput {
	return i.ToHelmOutputWithContext(context.Background())
}

func (i *Helm) ToHelmOutputWithContext(ctx context.Context) HelmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmOutput)
}

// HelmArrayInput is an input type that accepts HelmArray and HelmArrayOutput values.
// You can construct a concrete instance of `HelmArrayInput` via:
//
//	HelmArray{ HelmArgs{...} }
type HelmArrayInput interface {
	pulumi.Input

	ToHelmArrayOutput() HelmArrayOutput
	ToHelmArrayOutputWithContext(context.Context) HelmArrayOutput
}

type HelmArray []HelmInput

func (HelmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Helm)(nil)).Elem()
}

func (i HelmArray) ToHelmArrayOutput() HelmArrayOutput {
	return i.ToHelmArrayOutputWithContext(context.Background())
}

func (i HelmArray) ToHelmArrayOutputWithContext(ctx context.Context) HelmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmArrayOutput)
}

// HelmMapInput is an input type that accepts HelmMap and HelmMapOutput values.
// You can construct a concrete instance of `HelmMapInput` via:
//
//	HelmMap{ "key": HelmArgs{...} }
type HelmMapInput interface {
	pulumi.Input

	ToHelmMapOutput() HelmMapOutput
	ToHelmMapOutputWithContext(context.Context) HelmMapOutput
}

type HelmMap map[string]HelmInput

func (HelmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Helm)(nil)).Elem()
}

func (i HelmMap) ToHelmMapOutput() HelmMapOutput {
	return i.ToHelmMapOutputWithContext(context.Background())
}

func (i HelmMap) ToHelmMapOutputWithContext(ctx context.Context) HelmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmMapOutput)
}

type HelmOutput struct{ *pulumi.OutputState }

func (HelmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Helm)(nil)).Elem()
}

func (o HelmOutput) ToHelmOutput() HelmOutput {
	return o
}

func (o HelmOutput) ToHelmOutputWithContext(ctx context.Context) HelmOutput {
	return o
}

// Credentials to use for authentication.
func (o HelmOutput) Credentials() HelmCredentialsPtrOutput {
	return o.ApplyT(func(v *Helm) HelmCredentialsPtrOutput { return v.Credentials }).(HelmCredentialsPtrOutput)
}

// Connect using only the delegates which have these tags.
func (o HelmOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Helm) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o HelmOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Helm) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o HelmOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Helm) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o HelmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Helm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o HelmOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Helm) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o HelmOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Helm) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o HelmOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Helm) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the helm server.
func (o HelmOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Helm) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type HelmArrayOutput struct{ *pulumi.OutputState }

func (HelmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Helm)(nil)).Elem()
}

func (o HelmArrayOutput) ToHelmArrayOutput() HelmArrayOutput {
	return o
}

func (o HelmArrayOutput) ToHelmArrayOutputWithContext(ctx context.Context) HelmArrayOutput {
	return o
}

func (o HelmArrayOutput) Index(i pulumi.IntInput) HelmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Helm {
		return vs[0].([]*Helm)[vs[1].(int)]
	}).(HelmOutput)
}

type HelmMapOutput struct{ *pulumi.OutputState }

func (HelmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Helm)(nil)).Elem()
}

func (o HelmMapOutput) ToHelmMapOutput() HelmMapOutput {
	return o
}

func (o HelmMapOutput) ToHelmMapOutputWithContext(ctx context.Context) HelmMapOutput {
	return o
}

func (o HelmMapOutput) MapIndex(k pulumi.StringInput) HelmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Helm {
		return vs[0].(map[string]*Helm)[vs[1].(string)]
	}).(HelmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmInput)(nil)).Elem(), &Helm{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmArrayInput)(nil)).Elem(), HelmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmMapInput)(nil)).Elem(), HelmMap{})
	pulumi.RegisterOutputType(HelmOutput{})
	pulumi.RegisterOutputType(HelmArrayOutput{})
	pulumi.RegisterOutputType(HelmMapOutput{})
}
