// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an Artifactory connector.
type Artifactory struct {
	pulumi.CustomResourceState

	// Credentials to use for authentication.
	Credentials ArtifactoryCredentialsPtrOutput `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// URL of the Artifactory server.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewArtifactory registers a new resource with the given unique name, arguments, and options.
func NewArtifactory(ctx *pulumi.Context,
	name string, args *ArtifactoryArgs, opts ...pulumi.ResourceOption) (*Artifactory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource Artifactory
	err := ctx.RegisterResource("harness:PlatformConnector/artifactory:Artifactory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifactory gets an existing Artifactory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifactory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactoryState, opts ...pulumi.ResourceOption) (*Artifactory, error) {
	var resource Artifactory
	err := ctx.ReadResource("harness:PlatformConnector/artifactory:Artifactory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Artifactory resources.
type artifactoryState struct {
	// Credentials to use for authentication.
	Credentials *ArtifactoryCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// URL of the Artifactory server.
	Url *string `pulumi:"url"`
}

type ArtifactoryState struct {
	// Credentials to use for authentication.
	Credentials ArtifactoryCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// URL of the Artifactory server.
	Url pulumi.StringPtrInput
}

func (ArtifactoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactoryState)(nil)).Elem()
}

type artifactoryArgs struct {
	// Credentials to use for authentication.
	Credentials *ArtifactoryCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// URL of the Artifactory server.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Artifactory resource.
type ArtifactoryArgs struct {
	// Credentials to use for authentication.
	Credentials ArtifactoryCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// URL of the Artifactory server.
	Url pulumi.StringInput
}

func (ArtifactoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactoryArgs)(nil)).Elem()
}

type ArtifactoryInput interface {
	pulumi.Input

	ToArtifactoryOutput() ArtifactoryOutput
	ToArtifactoryOutputWithContext(ctx context.Context) ArtifactoryOutput
}

func (*Artifactory) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifactory)(nil)).Elem()
}

func (i *Artifactory) ToArtifactoryOutput() ArtifactoryOutput {
	return i.ToArtifactoryOutputWithContext(context.Background())
}

func (i *Artifactory) ToArtifactoryOutputWithContext(ctx context.Context) ArtifactoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactoryOutput)
}

// ArtifactoryArrayInput is an input type that accepts ArtifactoryArray and ArtifactoryArrayOutput values.
// You can construct a concrete instance of `ArtifactoryArrayInput` via:
//
//	ArtifactoryArray{ ArtifactoryArgs{...} }
type ArtifactoryArrayInput interface {
	pulumi.Input

	ToArtifactoryArrayOutput() ArtifactoryArrayOutput
	ToArtifactoryArrayOutputWithContext(context.Context) ArtifactoryArrayOutput
}

type ArtifactoryArray []ArtifactoryInput

func (ArtifactoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Artifactory)(nil)).Elem()
}

func (i ArtifactoryArray) ToArtifactoryArrayOutput() ArtifactoryArrayOutput {
	return i.ToArtifactoryArrayOutputWithContext(context.Background())
}

func (i ArtifactoryArray) ToArtifactoryArrayOutputWithContext(ctx context.Context) ArtifactoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactoryArrayOutput)
}

// ArtifactoryMapInput is an input type that accepts ArtifactoryMap and ArtifactoryMapOutput values.
// You can construct a concrete instance of `ArtifactoryMapInput` via:
//
//	ArtifactoryMap{ "key": ArtifactoryArgs{...} }
type ArtifactoryMapInput interface {
	pulumi.Input

	ToArtifactoryMapOutput() ArtifactoryMapOutput
	ToArtifactoryMapOutputWithContext(context.Context) ArtifactoryMapOutput
}

type ArtifactoryMap map[string]ArtifactoryInput

func (ArtifactoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Artifactory)(nil)).Elem()
}

func (i ArtifactoryMap) ToArtifactoryMapOutput() ArtifactoryMapOutput {
	return i.ToArtifactoryMapOutputWithContext(context.Background())
}

func (i ArtifactoryMap) ToArtifactoryMapOutputWithContext(ctx context.Context) ArtifactoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactoryMapOutput)
}

type ArtifactoryOutput struct{ *pulumi.OutputState }

func (ArtifactoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifactory)(nil)).Elem()
}

func (o ArtifactoryOutput) ToArtifactoryOutput() ArtifactoryOutput {
	return o
}

func (o ArtifactoryOutput) ToArtifactoryOutputWithContext(ctx context.Context) ArtifactoryOutput {
	return o
}

// Credentials to use for authentication.
func (o ArtifactoryOutput) Credentials() ArtifactoryCredentialsPtrOutput {
	return o.ApplyT(func(v *Artifactory) ArtifactoryCredentialsPtrOutput { return v.Credentials }).(ArtifactoryCredentialsPtrOutput)
}

// Connect using only the delegates which have these tags.
func (o ArtifactoryOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Artifactory) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o ArtifactoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Artifactory) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o ArtifactoryOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifactory) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o ArtifactoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifactory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o ArtifactoryOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Artifactory) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o ArtifactoryOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Artifactory) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o ArtifactoryOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Artifactory) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// URL of the Artifactory server.
func (o ArtifactoryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifactory) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ArtifactoryArrayOutput struct{ *pulumi.OutputState }

func (ArtifactoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Artifactory)(nil)).Elem()
}

func (o ArtifactoryArrayOutput) ToArtifactoryArrayOutput() ArtifactoryArrayOutput {
	return o
}

func (o ArtifactoryArrayOutput) ToArtifactoryArrayOutputWithContext(ctx context.Context) ArtifactoryArrayOutput {
	return o
}

func (o ArtifactoryArrayOutput) Index(i pulumi.IntInput) ArtifactoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Artifactory {
		return vs[0].([]*Artifactory)[vs[1].(int)]
	}).(ArtifactoryOutput)
}

type ArtifactoryMapOutput struct{ *pulumi.OutputState }

func (ArtifactoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Artifactory)(nil)).Elem()
}

func (o ArtifactoryMapOutput) ToArtifactoryMapOutput() ArtifactoryMapOutput {
	return o
}

func (o ArtifactoryMapOutput) ToArtifactoryMapOutputWithContext(ctx context.Context) ArtifactoryMapOutput {
	return o
}

func (o ArtifactoryMapOutput) MapIndex(k pulumi.StringInput) ArtifactoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Artifactory {
		return vs[0].(map[string]*Artifactory)[vs[1].(string)]
	}).(ArtifactoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactoryInput)(nil)).Elem(), &Artifactory{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactoryArrayInput)(nil)).Elem(), ArtifactoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactoryMapInput)(nil)).Elem(), ArtifactoryMap{})
	pulumi.RegisterOutputType(ArtifactoryOutput{})
	pulumi.RegisterOutputType(ArtifactoryArrayOutput{})
	pulumi.RegisterOutputType(ArtifactoryMapOutput{})
}
