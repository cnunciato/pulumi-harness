// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a PagerDuty connector.
type Pagerduty struct {
	pulumi.CustomResourceState

	// Reference to the Harness secret containing the api token.
	ApiTokenRef pulumi.StringOutput `pulumi:"apiTokenRef"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewPagerduty registers a new resource with the given unique name, arguments, and options.
func NewPagerduty(ctx *pulumi.Context,
	name string, args *PagerdutyArgs, opts ...pulumi.ResourceOption) (*Pagerduty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiTokenRef == nil {
		return nil, errors.New("invalid value for required argument 'ApiTokenRef'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Pagerduty
	err := ctx.RegisterResource("harness:PlatformConnector/pagerduty:Pagerduty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPagerduty gets an existing Pagerduty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPagerduty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PagerdutyState, opts ...pulumi.ResourceOption) (*Pagerduty, error) {
	var resource Pagerduty
	err := ctx.ReadResource("harness:PlatformConnector/pagerduty:Pagerduty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pagerduty resources.
type pagerdutyState struct {
	// Reference to the Harness secret containing the api token.
	ApiTokenRef *string `pulumi:"apiTokenRef"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

type PagerdutyState struct {
	// Reference to the Harness secret containing the api token.
	ApiTokenRef pulumi.StringPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
}

func (PagerdutyState) ElementType() reflect.Type {
	return reflect.TypeOf((*pagerdutyState)(nil)).Elem()
}

type pagerdutyArgs struct {
	// Reference to the Harness secret containing the api token.
	ApiTokenRef string `pulumi:"apiTokenRef"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Pagerduty resource.
type PagerdutyArgs struct {
	// Reference to the Harness secret containing the api token.
	ApiTokenRef pulumi.StringInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
}

func (PagerdutyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pagerdutyArgs)(nil)).Elem()
}

type PagerdutyInput interface {
	pulumi.Input

	ToPagerdutyOutput() PagerdutyOutput
	ToPagerdutyOutputWithContext(ctx context.Context) PagerdutyOutput
}

func (*Pagerduty) ElementType() reflect.Type {
	return reflect.TypeOf((**Pagerduty)(nil)).Elem()
}

func (i *Pagerduty) ToPagerdutyOutput() PagerdutyOutput {
	return i.ToPagerdutyOutputWithContext(context.Background())
}

func (i *Pagerduty) ToPagerdutyOutputWithContext(ctx context.Context) PagerdutyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagerdutyOutput)
}

// PagerdutyArrayInput is an input type that accepts PagerdutyArray and PagerdutyArrayOutput values.
// You can construct a concrete instance of `PagerdutyArrayInput` via:
//
//	PagerdutyArray{ PagerdutyArgs{...} }
type PagerdutyArrayInput interface {
	pulumi.Input

	ToPagerdutyArrayOutput() PagerdutyArrayOutput
	ToPagerdutyArrayOutputWithContext(context.Context) PagerdutyArrayOutput
}

type PagerdutyArray []PagerdutyInput

func (PagerdutyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pagerduty)(nil)).Elem()
}

func (i PagerdutyArray) ToPagerdutyArrayOutput() PagerdutyArrayOutput {
	return i.ToPagerdutyArrayOutputWithContext(context.Background())
}

func (i PagerdutyArray) ToPagerdutyArrayOutputWithContext(ctx context.Context) PagerdutyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagerdutyArrayOutput)
}

// PagerdutyMapInput is an input type that accepts PagerdutyMap and PagerdutyMapOutput values.
// You can construct a concrete instance of `PagerdutyMapInput` via:
//
//	PagerdutyMap{ "key": PagerdutyArgs{...} }
type PagerdutyMapInput interface {
	pulumi.Input

	ToPagerdutyMapOutput() PagerdutyMapOutput
	ToPagerdutyMapOutputWithContext(context.Context) PagerdutyMapOutput
}

type PagerdutyMap map[string]PagerdutyInput

func (PagerdutyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pagerduty)(nil)).Elem()
}

func (i PagerdutyMap) ToPagerdutyMapOutput() PagerdutyMapOutput {
	return i.ToPagerdutyMapOutputWithContext(context.Background())
}

func (i PagerdutyMap) ToPagerdutyMapOutputWithContext(ctx context.Context) PagerdutyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagerdutyMapOutput)
}

type PagerdutyOutput struct{ *pulumi.OutputState }

func (PagerdutyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pagerduty)(nil)).Elem()
}

func (o PagerdutyOutput) ToPagerdutyOutput() PagerdutyOutput {
	return o
}

func (o PagerdutyOutput) ToPagerdutyOutputWithContext(ctx context.Context) PagerdutyOutput {
	return o
}

// Reference to the Harness secret containing the api token.
func (o PagerdutyOutput) ApiTokenRef() pulumi.StringOutput {
	return o.ApplyT(func(v *Pagerduty) pulumi.StringOutput { return v.ApiTokenRef }).(pulumi.StringOutput)
}

// Connect using only the delegates which have these tags.
func (o PagerdutyOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Pagerduty) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o PagerdutyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pagerduty) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o PagerdutyOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Pagerduty) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o PagerdutyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pagerduty) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o PagerdutyOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pagerduty) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o PagerdutyOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pagerduty) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o PagerdutyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Pagerduty) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type PagerdutyArrayOutput struct{ *pulumi.OutputState }

func (PagerdutyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pagerduty)(nil)).Elem()
}

func (o PagerdutyArrayOutput) ToPagerdutyArrayOutput() PagerdutyArrayOutput {
	return o
}

func (o PagerdutyArrayOutput) ToPagerdutyArrayOutputWithContext(ctx context.Context) PagerdutyArrayOutput {
	return o
}

func (o PagerdutyArrayOutput) Index(i pulumi.IntInput) PagerdutyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pagerduty {
		return vs[0].([]*Pagerduty)[vs[1].(int)]
	}).(PagerdutyOutput)
}

type PagerdutyMapOutput struct{ *pulumi.OutputState }

func (PagerdutyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pagerduty)(nil)).Elem()
}

func (o PagerdutyMapOutput) ToPagerdutyMapOutput() PagerdutyMapOutput {
	return o
}

func (o PagerdutyMapOutput) ToPagerdutyMapOutputWithContext(ctx context.Context) PagerdutyMapOutput {
	return o
}

func (o PagerdutyMapOutput) MapIndex(k pulumi.StringInput) PagerdutyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pagerduty {
		return vs[0].(map[string]*Pagerduty)[vs[1].(string)]
	}).(PagerdutyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PagerdutyInput)(nil)).Elem(), &Pagerduty{})
	pulumi.RegisterInputType(reflect.TypeOf((*PagerdutyArrayInput)(nil)).Elem(), PagerdutyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PagerdutyMapInput)(nil)).Elem(), PagerdutyMap{})
	pulumi.RegisterOutputType(PagerdutyOutput{})
	pulumi.RegisterOutputType(PagerdutyArrayOutput{})
	pulumi.RegisterOutputType(PagerdutyMapOutput{})
}
