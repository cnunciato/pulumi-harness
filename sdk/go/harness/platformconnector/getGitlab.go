// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Gitlab connector.
func LookupGitlab(ctx *pulumi.Context, args *LookupGitlabArgs, opts ...pulumi.InvokeOption) (*LookupGitlabResult, error) {
	var rv LookupGitlabResult
	err := ctx.Invoke("harness:PlatformConnector/getGitlab:getGitlab", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitlab.
type LookupGitlabArgs struct {
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getGitlab.
type LookupGitlabResult struct {
	// Configuration for using the gitlab api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentications []GetGitlabApiAuthentication `pulumi:"apiAuthentications"`
	// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
	ConnectionType string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials []GetGitlabCredential `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the gitlab repository or account.
	Url string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo string `pulumi:"validationRepo"`
}

func LookupGitlabOutput(ctx *pulumi.Context, args LookupGitlabOutputArgs, opts ...pulumi.InvokeOption) LookupGitlabResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGitlabResult, error) {
			args := v.(LookupGitlabArgs)
			r, err := LookupGitlab(ctx, &args, opts...)
			var s LookupGitlabResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGitlabResultOutput)
}

// A collection of arguments for invoking getGitlab.
type LookupGitlabOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupGitlabOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitlabArgs)(nil)).Elem()
}

// A collection of values returned by getGitlab.
type LookupGitlabResultOutput struct{ *pulumi.OutputState }

func (LookupGitlabResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitlabResult)(nil)).Elem()
}

func (o LookupGitlabResultOutput) ToLookupGitlabResultOutput() LookupGitlabResultOutput {
	return o
}

func (o LookupGitlabResultOutput) ToLookupGitlabResultOutputWithContext(ctx context.Context) LookupGitlabResultOutput {
	return o
}

// Configuration for using the gitlab api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
func (o LookupGitlabResultOutput) ApiAuthentications() GetGitlabApiAuthenticationArrayOutput {
	return o.ApplyT(func(v LookupGitlabResult) []GetGitlabApiAuthentication { return v.ApiAuthentications }).(GetGitlabApiAuthenticationArrayOutput)
}

// Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.
func (o LookupGitlabResultOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitlabResult) string { return v.ConnectionType }).(pulumi.StringOutput)
}

// Credentials to use for the connection.
func (o LookupGitlabResultOutput) Credentials() GetGitlabCredentialArrayOutput {
	return o.ApplyT(func(v LookupGitlabResult) []GetGitlabCredential { return v.Credentials }).(GetGitlabCredentialArrayOutput)
}

// Connect using only the delegates which have these tags.
func (o LookupGitlabResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGitlabResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupGitlabResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitlabResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGitlabResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitlabResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupGitlabResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitlabResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o LookupGitlabResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitlabResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupGitlabResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitlabResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupGitlabResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitlabResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o LookupGitlabResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGitlabResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the gitlab repository or account.
func (o LookupGitlabResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitlabResult) string { return v.Url }).(pulumi.StringOutput)
}

// Repository to test the connection with. This is only used when `connectionType` is `Account`.
func (o LookupGitlabResultOutput) ValidationRepo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitlabResult) string { return v.ValidationRepo }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitlabResultOutput{})
}
