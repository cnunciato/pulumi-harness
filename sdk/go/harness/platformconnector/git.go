// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Git connector.
type Git struct {
	pulumi.CustomResourceState

	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials GitCredentialsOutput `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Url of the git repository or account.
	Url pulumi.StringOutput `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrOutput `pulumi:"validationRepo"`
}

// NewGit registers a new resource with the given unique name, arguments, and options.
func NewGit(ctx *pulumi.Context,
	name string, args *GitArgs, opts ...pulumi.ResourceOption) (*Git, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionType'")
	}
	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Git
	err := ctx.RegisterResource("harness:PlatformConnector/git:Git", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGit gets an existing Git resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitState, opts ...pulumi.ResourceOption) (*Git, error) {
	var resource Git
	err := ctx.ReadResource("harness:PlatformConnector/git:Git", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Git resources.
type gitState struct {
	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType *string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials *GitCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the git repository or account.
	Url *string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

type GitState struct {
	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType pulumi.StringPtrInput
	// Credentials to use for the connection.
	Credentials GitCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the git repository or account.
	Url pulumi.StringPtrInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (GitState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitState)(nil)).Elem()
}

type gitArgs struct {
	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials GitCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the git repository or account.
	Url string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

// The set of arguments for constructing a Git resource.
type GitArgs struct {
	// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
	ConnectionType pulumi.StringInput
	// Credentials to use for the connection.
	Credentials GitCredentialsInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the git repository or account.
	Url pulumi.StringInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (GitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitArgs)(nil)).Elem()
}

type GitInput interface {
	pulumi.Input

	ToGitOutput() GitOutput
	ToGitOutputWithContext(ctx context.Context) GitOutput
}

func (*Git) ElementType() reflect.Type {
	return reflect.TypeOf((**Git)(nil)).Elem()
}

func (i *Git) ToGitOutput() GitOutput {
	return i.ToGitOutputWithContext(context.Background())
}

func (i *Git) ToGitOutputWithContext(ctx context.Context) GitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOutput)
}

// GitArrayInput is an input type that accepts GitArray and GitArrayOutput values.
// You can construct a concrete instance of `GitArrayInput` via:
//
//	GitArray{ GitArgs{...} }
type GitArrayInput interface {
	pulumi.Input

	ToGitArrayOutput() GitArrayOutput
	ToGitArrayOutputWithContext(context.Context) GitArrayOutput
}

type GitArray []GitInput

func (GitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Git)(nil)).Elem()
}

func (i GitArray) ToGitArrayOutput() GitArrayOutput {
	return i.ToGitArrayOutputWithContext(context.Background())
}

func (i GitArray) ToGitArrayOutputWithContext(ctx context.Context) GitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitArrayOutput)
}

// GitMapInput is an input type that accepts GitMap and GitMapOutput values.
// You can construct a concrete instance of `GitMapInput` via:
//
//	GitMap{ "key": GitArgs{...} }
type GitMapInput interface {
	pulumi.Input

	ToGitMapOutput() GitMapOutput
	ToGitMapOutputWithContext(context.Context) GitMapOutput
}

type GitMap map[string]GitInput

func (GitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Git)(nil)).Elem()
}

func (i GitMap) ToGitMapOutput() GitMapOutput {
	return i.ToGitMapOutputWithContext(context.Background())
}

func (i GitMap) ToGitMapOutputWithContext(ctx context.Context) GitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitMapOutput)
}

type GitOutput struct{ *pulumi.OutputState }

func (GitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Git)(nil)).Elem()
}

func (o GitOutput) ToGitOutput() GitOutput {
	return o
}

func (o GitOutput) ToGitOutputWithContext(ctx context.Context) GitOutput {
	return o
}

// Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.
func (o GitOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Git) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// Credentials to use for the connection.
func (o GitOutput) Credentials() GitCredentialsOutput {
	return o.ApplyT(func(v *Git) GitCredentialsOutput { return v.Credentials }).(GitCredentialsOutput)
}

// Connect using only the delegates which have these tags.
func (o GitOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Git) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o GitOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Git) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o GitOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Git) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o GitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Git) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o GitOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Git) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o GitOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Git) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o GitOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Git) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the git repository or account.
func (o GitOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Git) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Repository to test the connection with. This is only used when `connectionType` is `Account`.
func (o GitOutput) ValidationRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Git) pulumi.StringPtrOutput { return v.ValidationRepo }).(pulumi.StringPtrOutput)
}

type GitArrayOutput struct{ *pulumi.OutputState }

func (GitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Git)(nil)).Elem()
}

func (o GitArrayOutput) ToGitArrayOutput() GitArrayOutput {
	return o
}

func (o GitArrayOutput) ToGitArrayOutputWithContext(ctx context.Context) GitArrayOutput {
	return o
}

func (o GitArrayOutput) Index(i pulumi.IntInput) GitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Git {
		return vs[0].([]*Git)[vs[1].(int)]
	}).(GitOutput)
}

type GitMapOutput struct{ *pulumi.OutputState }

func (GitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Git)(nil)).Elem()
}

func (o GitMapOutput) ToGitMapOutput() GitMapOutput {
	return o
}

func (o GitMapOutput) ToGitMapOutputWithContext(ctx context.Context) GitMapOutput {
	return o
}

func (o GitMapOutput) MapIndex(k pulumi.StringInput) GitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Git {
		return vs[0].(map[string]*Git)[vs[1].(string)]
	}).(GitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitInput)(nil)).Elem(), &Git{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitArrayInput)(nil)).Elem(), GitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitMapInput)(nil)).Elem(), GitMap{})
	pulumi.RegisterOutputType(GitOutput{})
	pulumi.RegisterOutputType(GitArrayOutput{})
	pulumi.RegisterOutputType(GitMapOutput{})
}
