// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an App Dynamics connector.
type AppDynamics struct {
	pulumi.CustomResourceState

	// The App Dynamics account name.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// Authenticate to App Dynamics using api token.
	ApiToken AppDynamicsApiTokenPtrOutput `pulumi:"apiToken"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Url of the App Dynamics controller.
	Url pulumi.StringOutput `pulumi:"url"`
	// Authenticate to App Dynamics using username and password.
	UsernamePassword AppDynamicsUsernamePasswordPtrOutput `pulumi:"usernamePassword"`
}

// NewAppDynamics registers a new resource with the given unique name, arguments, and options.
func NewAppDynamics(ctx *pulumi.Context,
	name string, args *AppDynamicsArgs, opts ...pulumi.ResourceOption) (*AppDynamics, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AppDynamics
	err := ctx.RegisterResource("harness:PlatformConnector/appDynamics:AppDynamics", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppDynamics gets an existing AppDynamics resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppDynamics(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppDynamicsState, opts ...pulumi.ResourceOption) (*AppDynamics, error) {
	var resource AppDynamics
	err := ctx.ReadResource("harness:PlatformConnector/appDynamics:AppDynamics", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppDynamics resources.
type appDynamicsState struct {
	// The App Dynamics account name.
	AccountName *string `pulumi:"accountName"`
	// Authenticate to App Dynamics using api token.
	ApiToken *AppDynamicsApiToken `pulumi:"apiToken"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the App Dynamics controller.
	Url *string `pulumi:"url"`
	// Authenticate to App Dynamics using username and password.
	UsernamePassword *AppDynamicsUsernamePassword `pulumi:"usernamePassword"`
}

type AppDynamicsState struct {
	// The App Dynamics account name.
	AccountName pulumi.StringPtrInput
	// Authenticate to App Dynamics using api token.
	ApiToken AppDynamicsApiTokenPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the App Dynamics controller.
	Url pulumi.StringPtrInput
	// Authenticate to App Dynamics using username and password.
	UsernamePassword AppDynamicsUsernamePasswordPtrInput
}

func (AppDynamicsState) ElementType() reflect.Type {
	return reflect.TypeOf((*appDynamicsState)(nil)).Elem()
}

type appDynamicsArgs struct {
	// The App Dynamics account name.
	AccountName string `pulumi:"accountName"`
	// Authenticate to App Dynamics using api token.
	ApiToken *AppDynamicsApiToken `pulumi:"apiToken"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the App Dynamics controller.
	Url string `pulumi:"url"`
	// Authenticate to App Dynamics using username and password.
	UsernamePassword *AppDynamicsUsernamePassword `pulumi:"usernamePassword"`
}

// The set of arguments for constructing a AppDynamics resource.
type AppDynamicsArgs struct {
	// The App Dynamics account name.
	AccountName pulumi.StringInput
	// Authenticate to App Dynamics using api token.
	ApiToken AppDynamicsApiTokenPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the App Dynamics controller.
	Url pulumi.StringInput
	// Authenticate to App Dynamics using username and password.
	UsernamePassword AppDynamicsUsernamePasswordPtrInput
}

func (AppDynamicsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appDynamicsArgs)(nil)).Elem()
}

type AppDynamicsInput interface {
	pulumi.Input

	ToAppDynamicsOutput() AppDynamicsOutput
	ToAppDynamicsOutputWithContext(ctx context.Context) AppDynamicsOutput
}

func (*AppDynamics) ElementType() reflect.Type {
	return reflect.TypeOf((**AppDynamics)(nil)).Elem()
}

func (i *AppDynamics) ToAppDynamicsOutput() AppDynamicsOutput {
	return i.ToAppDynamicsOutputWithContext(context.Background())
}

func (i *AppDynamics) ToAppDynamicsOutputWithContext(ctx context.Context) AppDynamicsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppDynamicsOutput)
}

// AppDynamicsArrayInput is an input type that accepts AppDynamicsArray and AppDynamicsArrayOutput values.
// You can construct a concrete instance of `AppDynamicsArrayInput` via:
//
//	AppDynamicsArray{ AppDynamicsArgs{...} }
type AppDynamicsArrayInput interface {
	pulumi.Input

	ToAppDynamicsArrayOutput() AppDynamicsArrayOutput
	ToAppDynamicsArrayOutputWithContext(context.Context) AppDynamicsArrayOutput
}

type AppDynamicsArray []AppDynamicsInput

func (AppDynamicsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppDynamics)(nil)).Elem()
}

func (i AppDynamicsArray) ToAppDynamicsArrayOutput() AppDynamicsArrayOutput {
	return i.ToAppDynamicsArrayOutputWithContext(context.Background())
}

func (i AppDynamicsArray) ToAppDynamicsArrayOutputWithContext(ctx context.Context) AppDynamicsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppDynamicsArrayOutput)
}

// AppDynamicsMapInput is an input type that accepts AppDynamicsMap and AppDynamicsMapOutput values.
// You can construct a concrete instance of `AppDynamicsMapInput` via:
//
//	AppDynamicsMap{ "key": AppDynamicsArgs{...} }
type AppDynamicsMapInput interface {
	pulumi.Input

	ToAppDynamicsMapOutput() AppDynamicsMapOutput
	ToAppDynamicsMapOutputWithContext(context.Context) AppDynamicsMapOutput
}

type AppDynamicsMap map[string]AppDynamicsInput

func (AppDynamicsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppDynamics)(nil)).Elem()
}

func (i AppDynamicsMap) ToAppDynamicsMapOutput() AppDynamicsMapOutput {
	return i.ToAppDynamicsMapOutputWithContext(context.Background())
}

func (i AppDynamicsMap) ToAppDynamicsMapOutputWithContext(ctx context.Context) AppDynamicsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppDynamicsMapOutput)
}

type AppDynamicsOutput struct{ *pulumi.OutputState }

func (AppDynamicsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppDynamics)(nil)).Elem()
}

func (o AppDynamicsOutput) ToAppDynamicsOutput() AppDynamicsOutput {
	return o
}

func (o AppDynamicsOutput) ToAppDynamicsOutputWithContext(ctx context.Context) AppDynamicsOutput {
	return o
}

// The App Dynamics account name.
func (o AppDynamicsOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *AppDynamics) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// Authenticate to App Dynamics using api token.
func (o AppDynamicsOutput) ApiToken() AppDynamicsApiTokenPtrOutput {
	return o.ApplyT(func(v *AppDynamics) AppDynamicsApiTokenPtrOutput { return v.ApiToken }).(AppDynamicsApiTokenPtrOutput)
}

// Connect using only the delegates which have these tags.
func (o AppDynamicsOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppDynamics) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o AppDynamicsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppDynamics) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o AppDynamicsOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AppDynamics) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o AppDynamicsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppDynamics) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o AppDynamicsOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppDynamics) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o AppDynamicsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppDynamics) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o AppDynamicsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppDynamics) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the App Dynamics controller.
func (o AppDynamicsOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *AppDynamics) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Authenticate to App Dynamics using username and password.
func (o AppDynamicsOutput) UsernamePassword() AppDynamicsUsernamePasswordPtrOutput {
	return o.ApplyT(func(v *AppDynamics) AppDynamicsUsernamePasswordPtrOutput { return v.UsernamePassword }).(AppDynamicsUsernamePasswordPtrOutput)
}

type AppDynamicsArrayOutput struct{ *pulumi.OutputState }

func (AppDynamicsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppDynamics)(nil)).Elem()
}

func (o AppDynamicsArrayOutput) ToAppDynamicsArrayOutput() AppDynamicsArrayOutput {
	return o
}

func (o AppDynamicsArrayOutput) ToAppDynamicsArrayOutputWithContext(ctx context.Context) AppDynamicsArrayOutput {
	return o
}

func (o AppDynamicsArrayOutput) Index(i pulumi.IntInput) AppDynamicsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppDynamics {
		return vs[0].([]*AppDynamics)[vs[1].(int)]
	}).(AppDynamicsOutput)
}

type AppDynamicsMapOutput struct{ *pulumi.OutputState }

func (AppDynamicsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppDynamics)(nil)).Elem()
}

func (o AppDynamicsMapOutput) ToAppDynamicsMapOutput() AppDynamicsMapOutput {
	return o
}

func (o AppDynamicsMapOutput) ToAppDynamicsMapOutputWithContext(ctx context.Context) AppDynamicsMapOutput {
	return o
}

func (o AppDynamicsMapOutput) MapIndex(k pulumi.StringInput) AppDynamicsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppDynamics {
		return vs[0].(map[string]*AppDynamics)[vs[1].(string)]
	}).(AppDynamicsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppDynamicsInput)(nil)).Elem(), &AppDynamics{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppDynamicsArrayInput)(nil)).Elem(), AppDynamicsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppDynamicsMapInput)(nil)).Elem(), AppDynamicsMap{})
	pulumi.RegisterOutputType(AppDynamicsOutput{})
	pulumi.RegisterOutputType(AppDynamicsArrayOutput{})
	pulumi.RegisterOutputType(AppDynamicsMapOutput{})
}
