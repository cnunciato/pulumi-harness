// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a New Relic connector.
type Newrelic struct {
	pulumi.CustomResourceState

	// Account ID of the NewRelic account.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Reference to the Harness secret containing the api key.
	ApiKeyRef pulumi.StringOutput `pulumi:"apiKeyRef"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Url of the NewRelic server.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewNewrelic registers a new resource with the given unique name, arguments, and options.
func NewNewrelic(ctx *pulumi.Context,
	name string, args *NewrelicArgs, opts ...pulumi.ResourceOption) (*Newrelic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.ApiKeyRef == nil {
		return nil, errors.New("invalid value for required argument 'ApiKeyRef'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Newrelic
	err := ctx.RegisterResource("harness:PlatformConnector/newrelic:Newrelic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNewrelic gets an existing Newrelic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNewrelic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NewrelicState, opts ...pulumi.ResourceOption) (*Newrelic, error) {
	var resource Newrelic
	err := ctx.ReadResource("harness:PlatformConnector/newrelic:Newrelic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Newrelic resources.
type newrelicState struct {
	// Account ID of the NewRelic account.
	AccountId *string `pulumi:"accountId"`
	// Reference to the Harness secret containing the api key.
	ApiKeyRef *string `pulumi:"apiKeyRef"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the NewRelic server.
	Url *string `pulumi:"url"`
}

type NewrelicState struct {
	// Account ID of the NewRelic account.
	AccountId pulumi.StringPtrInput
	// Reference to the Harness secret containing the api key.
	ApiKeyRef pulumi.StringPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the NewRelic server.
	Url pulumi.StringPtrInput
}

func (NewrelicState) ElementType() reflect.Type {
	return reflect.TypeOf((*newrelicState)(nil)).Elem()
}

type newrelicArgs struct {
	// Account ID of the NewRelic account.
	AccountId string `pulumi:"accountId"`
	// Reference to the Harness secret containing the api key.
	ApiKeyRef string `pulumi:"apiKeyRef"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the NewRelic server.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Newrelic resource.
type NewrelicArgs struct {
	// Account ID of the NewRelic account.
	AccountId pulumi.StringInput
	// Reference to the Harness secret containing the api key.
	ApiKeyRef pulumi.StringInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the NewRelic server.
	Url pulumi.StringInput
}

func (NewrelicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*newrelicArgs)(nil)).Elem()
}

type NewrelicInput interface {
	pulumi.Input

	ToNewrelicOutput() NewrelicOutput
	ToNewrelicOutputWithContext(ctx context.Context) NewrelicOutput
}

func (*Newrelic) ElementType() reflect.Type {
	return reflect.TypeOf((**Newrelic)(nil)).Elem()
}

func (i *Newrelic) ToNewrelicOutput() NewrelicOutput {
	return i.ToNewrelicOutputWithContext(context.Background())
}

func (i *Newrelic) ToNewrelicOutputWithContext(ctx context.Context) NewrelicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NewrelicOutput)
}

// NewrelicArrayInput is an input type that accepts NewrelicArray and NewrelicArrayOutput values.
// You can construct a concrete instance of `NewrelicArrayInput` via:
//
//	NewrelicArray{ NewrelicArgs{...} }
type NewrelicArrayInput interface {
	pulumi.Input

	ToNewrelicArrayOutput() NewrelicArrayOutput
	ToNewrelicArrayOutputWithContext(context.Context) NewrelicArrayOutput
}

type NewrelicArray []NewrelicInput

func (NewrelicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Newrelic)(nil)).Elem()
}

func (i NewrelicArray) ToNewrelicArrayOutput() NewrelicArrayOutput {
	return i.ToNewrelicArrayOutputWithContext(context.Background())
}

func (i NewrelicArray) ToNewrelicArrayOutputWithContext(ctx context.Context) NewrelicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NewrelicArrayOutput)
}

// NewrelicMapInput is an input type that accepts NewrelicMap and NewrelicMapOutput values.
// You can construct a concrete instance of `NewrelicMapInput` via:
//
//	NewrelicMap{ "key": NewrelicArgs{...} }
type NewrelicMapInput interface {
	pulumi.Input

	ToNewrelicMapOutput() NewrelicMapOutput
	ToNewrelicMapOutputWithContext(context.Context) NewrelicMapOutput
}

type NewrelicMap map[string]NewrelicInput

func (NewrelicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Newrelic)(nil)).Elem()
}

func (i NewrelicMap) ToNewrelicMapOutput() NewrelicMapOutput {
	return i.ToNewrelicMapOutputWithContext(context.Background())
}

func (i NewrelicMap) ToNewrelicMapOutputWithContext(ctx context.Context) NewrelicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NewrelicMapOutput)
}

type NewrelicOutput struct{ *pulumi.OutputState }

func (NewrelicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Newrelic)(nil)).Elem()
}

func (o NewrelicOutput) ToNewrelicOutput() NewrelicOutput {
	return o
}

func (o NewrelicOutput) ToNewrelicOutputWithContext(ctx context.Context) NewrelicOutput {
	return o
}

// Account ID of the NewRelic account.
func (o NewrelicOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Newrelic) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Reference to the Harness secret containing the api key.
func (o NewrelicOutput) ApiKeyRef() pulumi.StringOutput {
	return o.ApplyT(func(v *Newrelic) pulumi.StringOutput { return v.ApiKeyRef }).(pulumi.StringOutput)
}

// Connect using only the delegates which have these tags.
func (o NewrelicOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Newrelic) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o NewrelicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Newrelic) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o NewrelicOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Newrelic) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o NewrelicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Newrelic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o NewrelicOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Newrelic) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o NewrelicOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Newrelic) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o NewrelicOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Newrelic) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the NewRelic server.
func (o NewrelicOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Newrelic) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type NewrelicArrayOutput struct{ *pulumi.OutputState }

func (NewrelicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Newrelic)(nil)).Elem()
}

func (o NewrelicArrayOutput) ToNewrelicArrayOutput() NewrelicArrayOutput {
	return o
}

func (o NewrelicArrayOutput) ToNewrelicArrayOutputWithContext(ctx context.Context) NewrelicArrayOutput {
	return o
}

func (o NewrelicArrayOutput) Index(i pulumi.IntInput) NewrelicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Newrelic {
		return vs[0].([]*Newrelic)[vs[1].(int)]
	}).(NewrelicOutput)
}

type NewrelicMapOutput struct{ *pulumi.OutputState }

func (NewrelicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Newrelic)(nil)).Elem()
}

func (o NewrelicMapOutput) ToNewrelicMapOutput() NewrelicMapOutput {
	return o
}

func (o NewrelicMapOutput) ToNewrelicMapOutputWithContext(ctx context.Context) NewrelicMapOutput {
	return o
}

func (o NewrelicMapOutput) MapIndex(k pulumi.StringInput) NewrelicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Newrelic {
		return vs[0].(map[string]*Newrelic)[vs[1].(string)]
	}).(NewrelicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NewrelicInput)(nil)).Elem(), &Newrelic{})
	pulumi.RegisterInputType(reflect.TypeOf((*NewrelicArrayInput)(nil)).Elem(), NewrelicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NewrelicMapInput)(nil)).Elem(), NewrelicMap{})
	pulumi.RegisterOutputType(NewrelicOutput{})
	pulumi.RegisterOutputType(NewrelicArrayOutput{})
	pulumi.RegisterOutputType(NewrelicMapOutput{})
}
