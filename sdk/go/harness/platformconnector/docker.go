// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Docker connector.
type Docker struct {
	pulumi.CustomResourceState

	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials DockerCredentialsPtrOutput `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type pulumi.StringOutput `pulumi:"type"`
	// The url of the docker registry.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDocker registers a new resource with the given unique name, arguments, and options.
func NewDocker(ctx *pulumi.Context,
	name string, args *DockerArgs, opts ...pulumi.ResourceOption) (*Docker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource Docker
	err := ctx.RegisterResource("harness:PlatformConnector/docker:Docker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocker gets an existing Docker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DockerState, opts ...pulumi.ResourceOption) (*Docker, error) {
	var resource Docker
	err := ctx.ReadResource("harness:PlatformConnector/docker:Docker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Docker resources.
type dockerState struct {
	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials *DockerCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type *string `pulumi:"type"`
	// The url of the docker registry.
	Url *string `pulumi:"url"`
}

type DockerState struct {
	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials DockerCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type pulumi.StringPtrInput
	// The url of the docker registry.
	Url pulumi.StringPtrInput
}

func (DockerState) ElementType() reflect.Type {
	return reflect.TypeOf((*dockerState)(nil)).Elem()
}

type dockerArgs struct {
	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials *DockerCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type string `pulumi:"type"`
	// The url of the docker registry.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Docker resource.
type DockerArgs struct {
	// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
	Credentials DockerCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
	Type pulumi.StringInput
	// The url of the docker registry.
	Url pulumi.StringInput
}

func (DockerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dockerArgs)(nil)).Elem()
}

type DockerInput interface {
	pulumi.Input

	ToDockerOutput() DockerOutput
	ToDockerOutputWithContext(ctx context.Context) DockerOutput
}

func (*Docker) ElementType() reflect.Type {
	return reflect.TypeOf((**Docker)(nil)).Elem()
}

func (i *Docker) ToDockerOutput() DockerOutput {
	return i.ToDockerOutputWithContext(context.Background())
}

func (i *Docker) ToDockerOutputWithContext(ctx context.Context) DockerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerOutput)
}

// DockerArrayInput is an input type that accepts DockerArray and DockerArrayOutput values.
// You can construct a concrete instance of `DockerArrayInput` via:
//
//	DockerArray{ DockerArgs{...} }
type DockerArrayInput interface {
	pulumi.Input

	ToDockerArrayOutput() DockerArrayOutput
	ToDockerArrayOutputWithContext(context.Context) DockerArrayOutput
}

type DockerArray []DockerInput

func (DockerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Docker)(nil)).Elem()
}

func (i DockerArray) ToDockerArrayOutput() DockerArrayOutput {
	return i.ToDockerArrayOutputWithContext(context.Background())
}

func (i DockerArray) ToDockerArrayOutputWithContext(ctx context.Context) DockerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerArrayOutput)
}

// DockerMapInput is an input type that accepts DockerMap and DockerMapOutput values.
// You can construct a concrete instance of `DockerMapInput` via:
//
//	DockerMap{ "key": DockerArgs{...} }
type DockerMapInput interface {
	pulumi.Input

	ToDockerMapOutput() DockerMapOutput
	ToDockerMapOutputWithContext(context.Context) DockerMapOutput
}

type DockerMap map[string]DockerInput

func (DockerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Docker)(nil)).Elem()
}

func (i DockerMap) ToDockerMapOutput() DockerMapOutput {
	return i.ToDockerMapOutputWithContext(context.Background())
}

func (i DockerMap) ToDockerMapOutputWithContext(ctx context.Context) DockerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerMapOutput)
}

type DockerOutput struct{ *pulumi.OutputState }

func (DockerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Docker)(nil)).Elem()
}

func (o DockerOutput) ToDockerOutput() DockerOutput {
	return o
}

func (o DockerOutput) ToDockerOutputWithContext(ctx context.Context) DockerOutput {
	return o
}

// The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.
func (o DockerOutput) Credentials() DockerCredentialsPtrOutput {
	return o.ApplyT(func(v *Docker) DockerCredentialsPtrOutput { return v.Credentials }).(DockerCredentialsPtrOutput)
}

// Connect using only the delegates which have these tags.
func (o DockerOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Docker) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o DockerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Docker) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o DockerOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Docker) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o DockerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Docker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o DockerOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Docker) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o DockerOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Docker) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o DockerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Docker) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay
func (o DockerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Docker) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The url of the docker registry.
func (o DockerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Docker) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DockerArrayOutput struct{ *pulumi.OutputState }

func (DockerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Docker)(nil)).Elem()
}

func (o DockerArrayOutput) ToDockerArrayOutput() DockerArrayOutput {
	return o
}

func (o DockerArrayOutput) ToDockerArrayOutputWithContext(ctx context.Context) DockerArrayOutput {
	return o
}

func (o DockerArrayOutput) Index(i pulumi.IntInput) DockerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Docker {
		return vs[0].([]*Docker)[vs[1].(int)]
	}).(DockerOutput)
}

type DockerMapOutput struct{ *pulumi.OutputState }

func (DockerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Docker)(nil)).Elem()
}

func (o DockerMapOutput) ToDockerMapOutput() DockerMapOutput {
	return o
}

func (o DockerMapOutput) ToDockerMapOutputWithContext(ctx context.Context) DockerMapOutput {
	return o
}

func (o DockerMapOutput) MapIndex(k pulumi.StringInput) DockerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Docker {
		return vs[0].(map[string]*Docker)[vs[1].(string)]
	}).(DockerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DockerInput)(nil)).Elem(), &Docker{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerArrayInput)(nil)).Elem(), DockerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerMapInput)(nil)).Elem(), DockerMap{})
	pulumi.RegisterOutputType(DockerOutput{})
	pulumi.RegisterOutputType(DockerArrayOutput{})
	pulumi.RegisterOutputType(DockerMapOutput{})
}
