// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Jira connector.
type Jira struct {
	pulumi.CustomResourceState

	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Reference to a secret containing the password to use for authentication.
	PasswordRef pulumi.StringOutput `pulumi:"passwordRef"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Url of the Jira server.
	Url pulumi.StringOutput `pulumi:"url"`
	// Username to use for authentication.
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// Reference to a secret containing the username to use for authentication.
	UsernameRef pulumi.StringPtrOutput `pulumi:"usernameRef"`
}

// NewJira registers a new resource with the given unique name, arguments, and options.
func NewJira(ctx *pulumi.Context,
	name string, args *JiraArgs, opts ...pulumi.ResourceOption) (*Jira, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.PasswordRef == nil {
		return nil, errors.New("invalid value for required argument 'PasswordRef'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Jira
	err := ctx.RegisterResource("harness:PlatformConnector/jira:Jira", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJira gets an existing Jira resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJira(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JiraState, opts ...pulumi.ResourceOption) (*Jira, error) {
	var resource Jira
	err := ctx.ReadResource("harness:PlatformConnector/jira:Jira", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Jira resources.
type jiraState struct {
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Reference to a secret containing the password to use for authentication.
	PasswordRef *string `pulumi:"passwordRef"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the Jira server.
	Url *string `pulumi:"url"`
	// Username to use for authentication.
	Username *string `pulumi:"username"`
	// Reference to a secret containing the username to use for authentication.
	UsernameRef *string `pulumi:"usernameRef"`
}

type JiraState struct {
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Reference to a secret containing the password to use for authentication.
	PasswordRef pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the Jira server.
	Url pulumi.StringPtrInput
	// Username to use for authentication.
	Username pulumi.StringPtrInput
	// Reference to a secret containing the username to use for authentication.
	UsernameRef pulumi.StringPtrInput
}

func (JiraState) ElementType() reflect.Type {
	return reflect.TypeOf((*jiraState)(nil)).Elem()
}

type jiraArgs struct {
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Reference to a secret containing the password to use for authentication.
	PasswordRef string `pulumi:"passwordRef"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the Jira server.
	Url string `pulumi:"url"`
	// Username to use for authentication.
	Username *string `pulumi:"username"`
	// Reference to a secret containing the username to use for authentication.
	UsernameRef *string `pulumi:"usernameRef"`
}

// The set of arguments for constructing a Jira resource.
type JiraArgs struct {
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Reference to a secret containing the password to use for authentication.
	PasswordRef pulumi.StringInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the Jira server.
	Url pulumi.StringInput
	// Username to use for authentication.
	Username pulumi.StringPtrInput
	// Reference to a secret containing the username to use for authentication.
	UsernameRef pulumi.StringPtrInput
}

func (JiraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jiraArgs)(nil)).Elem()
}

type JiraInput interface {
	pulumi.Input

	ToJiraOutput() JiraOutput
	ToJiraOutputWithContext(ctx context.Context) JiraOutput
}

func (*Jira) ElementType() reflect.Type {
	return reflect.TypeOf((**Jira)(nil)).Elem()
}

func (i *Jira) ToJiraOutput() JiraOutput {
	return i.ToJiraOutputWithContext(context.Background())
}

func (i *Jira) ToJiraOutputWithContext(ctx context.Context) JiraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraOutput)
}

// JiraArrayInput is an input type that accepts JiraArray and JiraArrayOutput values.
// You can construct a concrete instance of `JiraArrayInput` via:
//
//	JiraArray{ JiraArgs{...} }
type JiraArrayInput interface {
	pulumi.Input

	ToJiraArrayOutput() JiraArrayOutput
	ToJiraArrayOutputWithContext(context.Context) JiraArrayOutput
}

type JiraArray []JiraInput

func (JiraArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Jira)(nil)).Elem()
}

func (i JiraArray) ToJiraArrayOutput() JiraArrayOutput {
	return i.ToJiraArrayOutputWithContext(context.Background())
}

func (i JiraArray) ToJiraArrayOutputWithContext(ctx context.Context) JiraArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraArrayOutput)
}

// JiraMapInput is an input type that accepts JiraMap and JiraMapOutput values.
// You can construct a concrete instance of `JiraMapInput` via:
//
//	JiraMap{ "key": JiraArgs{...} }
type JiraMapInput interface {
	pulumi.Input

	ToJiraMapOutput() JiraMapOutput
	ToJiraMapOutputWithContext(context.Context) JiraMapOutput
}

type JiraMap map[string]JiraInput

func (JiraMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Jira)(nil)).Elem()
}

func (i JiraMap) ToJiraMapOutput() JiraMapOutput {
	return i.ToJiraMapOutputWithContext(context.Background())
}

func (i JiraMap) ToJiraMapOutputWithContext(ctx context.Context) JiraMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraMapOutput)
}

type JiraOutput struct{ *pulumi.OutputState }

func (JiraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Jira)(nil)).Elem()
}

func (o JiraOutput) ToJiraOutput() JiraOutput {
	return o
}

func (o JiraOutput) ToJiraOutputWithContext(ctx context.Context) JiraOutput {
	return o
}

// Connect using only the delegates which have these tags.
func (o JiraOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o JiraOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o JiraOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o JiraOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o JiraOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Reference to a secret containing the password to use for authentication.
func (o JiraOutput) PasswordRef() pulumi.StringOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringOutput { return v.PasswordRef }).(pulumi.StringOutput)
}

// Unique identifier of the project.
func (o JiraOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o JiraOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the Jira server.
func (o JiraOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Username to use for authentication.
func (o JiraOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

// Reference to a secret containing the username to use for authentication.
func (o JiraOutput) UsernameRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Jira) pulumi.StringPtrOutput { return v.UsernameRef }).(pulumi.StringPtrOutput)
}

type JiraArrayOutput struct{ *pulumi.OutputState }

func (JiraArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Jira)(nil)).Elem()
}

func (o JiraArrayOutput) ToJiraArrayOutput() JiraArrayOutput {
	return o
}

func (o JiraArrayOutput) ToJiraArrayOutputWithContext(ctx context.Context) JiraArrayOutput {
	return o
}

func (o JiraArrayOutput) Index(i pulumi.IntInput) JiraOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Jira {
		return vs[0].([]*Jira)[vs[1].(int)]
	}).(JiraOutput)
}

type JiraMapOutput struct{ *pulumi.OutputState }

func (JiraMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Jira)(nil)).Elem()
}

func (o JiraMapOutput) ToJiraMapOutput() JiraMapOutput {
	return o
}

func (o JiraMapOutput) ToJiraMapOutputWithContext(ctx context.Context) JiraMapOutput {
	return o
}

func (o JiraMapOutput) MapIndex(k pulumi.StringInput) JiraOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Jira {
		return vs[0].(map[string]*Jira)[vs[1].(string)]
	}).(JiraOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JiraInput)(nil)).Elem(), &Jira{})
	pulumi.RegisterInputType(reflect.TypeOf((*JiraArrayInput)(nil)).Elem(), JiraArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JiraMapInput)(nil)).Elem(), JiraMap{})
	pulumi.RegisterOutputType(JiraOutput{})
	pulumi.RegisterOutputType(JiraArrayOutput{})
	pulumi.RegisterOutputType(JiraMapOutput{})
}
