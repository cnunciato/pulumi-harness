// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an AWS KMS connector.
type AwsKms struct {
	pulumi.CustomResourceState

	// A reference to the Harness secret containing the ARN of the AWS KMS.
	ArnRef pulumi.StringOutput `pulumi:"arnRef"`
	// The credentials to use for connecting to aws.
	Credentials AwsKmsCredentialsOutput `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The AWS region where the AWS Secret Manager is.
	Region pulumi.StringOutput `pulumi:"region"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewAwsKms registers a new resource with the given unique name, arguments, and options.
func NewAwsKms(ctx *pulumi.Context,
	name string, args *AwsKmsArgs, opts ...pulumi.ResourceOption) (*AwsKms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArnRef == nil {
		return nil, errors.New("invalid value for required argument 'ArnRef'")
	}
	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AwsKms
	err := ctx.RegisterResource("harness:PlatformConnector/awsKms:AwsKms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsKms gets an existing AwsKms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsKms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsKmsState, opts ...pulumi.ResourceOption) (*AwsKms, error) {
	var resource AwsKms
	err := ctx.ReadResource("harness:PlatformConnector/awsKms:AwsKms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsKms resources.
type awsKmsState struct {
	// A reference to the Harness secret containing the ARN of the AWS KMS.
	ArnRef *string `pulumi:"arnRef"`
	// The credentials to use for connecting to aws.
	Credentials *AwsKmsCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The AWS region where the AWS Secret Manager is.
	Region *string `pulumi:"region"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

type AwsKmsState struct {
	// A reference to the Harness secret containing the ARN of the AWS KMS.
	ArnRef pulumi.StringPtrInput
	// The credentials to use for connecting to aws.
	Credentials AwsKmsCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The AWS region where the AWS Secret Manager is.
	Region pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
}

func (AwsKmsState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsKmsState)(nil)).Elem()
}

type awsKmsArgs struct {
	// A reference to the Harness secret containing the ARN of the AWS KMS.
	ArnRef string `pulumi:"arnRef"`
	// The credentials to use for connecting to aws.
	Credentials AwsKmsCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The AWS region where the AWS Secret Manager is.
	Region string `pulumi:"region"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a AwsKms resource.
type AwsKmsArgs struct {
	// A reference to the Harness secret containing the ARN of the AWS KMS.
	ArnRef pulumi.StringInput
	// The credentials to use for connecting to aws.
	Credentials AwsKmsCredentialsInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The AWS region where the AWS Secret Manager is.
	Region pulumi.StringInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
}

func (AwsKmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsKmsArgs)(nil)).Elem()
}

type AwsKmsInput interface {
	pulumi.Input

	ToAwsKmsOutput() AwsKmsOutput
	ToAwsKmsOutputWithContext(ctx context.Context) AwsKmsOutput
}

func (*AwsKms) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsKms)(nil)).Elem()
}

func (i *AwsKms) ToAwsKmsOutput() AwsKmsOutput {
	return i.ToAwsKmsOutputWithContext(context.Background())
}

func (i *AwsKms) ToAwsKmsOutputWithContext(ctx context.Context) AwsKmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsKmsOutput)
}

// AwsKmsArrayInput is an input type that accepts AwsKmsArray and AwsKmsArrayOutput values.
// You can construct a concrete instance of `AwsKmsArrayInput` via:
//
//	AwsKmsArray{ AwsKmsArgs{...} }
type AwsKmsArrayInput interface {
	pulumi.Input

	ToAwsKmsArrayOutput() AwsKmsArrayOutput
	ToAwsKmsArrayOutputWithContext(context.Context) AwsKmsArrayOutput
}

type AwsKmsArray []AwsKmsInput

func (AwsKmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsKms)(nil)).Elem()
}

func (i AwsKmsArray) ToAwsKmsArrayOutput() AwsKmsArrayOutput {
	return i.ToAwsKmsArrayOutputWithContext(context.Background())
}

func (i AwsKmsArray) ToAwsKmsArrayOutputWithContext(ctx context.Context) AwsKmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsKmsArrayOutput)
}

// AwsKmsMapInput is an input type that accepts AwsKmsMap and AwsKmsMapOutput values.
// You can construct a concrete instance of `AwsKmsMapInput` via:
//
//	AwsKmsMap{ "key": AwsKmsArgs{...} }
type AwsKmsMapInput interface {
	pulumi.Input

	ToAwsKmsMapOutput() AwsKmsMapOutput
	ToAwsKmsMapOutputWithContext(context.Context) AwsKmsMapOutput
}

type AwsKmsMap map[string]AwsKmsInput

func (AwsKmsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsKms)(nil)).Elem()
}

func (i AwsKmsMap) ToAwsKmsMapOutput() AwsKmsMapOutput {
	return i.ToAwsKmsMapOutputWithContext(context.Background())
}

func (i AwsKmsMap) ToAwsKmsMapOutputWithContext(ctx context.Context) AwsKmsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsKmsMapOutput)
}

type AwsKmsOutput struct{ *pulumi.OutputState }

func (AwsKmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsKms)(nil)).Elem()
}

func (o AwsKmsOutput) ToAwsKmsOutput() AwsKmsOutput {
	return o
}

func (o AwsKmsOutput) ToAwsKmsOutputWithContext(ctx context.Context) AwsKmsOutput {
	return o
}

// A reference to the Harness secret containing the ARN of the AWS KMS.
func (o AwsKmsOutput) ArnRef() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKms) pulumi.StringOutput { return v.ArnRef }).(pulumi.StringOutput)
}

// The credentials to use for connecting to aws.
func (o AwsKmsOutput) Credentials() AwsKmsCredentialsOutput {
	return o.ApplyT(func(v *AwsKms) AwsKmsCredentialsOutput { return v.Credentials }).(AwsKmsCredentialsOutput)
}

// Connect using only the delegates which have these tags.
func (o AwsKmsOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsKms) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o AwsKmsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsKms) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o AwsKmsOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKms) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o AwsKmsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKms) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o AwsKmsOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsKms) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o AwsKmsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsKms) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The AWS region where the AWS Secret Manager is.
func (o AwsKmsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsKms) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o AwsKmsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsKms) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type AwsKmsArrayOutput struct{ *pulumi.OutputState }

func (AwsKmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsKms)(nil)).Elem()
}

func (o AwsKmsArrayOutput) ToAwsKmsArrayOutput() AwsKmsArrayOutput {
	return o
}

func (o AwsKmsArrayOutput) ToAwsKmsArrayOutputWithContext(ctx context.Context) AwsKmsArrayOutput {
	return o
}

func (o AwsKmsArrayOutput) Index(i pulumi.IntInput) AwsKmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsKms {
		return vs[0].([]*AwsKms)[vs[1].(int)]
	}).(AwsKmsOutput)
}

type AwsKmsMapOutput struct{ *pulumi.OutputState }

func (AwsKmsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsKms)(nil)).Elem()
}

func (o AwsKmsMapOutput) ToAwsKmsMapOutput() AwsKmsMapOutput {
	return o
}

func (o AwsKmsMapOutput) ToAwsKmsMapOutputWithContext(ctx context.Context) AwsKmsMapOutput {
	return o
}

func (o AwsKmsMapOutput) MapIndex(k pulumi.StringInput) AwsKmsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsKms {
		return vs[0].(map[string]*AwsKms)[vs[1].(string)]
	}).(AwsKmsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsKmsInput)(nil)).Elem(), &AwsKms{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsKmsArrayInput)(nil)).Elem(), AwsKmsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsKmsMapInput)(nil)).Elem(), AwsKmsMap{})
	pulumi.RegisterOutputType(AwsKmsOutput{})
	pulumi.RegisterOutputType(AwsKmsArrayOutput{})
	pulumi.RegisterOutputType(AwsKmsMapOutput{})
}
