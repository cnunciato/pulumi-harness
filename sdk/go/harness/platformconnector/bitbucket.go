// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Bitbucket connector.
type Bitbucket struct {
	pulumi.CustomResourceState

	// Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication BitbucketApiAuthenticationPtrOutput `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials BitbucketCredentialsOutput `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Url of the BitBucket repository or account.
	Url pulumi.StringOutput `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrOutput `pulumi:"validationRepo"`
}

// NewBitbucket registers a new resource with the given unique name, arguments, and options.
func NewBitbucket(ctx *pulumi.Context,
	name string, args *BitbucketArgs, opts ...pulumi.ResourceOption) (*Bitbucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionType'")
	}
	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource Bitbucket
	err := ctx.RegisterResource("harness:PlatformConnector/bitbucket:Bitbucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBitbucket gets an existing Bitbucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBitbucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BitbucketState, opts ...pulumi.ResourceOption) (*Bitbucket, error) {
	var resource Bitbucket
	err := ctx.ReadResource("harness:PlatformConnector/bitbucket:Bitbucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bitbucket resources.
type bitbucketState struct {
	// Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication *BitbucketApiAuthentication `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.
	ConnectionType *string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials *BitbucketCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the BitBucket repository or account.
	Url *string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

type BitbucketState struct {
	// Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication BitbucketApiAuthenticationPtrInput
	// Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.
	ConnectionType pulumi.StringPtrInput
	// Credentials to use for the connection.
	Credentials BitbucketCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the BitBucket repository or account.
	Url pulumi.StringPtrInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (BitbucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*bitbucketState)(nil)).Elem()
}

type bitbucketArgs struct {
	// Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication *BitbucketApiAuthentication `pulumi:"apiAuthentication"`
	// Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.
	ConnectionType string `pulumi:"connectionType"`
	// Credentials to use for the connection.
	Credentials BitbucketCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the BitBucket repository or account.
	Url string `pulumi:"url"`
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo *string `pulumi:"validationRepo"`
}

// The set of arguments for constructing a Bitbucket resource.
type BitbucketArgs struct {
	// Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
	ApiAuthentication BitbucketApiAuthenticationPtrInput
	// Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.
	ConnectionType pulumi.StringInput
	// Credentials to use for the connection.
	Credentials BitbucketCredentialsInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
	// Url of the BitBucket repository or account.
	Url pulumi.StringInput
	// Repository to test the connection with. This is only used when `connectionType` is `Account`.
	ValidationRepo pulumi.StringPtrInput
}

func (BitbucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bitbucketArgs)(nil)).Elem()
}

type BitbucketInput interface {
	pulumi.Input

	ToBitbucketOutput() BitbucketOutput
	ToBitbucketOutputWithContext(ctx context.Context) BitbucketOutput
}

func (*Bitbucket) ElementType() reflect.Type {
	return reflect.TypeOf((**Bitbucket)(nil)).Elem()
}

func (i *Bitbucket) ToBitbucketOutput() BitbucketOutput {
	return i.ToBitbucketOutputWithContext(context.Background())
}

func (i *Bitbucket) ToBitbucketOutputWithContext(ctx context.Context) BitbucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitbucketOutput)
}

// BitbucketArrayInput is an input type that accepts BitbucketArray and BitbucketArrayOutput values.
// You can construct a concrete instance of `BitbucketArrayInput` via:
//
//	BitbucketArray{ BitbucketArgs{...} }
type BitbucketArrayInput interface {
	pulumi.Input

	ToBitbucketArrayOutput() BitbucketArrayOutput
	ToBitbucketArrayOutputWithContext(context.Context) BitbucketArrayOutput
}

type BitbucketArray []BitbucketInput

func (BitbucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bitbucket)(nil)).Elem()
}

func (i BitbucketArray) ToBitbucketArrayOutput() BitbucketArrayOutput {
	return i.ToBitbucketArrayOutputWithContext(context.Background())
}

func (i BitbucketArray) ToBitbucketArrayOutputWithContext(ctx context.Context) BitbucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitbucketArrayOutput)
}

// BitbucketMapInput is an input type that accepts BitbucketMap and BitbucketMapOutput values.
// You can construct a concrete instance of `BitbucketMapInput` via:
//
//	BitbucketMap{ "key": BitbucketArgs{...} }
type BitbucketMapInput interface {
	pulumi.Input

	ToBitbucketMapOutput() BitbucketMapOutput
	ToBitbucketMapOutputWithContext(context.Context) BitbucketMapOutput
}

type BitbucketMap map[string]BitbucketInput

func (BitbucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bitbucket)(nil)).Elem()
}

func (i BitbucketMap) ToBitbucketMapOutput() BitbucketMapOutput {
	return i.ToBitbucketMapOutputWithContext(context.Background())
}

func (i BitbucketMap) ToBitbucketMapOutputWithContext(ctx context.Context) BitbucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitbucketMapOutput)
}

type BitbucketOutput struct{ *pulumi.OutputState }

func (BitbucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bitbucket)(nil)).Elem()
}

func (o BitbucketOutput) ToBitbucketOutput() BitbucketOutput {
	return o
}

func (o BitbucketOutput) ToBitbucketOutputWithContext(ctx context.Context) BitbucketOutput {
	return o
}

// Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.
func (o BitbucketOutput) ApiAuthentication() BitbucketApiAuthenticationPtrOutput {
	return o.ApplyT(func(v *Bitbucket) BitbucketApiAuthenticationPtrOutput { return v.ApiAuthentication }).(BitbucketApiAuthenticationPtrOutput)
}

// Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.
func (o BitbucketOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Bitbucket) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

// Credentials to use for the connection.
func (o BitbucketOutput) Credentials() BitbucketCredentialsOutput {
	return o.ApplyT(func(v *Bitbucket) BitbucketCredentialsOutput { return v.Credentials }).(BitbucketCredentialsOutput)
}

// Connect using only the delegates which have these tags.
func (o BitbucketOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Bitbucket) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o BitbucketOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bitbucket) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o BitbucketOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Bitbucket) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o BitbucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Bitbucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o BitbucketOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bitbucket) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o BitbucketOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bitbucket) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o BitbucketOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Bitbucket) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the BitBucket repository or account.
func (o BitbucketOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Bitbucket) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Repository to test the connection with. This is only used when `connectionType` is `Account`.
func (o BitbucketOutput) ValidationRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bitbucket) pulumi.StringPtrOutput { return v.ValidationRepo }).(pulumi.StringPtrOutput)
}

type BitbucketArrayOutput struct{ *pulumi.OutputState }

func (BitbucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bitbucket)(nil)).Elem()
}

func (o BitbucketArrayOutput) ToBitbucketArrayOutput() BitbucketArrayOutput {
	return o
}

func (o BitbucketArrayOutput) ToBitbucketArrayOutputWithContext(ctx context.Context) BitbucketArrayOutput {
	return o
}

func (o BitbucketArrayOutput) Index(i pulumi.IntInput) BitbucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bitbucket {
		return vs[0].([]*Bitbucket)[vs[1].(int)]
	}).(BitbucketOutput)
}

type BitbucketMapOutput struct{ *pulumi.OutputState }

func (BitbucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bitbucket)(nil)).Elem()
}

func (o BitbucketMapOutput) ToBitbucketMapOutput() BitbucketMapOutput {
	return o
}

func (o BitbucketMapOutput) ToBitbucketMapOutputWithContext(ctx context.Context) BitbucketMapOutput {
	return o
}

func (o BitbucketMapOutput) MapIndex(k pulumi.StringInput) BitbucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bitbucket {
		return vs[0].(map[string]*Bitbucket)[vs[1].(string)]
	}).(BitbucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BitbucketInput)(nil)).Elem(), &Bitbucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*BitbucketArrayInput)(nil)).Elem(), BitbucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BitbucketMapInput)(nil)).Elem(), BitbucketMap{})
	pulumi.RegisterOutputType(BitbucketOutput{})
	pulumi.RegisterOutputType(BitbucketArrayOutput{})
	pulumi.RegisterOutputType(BitbucketMapOutput{})
}
