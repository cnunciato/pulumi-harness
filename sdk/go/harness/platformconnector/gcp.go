// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Gcp connector.
type Gcp struct {
	pulumi.CustomResourceState

	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Inherit configuration from delegate.
	InheritFromDelegates GcpInheritFromDelegateArrayOutput `pulumi:"inheritFromDelegates"`
	// Manual credential configuration.
	Manual GcpManualPtrOutput `pulumi:"manual"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewGcp registers a new resource with the given unique name, arguments, and options.
func NewGcp(ctx *pulumi.Context,
	name string, args *GcpArgs, opts ...pulumi.ResourceOption) (*Gcp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Gcp
	err := ctx.RegisterResource("harness:PlatformConnector/gcp:Gcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcp gets an existing Gcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpState, opts ...pulumi.ResourceOption) (*Gcp, error) {
	var resource Gcp
	err := ctx.ReadResource("harness:PlatformConnector/gcp:Gcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gcp resources.
type gcpState struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Inherit configuration from delegate.
	InheritFromDelegates []GcpInheritFromDelegate `pulumi:"inheritFromDelegates"`
	// Manual credential configuration.
	Manual *GcpManual `pulumi:"manual"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

type GcpState struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Inherit configuration from delegate.
	InheritFromDelegates GcpInheritFromDelegateArrayInput
	// Manual credential configuration.
	Manual GcpManualPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
}

func (GcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpState)(nil)).Elem()
}

type gcpArgs struct {
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Inherit configuration from delegate.
	InheritFromDelegates []GcpInheritFromDelegate `pulumi:"inheritFromDelegates"`
	// Manual credential configuration.
	Manual *GcpManual `pulumi:"manual"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Gcp resource.
type GcpArgs struct {
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Inherit configuration from delegate.
	InheritFromDelegates GcpInheritFromDelegateArrayInput
	// Manual credential configuration.
	Manual GcpManualPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
}

func (GcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpArgs)(nil)).Elem()
}

type GcpInput interface {
	pulumi.Input

	ToGcpOutput() GcpOutput
	ToGcpOutputWithContext(ctx context.Context) GcpOutput
}

func (*Gcp) ElementType() reflect.Type {
	return reflect.TypeOf((**Gcp)(nil)).Elem()
}

func (i *Gcp) ToGcpOutput() GcpOutput {
	return i.ToGcpOutputWithContext(context.Background())
}

func (i *Gcp) ToGcpOutputWithContext(ctx context.Context) GcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpOutput)
}

// GcpArrayInput is an input type that accepts GcpArray and GcpArrayOutput values.
// You can construct a concrete instance of `GcpArrayInput` via:
//
//	GcpArray{ GcpArgs{...} }
type GcpArrayInput interface {
	pulumi.Input

	ToGcpArrayOutput() GcpArrayOutput
	ToGcpArrayOutputWithContext(context.Context) GcpArrayOutput
}

type GcpArray []GcpInput

func (GcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gcp)(nil)).Elem()
}

func (i GcpArray) ToGcpArrayOutput() GcpArrayOutput {
	return i.ToGcpArrayOutputWithContext(context.Background())
}

func (i GcpArray) ToGcpArrayOutputWithContext(ctx context.Context) GcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpArrayOutput)
}

// GcpMapInput is an input type that accepts GcpMap and GcpMapOutput values.
// You can construct a concrete instance of `GcpMapInput` via:
//
//	GcpMap{ "key": GcpArgs{...} }
type GcpMapInput interface {
	pulumi.Input

	ToGcpMapOutput() GcpMapOutput
	ToGcpMapOutputWithContext(context.Context) GcpMapOutput
}

type GcpMap map[string]GcpInput

func (GcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gcp)(nil)).Elem()
}

func (i GcpMap) ToGcpMapOutput() GcpMapOutput {
	return i.ToGcpMapOutputWithContext(context.Background())
}

func (i GcpMap) ToGcpMapOutputWithContext(ctx context.Context) GcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpMapOutput)
}

type GcpOutput struct{ *pulumi.OutputState }

func (GcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gcp)(nil)).Elem()
}

func (o GcpOutput) ToGcpOutput() GcpOutput {
	return o
}

func (o GcpOutput) ToGcpOutputWithContext(ctx context.Context) GcpOutput {
	return o
}

// Description of the resource.
func (o GcpOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o GcpOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Inherit configuration from delegate.
func (o GcpOutput) InheritFromDelegates() GcpInheritFromDelegateArrayOutput {
	return o.ApplyT(func(v *Gcp) GcpInheritFromDelegateArrayOutput { return v.InheritFromDelegates }).(GcpInheritFromDelegateArrayOutput)
}

// Manual credential configuration.
func (o GcpOutput) Manual() GcpManualPtrOutput {
	return o.ApplyT(func(v *Gcp) GcpManualPtrOutput { return v.Manual }).(GcpManualPtrOutput)
}

// Name of the resource.
func (o GcpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o GcpOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o GcpOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o GcpOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type GcpArrayOutput struct{ *pulumi.OutputState }

func (GcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gcp)(nil)).Elem()
}

func (o GcpArrayOutput) ToGcpArrayOutput() GcpArrayOutput {
	return o
}

func (o GcpArrayOutput) ToGcpArrayOutputWithContext(ctx context.Context) GcpArrayOutput {
	return o
}

func (o GcpArrayOutput) Index(i pulumi.IntInput) GcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gcp {
		return vs[0].([]*Gcp)[vs[1].(int)]
	}).(GcpOutput)
}

type GcpMapOutput struct{ *pulumi.OutputState }

func (GcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gcp)(nil)).Elem()
}

func (o GcpMapOutput) ToGcpMapOutput() GcpMapOutput {
	return o
}

func (o GcpMapOutput) ToGcpMapOutputWithContext(ctx context.Context) GcpMapOutput {
	return o
}

func (o GcpMapOutput) MapIndex(k pulumi.StringInput) GcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gcp {
		return vs[0].(map[string]*Gcp)[vs[1].(string)]
	}).(GcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpInput)(nil)).Elem(), &Gcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpArrayInput)(nil)).Elem(), GcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpMapInput)(nil)).Elem(), GcpMap{})
	pulumi.RegisterOutputType(GcpOutput{})
	pulumi.RegisterOutputType(GcpArrayOutput{})
	pulumi.RegisterOutputType(GcpMapOutput{})
}
