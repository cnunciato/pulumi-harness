// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up an App Dynamics connector.
func LookupAppDynamics(ctx *pulumi.Context, args *LookupAppDynamicsArgs, opts ...pulumi.InvokeOption) (*LookupAppDynamicsResult, error) {
	var rv LookupAppDynamicsResult
	err := ctx.Invoke("harness:PlatformConnector/getAppDynamics:getAppDynamics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAppDynamics.
type LookupAppDynamicsArgs struct {
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getAppDynamics.
type LookupAppDynamicsResult struct {
	// The App Dynamics account name.
	AccountName string `pulumi:"accountName"`
	// Authenticate to App Dynamics using api token.
	ApiTokens []GetAppDynamicsApiToken `pulumi:"apiTokens"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
	// Url of the App Dynamics controller.
	Url string `pulumi:"url"`
	// Authenticate to App Dynamics using username and password.
	UsernamePasswords []GetAppDynamicsUsernamePassword `pulumi:"usernamePasswords"`
}

func LookupAppDynamicsOutput(ctx *pulumi.Context, args LookupAppDynamicsOutputArgs, opts ...pulumi.InvokeOption) LookupAppDynamicsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAppDynamicsResult, error) {
			args := v.(LookupAppDynamicsArgs)
			r, err := LookupAppDynamics(ctx, &args, opts...)
			var s LookupAppDynamicsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAppDynamicsResultOutput)
}

// A collection of arguments for invoking getAppDynamics.
type LookupAppDynamicsOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupAppDynamicsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppDynamicsArgs)(nil)).Elem()
}

// A collection of values returned by getAppDynamics.
type LookupAppDynamicsResultOutput struct{ *pulumi.OutputState }

func (LookupAppDynamicsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppDynamicsResult)(nil)).Elem()
}

func (o LookupAppDynamicsResultOutput) ToLookupAppDynamicsResultOutput() LookupAppDynamicsResultOutput {
	return o
}

func (o LookupAppDynamicsResultOutput) ToLookupAppDynamicsResultOutputWithContext(ctx context.Context) LookupAppDynamicsResultOutput {
	return o
}

// The App Dynamics account name.
func (o LookupAppDynamicsResultOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) string { return v.AccountName }).(pulumi.StringOutput)
}

// Authenticate to App Dynamics using api token.
func (o LookupAppDynamicsResultOutput) ApiTokens() GetAppDynamicsApiTokenArrayOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) []GetAppDynamicsApiToken { return v.ApiTokens }).(GetAppDynamicsApiTokenArrayOutput)
}

// Connect using only the delegates which have these tags.
func (o LookupAppDynamicsResultOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) []string { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o LookupAppDynamicsResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAppDynamicsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupAppDynamicsResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// Name of the resource.
func (o LookupAppDynamicsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupAppDynamicsResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupAppDynamicsResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o LookupAppDynamicsResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Url of the App Dynamics controller.
func (o LookupAppDynamicsResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) string { return v.Url }).(pulumi.StringOutput)
}

// Authenticate to App Dynamics using username and password.
func (o LookupAppDynamicsResultOutput) UsernamePasswords() GetAppDynamicsUsernamePasswordArrayOutput {
	return o.ApplyT(func(v LookupAppDynamicsResult) []GetAppDynamicsUsernamePassword { return v.UsernamePasswords }).(GetAppDynamicsUsernamePasswordArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAppDynamicsResultOutput{})
}
