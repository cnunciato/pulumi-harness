// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an AWS Secret Manager connector.
type AwsSecretManager struct {
	pulumi.CustomResourceState

	// The credentials to use for connecting to aws.
	Credentials AwsSecretManagerCredentialsOutput `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayOutput `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The AWS region where the AWS Secret Manager is.
	Region pulumi.StringOutput `pulumi:"region"`
	// A prefix to be added to all secrets.
	SecretNamePrefix pulumi.StringPtrOutput `pulumi:"secretNamePrefix"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewAwsSecretManager registers a new resource with the given unique name, arguments, and options.
func NewAwsSecretManager(ctx *pulumi.Context,
	name string, args *AwsSecretManagerArgs, opts ...pulumi.ResourceOption) (*AwsSecretManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AwsSecretManager
	err := ctx.RegisterResource("harness:PlatformConnector/awsSecretManager:AwsSecretManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsSecretManager gets an existing AwsSecretManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsSecretManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsSecretManagerState, opts ...pulumi.ResourceOption) (*AwsSecretManager, error) {
	var resource AwsSecretManager
	err := ctx.ReadResource("harness:PlatformConnector/awsSecretManager:AwsSecretManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsSecretManager resources.
type awsSecretManagerState struct {
	// The credentials to use for connecting to aws.
	Credentials *AwsSecretManagerCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The AWS region where the AWS Secret Manager is.
	Region *string `pulumi:"region"`
	// A prefix to be added to all secrets.
	SecretNamePrefix *string `pulumi:"secretNamePrefix"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

type AwsSecretManagerState struct {
	// The credentials to use for connecting to aws.
	Credentials AwsSecretManagerCredentialsPtrInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The AWS region where the AWS Secret Manager is.
	Region pulumi.StringPtrInput
	// A prefix to be added to all secrets.
	SecretNamePrefix pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
}

func (AwsSecretManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsSecretManagerState)(nil)).Elem()
}

type awsSecretManagerArgs struct {
	// The credentials to use for connecting to aws.
	Credentials AwsSecretManagerCredentials `pulumi:"credentials"`
	// Connect using only the delegates which have these tags.
	DelegateSelectors []string `pulumi:"delegateSelectors"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// The AWS region where the AWS Secret Manager is.
	Region string `pulumi:"region"`
	// A prefix to be added to all secrets.
	SecretNamePrefix *string `pulumi:"secretNamePrefix"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a AwsSecretManager resource.
type AwsSecretManagerArgs struct {
	// The credentials to use for connecting to aws.
	Credentials AwsSecretManagerCredentialsInput
	// Connect using only the delegates which have these tags.
	DelegateSelectors pulumi.StringArrayInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// The AWS region where the AWS Secret Manager is.
	Region pulumi.StringInput
	// A prefix to be added to all secrets.
	SecretNamePrefix pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
}

func (AwsSecretManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsSecretManagerArgs)(nil)).Elem()
}

type AwsSecretManagerInput interface {
	pulumi.Input

	ToAwsSecretManagerOutput() AwsSecretManagerOutput
	ToAwsSecretManagerOutputWithContext(ctx context.Context) AwsSecretManagerOutput
}

func (*AwsSecretManager) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsSecretManager)(nil)).Elem()
}

func (i *AwsSecretManager) ToAwsSecretManagerOutput() AwsSecretManagerOutput {
	return i.ToAwsSecretManagerOutputWithContext(context.Background())
}

func (i *AwsSecretManager) ToAwsSecretManagerOutputWithContext(ctx context.Context) AwsSecretManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsSecretManagerOutput)
}

// AwsSecretManagerArrayInput is an input type that accepts AwsSecretManagerArray and AwsSecretManagerArrayOutput values.
// You can construct a concrete instance of `AwsSecretManagerArrayInput` via:
//
//	AwsSecretManagerArray{ AwsSecretManagerArgs{...} }
type AwsSecretManagerArrayInput interface {
	pulumi.Input

	ToAwsSecretManagerArrayOutput() AwsSecretManagerArrayOutput
	ToAwsSecretManagerArrayOutputWithContext(context.Context) AwsSecretManagerArrayOutput
}

type AwsSecretManagerArray []AwsSecretManagerInput

func (AwsSecretManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsSecretManager)(nil)).Elem()
}

func (i AwsSecretManagerArray) ToAwsSecretManagerArrayOutput() AwsSecretManagerArrayOutput {
	return i.ToAwsSecretManagerArrayOutputWithContext(context.Background())
}

func (i AwsSecretManagerArray) ToAwsSecretManagerArrayOutputWithContext(ctx context.Context) AwsSecretManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsSecretManagerArrayOutput)
}

// AwsSecretManagerMapInput is an input type that accepts AwsSecretManagerMap and AwsSecretManagerMapOutput values.
// You can construct a concrete instance of `AwsSecretManagerMapInput` via:
//
//	AwsSecretManagerMap{ "key": AwsSecretManagerArgs{...} }
type AwsSecretManagerMapInput interface {
	pulumi.Input

	ToAwsSecretManagerMapOutput() AwsSecretManagerMapOutput
	ToAwsSecretManagerMapOutputWithContext(context.Context) AwsSecretManagerMapOutput
}

type AwsSecretManagerMap map[string]AwsSecretManagerInput

func (AwsSecretManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsSecretManager)(nil)).Elem()
}

func (i AwsSecretManagerMap) ToAwsSecretManagerMapOutput() AwsSecretManagerMapOutput {
	return i.ToAwsSecretManagerMapOutputWithContext(context.Background())
}

func (i AwsSecretManagerMap) ToAwsSecretManagerMapOutputWithContext(ctx context.Context) AwsSecretManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsSecretManagerMapOutput)
}

type AwsSecretManagerOutput struct{ *pulumi.OutputState }

func (AwsSecretManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsSecretManager)(nil)).Elem()
}

func (o AwsSecretManagerOutput) ToAwsSecretManagerOutput() AwsSecretManagerOutput {
	return o
}

func (o AwsSecretManagerOutput) ToAwsSecretManagerOutputWithContext(ctx context.Context) AwsSecretManagerOutput {
	return o
}

// The credentials to use for connecting to aws.
func (o AwsSecretManagerOutput) Credentials() AwsSecretManagerCredentialsOutput {
	return o.ApplyT(func(v *AwsSecretManager) AwsSecretManagerCredentialsOutput { return v.Credentials }).(AwsSecretManagerCredentialsOutput)
}

// Connect using only the delegates which have these tags.
func (o AwsSecretManagerOutput) DelegateSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsSecretManager) pulumi.StringArrayOutput { return v.DelegateSelectors }).(pulumi.StringArrayOutput)
}

// Description of the resource.
func (o AwsSecretManagerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsSecretManager) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o AwsSecretManagerOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsSecretManager) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Name of the resource.
func (o AwsSecretManagerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsSecretManager) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o AwsSecretManagerOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsSecretManager) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o AwsSecretManagerOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsSecretManager) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The AWS region where the AWS Secret Manager is.
func (o AwsSecretManagerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsSecretManager) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// A prefix to be added to all secrets.
func (o AwsSecretManagerOutput) SecretNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsSecretManager) pulumi.StringPtrOutput { return v.SecretNamePrefix }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o AwsSecretManagerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsSecretManager) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type AwsSecretManagerArrayOutput struct{ *pulumi.OutputState }

func (AwsSecretManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsSecretManager)(nil)).Elem()
}

func (o AwsSecretManagerArrayOutput) ToAwsSecretManagerArrayOutput() AwsSecretManagerArrayOutput {
	return o
}

func (o AwsSecretManagerArrayOutput) ToAwsSecretManagerArrayOutputWithContext(ctx context.Context) AwsSecretManagerArrayOutput {
	return o
}

func (o AwsSecretManagerArrayOutput) Index(i pulumi.IntInput) AwsSecretManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsSecretManager {
		return vs[0].([]*AwsSecretManager)[vs[1].(int)]
	}).(AwsSecretManagerOutput)
}

type AwsSecretManagerMapOutput struct{ *pulumi.OutputState }

func (AwsSecretManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsSecretManager)(nil)).Elem()
}

func (o AwsSecretManagerMapOutput) ToAwsSecretManagerMapOutput() AwsSecretManagerMapOutput {
	return o
}

func (o AwsSecretManagerMapOutput) ToAwsSecretManagerMapOutputWithContext(ctx context.Context) AwsSecretManagerMapOutput {
	return o
}

func (o AwsSecretManagerMapOutput) MapIndex(k pulumi.StringInput) AwsSecretManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsSecretManager {
		return vs[0].(map[string]*AwsSecretManager)[vs[1].(string)]
	}).(AwsSecretManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsSecretManagerInput)(nil)).Elem(), &AwsSecretManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsSecretManagerArrayInput)(nil)).Elem(), AwsSecretManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsSecretManagerMapInput)(nil)).Elem(), AwsSecretManagerMap{})
	pulumi.RegisterOutputType(AwsSecretManagerOutput{})
	pulumi.RegisterOutputType(AwsSecretManagerArrayOutput{})
	pulumi.RegisterOutputType(AwsSecretManagerMapOutput{})
}
