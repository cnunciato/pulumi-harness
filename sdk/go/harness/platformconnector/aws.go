// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating an AWS connector.
type Aws struct {
	pulumi.CustomResourceState

	// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
	CrossAccountAccess AwsCrossAccountAccessPtrOutput `pulumi:"crossAccountAccess"`
	// Description of the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// Inherit credentials from the delegate.
	InheritFromDelegate AwsInheritFromDelegatePtrOutput `pulumi:"inheritFromDelegate"`
	// Use IAM role for service accounts.
	Irsa AwsIrsaPtrOutput `pulumi:"irsa"`
	// Use IAM role for service accounts.
	Manual AwsManualPtrOutput `pulumi:"manual"`
	// Name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewAws registers a new resource with the given unique name, arguments, and options.
func NewAws(ctx *pulumi.Context,
	name string, args *AwsArgs, opts ...pulumi.ResourceOption) (*Aws, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	var resource Aws
	err := ctx.RegisterResource("harness:PlatformConnector/aws:Aws", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAws gets an existing Aws resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAws(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsState, opts ...pulumi.ResourceOption) (*Aws, error) {
	var resource Aws
	err := ctx.ReadResource("harness:PlatformConnector/aws:Aws", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Aws resources.
type awsState struct {
	// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
	CrossAccountAccess *AwsCrossAccountAccess `pulumi:"crossAccountAccess"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Inherit credentials from the delegate.
	InheritFromDelegate *AwsInheritFromDelegate `pulumi:"inheritFromDelegate"`
	// Use IAM role for service accounts.
	Irsa *AwsIrsa `pulumi:"irsa"`
	// Use IAM role for service accounts.
	Manual *AwsManual `pulumi:"manual"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

type AwsState struct {
	// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
	CrossAccountAccess AwsCrossAccountAccessPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput
	// Inherit credentials from the delegate.
	InheritFromDelegate AwsInheritFromDelegatePtrInput
	// Use IAM role for service accounts.
	Irsa AwsIrsaPtrInput
	// Use IAM role for service accounts.
	Manual AwsManualPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
}

func (AwsState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsState)(nil)).Elem()
}

type awsArgs struct {
	// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
	CrossAccountAccess *AwsCrossAccountAccess `pulumi:"crossAccountAccess"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Unique identifier of the resource.
	Identifier string `pulumi:"identifier"`
	// Inherit credentials from the delegate.
	InheritFromDelegate *AwsInheritFromDelegate `pulumi:"inheritFromDelegate"`
	// Use IAM role for service accounts.
	Irsa *AwsIrsa `pulumi:"irsa"`
	// Use IAM role for service accounts.
	Manual *AwsManual `pulumi:"manual"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Aws resource.
type AwsArgs struct {
	// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
	CrossAccountAccess AwsCrossAccountAccessPtrInput
	// Description of the resource.
	Description pulumi.StringPtrInput
	// Unique identifier of the resource.
	Identifier pulumi.StringInput
	// Inherit credentials from the delegate.
	InheritFromDelegate AwsInheritFromDelegatePtrInput
	// Use IAM role for service accounts.
	Irsa AwsIrsaPtrInput
	// Use IAM role for service accounts.
	Manual AwsManualPtrInput
	// Name of the resource.
	Name pulumi.StringPtrInput
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags pulumi.StringArrayInput
}

func (AwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsArgs)(nil)).Elem()
}

type AwsInput interface {
	pulumi.Input

	ToAwsOutput() AwsOutput
	ToAwsOutputWithContext(ctx context.Context) AwsOutput
}

func (*Aws) ElementType() reflect.Type {
	return reflect.TypeOf((**Aws)(nil)).Elem()
}

func (i *Aws) ToAwsOutput() AwsOutput {
	return i.ToAwsOutputWithContext(context.Background())
}

func (i *Aws) ToAwsOutputWithContext(ctx context.Context) AwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsOutput)
}

// AwsArrayInput is an input type that accepts AwsArray and AwsArrayOutput values.
// You can construct a concrete instance of `AwsArrayInput` via:
//
//	AwsArray{ AwsArgs{...} }
type AwsArrayInput interface {
	pulumi.Input

	ToAwsArrayOutput() AwsArrayOutput
	ToAwsArrayOutputWithContext(context.Context) AwsArrayOutput
}

type AwsArray []AwsInput

func (AwsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Aws)(nil)).Elem()
}

func (i AwsArray) ToAwsArrayOutput() AwsArrayOutput {
	return i.ToAwsArrayOutputWithContext(context.Background())
}

func (i AwsArray) ToAwsArrayOutputWithContext(ctx context.Context) AwsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsArrayOutput)
}

// AwsMapInput is an input type that accepts AwsMap and AwsMapOutput values.
// You can construct a concrete instance of `AwsMapInput` via:
//
//	AwsMap{ "key": AwsArgs{...} }
type AwsMapInput interface {
	pulumi.Input

	ToAwsMapOutput() AwsMapOutput
	ToAwsMapOutputWithContext(context.Context) AwsMapOutput
}

type AwsMap map[string]AwsInput

func (AwsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Aws)(nil)).Elem()
}

func (i AwsMap) ToAwsMapOutput() AwsMapOutput {
	return i.ToAwsMapOutputWithContext(context.Background())
}

func (i AwsMap) ToAwsMapOutputWithContext(ctx context.Context) AwsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsMapOutput)
}

type AwsOutput struct{ *pulumi.OutputState }

func (AwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Aws)(nil)).Elem()
}

func (o AwsOutput) ToAwsOutput() AwsOutput {
	return o
}

func (o AwsOutput) ToAwsOutputWithContext(ctx context.Context) AwsOutput {
	return o
}

// Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.
func (o AwsOutput) CrossAccountAccess() AwsCrossAccountAccessPtrOutput {
	return o.ApplyT(func(v *Aws) AwsCrossAccountAccessPtrOutput { return v.CrossAccountAccess }).(AwsCrossAccountAccessPtrOutput)
}

// Description of the resource.
func (o AwsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource.
func (o AwsOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// Inherit credentials from the delegate.
func (o AwsOutput) InheritFromDelegate() AwsInheritFromDelegatePtrOutput {
	return o.ApplyT(func(v *Aws) AwsInheritFromDelegatePtrOutput { return v.InheritFromDelegate }).(AwsInheritFromDelegatePtrOutput)
}

// Use IAM role for service accounts.
func (o AwsOutput) Irsa() AwsIrsaPtrOutput {
	return o.ApplyT(func(v *Aws) AwsIrsaPtrOutput { return v.Irsa }).(AwsIrsaPtrOutput)
}

// Use IAM role for service accounts.
func (o AwsOutput) Manual() AwsManualPtrOutput {
	return o.ApplyT(func(v *Aws) AwsManualPtrOutput { return v.Manual }).(AwsManualPtrOutput)
}

// Name of the resource.
func (o AwsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier of the organization.
func (o AwsOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o AwsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o AwsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Aws) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type AwsArrayOutput struct{ *pulumi.OutputState }

func (AwsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Aws)(nil)).Elem()
}

func (o AwsArrayOutput) ToAwsArrayOutput() AwsArrayOutput {
	return o
}

func (o AwsArrayOutput) ToAwsArrayOutputWithContext(ctx context.Context) AwsArrayOutput {
	return o
}

func (o AwsArrayOutput) Index(i pulumi.IntInput) AwsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Aws {
		return vs[0].([]*Aws)[vs[1].(int)]
	}).(AwsOutput)
}

type AwsMapOutput struct{ *pulumi.OutputState }

func (AwsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Aws)(nil)).Elem()
}

func (o AwsMapOutput) ToAwsMapOutput() AwsMapOutput {
	return o
}

func (o AwsMapOutput) ToAwsMapOutputWithContext(ctx context.Context) AwsMapOutput {
	return o
}

func (o AwsMapOutput) MapIndex(k pulumi.StringInput) AwsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Aws {
		return vs[0].(map[string]*Aws)[vs[1].(string)]
	}).(AwsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsInput)(nil)).Elem(), &Aws{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsArrayInput)(nil)).Elem(), AwsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsMapInput)(nil)).Elem(), AwsMap{})
	pulumi.RegisterOutputType(AwsOutput{})
	pulumi.RegisterOutputType(AwsArrayOutput{})
	pulumi.RegisterOutputType(AwsMapOutput{})
}
