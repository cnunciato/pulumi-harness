// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platformconnector

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Datasource for looking up a Gcp connector.
func LookupGcp(ctx *pulumi.Context, args *LookupGcpArgs, opts ...pulumi.InvokeOption) (*LookupGcpResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupGcpResult
	err := ctx.Invoke("harness:PlatformConnector/getGcp:getGcp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGcp.
type LookupGcpArgs struct {
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getGcp.
type LookupGcpResult struct {
	// Description of the resource.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique identifier of the resource.
	Identifier *string `pulumi:"identifier"`
	// Inherit configuration from delegate.
	InheritFromDelegates []GetGcpInheritFromDelegate `pulumi:"inheritFromDelegates"`
	// Manual credential configuration.
	Manuals []GetGcpManual `pulumi:"manuals"`
	// Name of the resource.
	Name *string `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId *string `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId *string `pulumi:"projectId"`
	// Tags to associate with the resource. Tags should be in the form `name:value`.
	Tags []string `pulumi:"tags"`
}

func LookupGcpOutput(ctx *pulumi.Context, args LookupGcpOutputArgs, opts ...pulumi.InvokeOption) LookupGcpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGcpResult, error) {
			args := v.(LookupGcpArgs)
			r, err := LookupGcp(ctx, &args, opts...)
			var s LookupGcpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGcpResultOutput)
}

// A collection of arguments for invoking getGcp.
type LookupGcpOutputArgs struct {
	// Unique identifier of the resource.
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// Name of the resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Unique identifier of the organization.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Unique identifier of the project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupGcpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGcpArgs)(nil)).Elem()
}

// A collection of values returned by getGcp.
type LookupGcpResultOutput struct{ *pulumi.OutputState }

func (LookupGcpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGcpResult)(nil)).Elem()
}

func (o LookupGcpResultOutput) ToLookupGcpResultOutput() LookupGcpResultOutput {
	return o
}

func (o LookupGcpResultOutput) ToLookupGcpResultOutputWithContext(ctx context.Context) LookupGcpResultOutput {
	return o
}

// Description of the resource.
func (o LookupGcpResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGcpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGcpResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique identifier of the resource.
func (o LookupGcpResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGcpResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// Inherit configuration from delegate.
func (o LookupGcpResultOutput) InheritFromDelegates() GetGcpInheritFromDelegateArrayOutput {
	return o.ApplyT(func(v LookupGcpResult) []GetGcpInheritFromDelegate { return v.InheritFromDelegates }).(GetGcpInheritFromDelegateArrayOutput)
}

// Manual credential configuration.
func (o LookupGcpResultOutput) Manuals() GetGcpManualArrayOutput {
	return o.ApplyT(func(v LookupGcpResult) []GetGcpManual { return v.Manuals }).(GetGcpManualArrayOutput)
}

// Name of the resource.
func (o LookupGcpResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGcpResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Unique identifier of the organization.
func (o LookupGcpResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGcpResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the project.
func (o LookupGcpResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGcpResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags to associate with the resource. Tags should be in the form `name:value`.
func (o LookupGcpResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGcpResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGcpResultOutput{})
}
