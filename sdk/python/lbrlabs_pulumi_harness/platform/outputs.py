# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ResourceGroupIncludedScope',
    'ResourceGroupResourceFilter',
    'ResourceGroupResourceFilterResource',
    'ResourceGroupResourceFilterResourceAttributeFilter',
    'SecretSshkeyKerberos',
    'SecretSshkeyKerberosTgtKeyTabFilePathSpec',
    'SecretSshkeyKerberosTgtPasswordSpec',
    'SecretSshkeySsh',
    'SecretSshkeySshSshPasswordCredential',
    'SecretSshkeySshSshkeyPathCredential',
    'SecretSshkeySshSshkeyReferenceCredential',
    'UsergroupNotificationConfig',
    'GetResourceGroupIncludedScopeResult',
    'GetResourceGroupResourceFilterResult',
    'GetResourceGroupResourceFilterResourceResult',
    'GetResourceGroupResourceFilterResourceAttributeFilterResult',
    'GetSecretSshkeyKerberoResult',
    'GetSecretSshkeyKerberoTgtKeyTabFilePathSpecResult',
    'GetSecretSshkeyKerberoTgtPasswordSpecResult',
    'GetSecretSshkeySshResult',
    'GetSecretSshkeySshSshPasswordCredentialResult',
    'GetSecretSshkeySshSshkeyPathCredentialResult',
    'GetSecretSshkeySshSshkeyReferenceCredentialResult',
    'GetUsergroupNotificationConfigResult',
]

@pulumi.output_type
class ResourceGroupIncludedScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupIncludedScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupIncludedScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupIncludedScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter: str,
                 account_id: Optional[str] = None,
                 org_id: Optional[str] = None,
                 project_id: Optional[str] = None):
        """
        :param str filter: Can be one of these 2 EXCLUDING*CHILD*SCOPES or INCLUDING*CHILD*SCOPES
        :param str account_id: Account Identifier of the account
        :param str org_id: Organization Identifier
        :param str project_id: Project Identifier
        """
        pulumi.set(__self__, "filter", filter)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        Can be one of these 2 EXCLUDING*CHILD*SCOPES or INCLUDING*CHILD*SCOPES
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        Account Identifier of the account
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        """
        Organization Identifier
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project Identifier
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class ResourceGroupResourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeAllResources":
            suggest = "include_all_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupResourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupResourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupResourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_all_resources: Optional[bool] = None,
                 resources: Optional[Sequence['outputs.ResourceGroupResourceFilterResource']] = None):
        """
        :param bool include_all_resources: Include all resource or not
        :param Sequence['ResourceGroupResourceFilterResourceArgs'] resources: Resources for a resource group
        """
        if include_all_resources is not None:
            pulumi.set(__self__, "include_all_resources", include_all_resources)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="includeAllResources")
    def include_all_resources(self) -> Optional[bool]:
        """
        Include all resource or not
        """
        return pulumi.get(self, "include_all_resources")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ResourceGroupResourceFilterResource']]:
        """
        Resources for a resource group
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class ResourceGroupResourceFilterResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "attributeFilters":
            suggest = "attribute_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupResourceFilterResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupResourceFilterResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupResourceFilterResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 attribute_filters: Optional[Sequence['outputs.ResourceGroupResourceFilterResourceAttributeFilter']] = None,
                 identifiers: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "resource_type", resource_type)
        if attribute_filters is not None:
            pulumi.set(__self__, "attribute_filters", attribute_filters)
        if identifiers is not None:
            pulumi.set(__self__, "identifiers", identifiers)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="attributeFilters")
    def attribute_filters(self) -> Optional[Sequence['outputs.ResourceGroupResourceFilterResourceAttributeFilter']]:
        return pulumi.get(self, "attribute_filters")

    @property
    @pulumi.getter
    def identifiers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "identifiers")


@pulumi.output_type
class ResourceGroupResourceFilterResourceAttributeFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeName":
            suggest = "attribute_name"
        elif key == "attributeValues":
            suggest = "attribute_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceGroupResourceFilterResourceAttributeFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceGroupResourceFilterResourceAttributeFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceGroupResourceFilterResourceAttributeFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribute_name: Optional[str] = None,
                 attribute_values: Optional[Sequence[str]] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_values is not None:
            pulumi.set(__self__, "attribute_values", attribute_values)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValues")
    def attribute_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attribute_values")


@pulumi.output_type
class SecretSshkeyKerberos(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tgtGenerationMethod":
            suggest = "tgt_generation_method"
        elif key == "tgtKeyTabFilePathSpec":
            suggest = "tgt_key_tab_file_path_spec"
        elif key == "tgtPasswordSpec":
            suggest = "tgt_password_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretSshkeyKerberos. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretSshkeyKerberos.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretSshkeyKerberos.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 principal: str,
                 realm: str,
                 tgt_generation_method: Optional[str] = None,
                 tgt_key_tab_file_path_spec: Optional['outputs.SecretSshkeyKerberosTgtKeyTabFilePathSpec'] = None,
                 tgt_password_spec: Optional['outputs.SecretSshkeyKerberosTgtPasswordSpec'] = None):
        """
        :param str principal: Username to use for authentication.
        :param str realm: Reference to a secret containing the password to use for authentication.
        :param str tgt_generation_method: Method to generate tgt
        :param 'SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs' tgt_key_tab_file_path_spec: Authenticate to App Dynamics using username and password.
        :param 'SecretSshkeyKerberosTgtPasswordSpecArgs' tgt_password_spec: Authenticate to App Dynamics using username and password.
        """
        pulumi.set(__self__, "principal", principal)
        pulumi.set(__self__, "realm", realm)
        if tgt_generation_method is not None:
            pulumi.set(__self__, "tgt_generation_method", tgt_generation_method)
        if tgt_key_tab_file_path_spec is not None:
            pulumi.set(__self__, "tgt_key_tab_file_path_spec", tgt_key_tab_file_path_spec)
        if tgt_password_spec is not None:
            pulumi.set(__self__, "tgt_password_spec", tgt_password_spec)

    @property
    @pulumi.getter
    def principal(self) -> str:
        """
        Username to use for authentication.
        """
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter
    def realm(self) -> str:
        """
        Reference to a secret containing the password to use for authentication.
        """
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="tgtGenerationMethod")
    def tgt_generation_method(self) -> Optional[str]:
        """
        Method to generate tgt
        """
        return pulumi.get(self, "tgt_generation_method")

    @property
    @pulumi.getter(name="tgtKeyTabFilePathSpec")
    def tgt_key_tab_file_path_spec(self) -> Optional['outputs.SecretSshkeyKerberosTgtKeyTabFilePathSpec']:
        """
        Authenticate to App Dynamics using username and password.
        """
        return pulumi.get(self, "tgt_key_tab_file_path_spec")

    @property
    @pulumi.getter(name="tgtPasswordSpec")
    def tgt_password_spec(self) -> Optional['outputs.SecretSshkeyKerberosTgtPasswordSpec']:
        """
        Authenticate to App Dynamics using username and password.
        """
        return pulumi.get(self, "tgt_password_spec")


@pulumi.output_type
class SecretSshkeyKerberosTgtKeyTabFilePathSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyPath":
            suggest = "key_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretSshkeyKerberosTgtKeyTabFilePathSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretSshkeyKerberosTgtKeyTabFilePathSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretSshkeyKerberosTgtKeyTabFilePathSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_path: Optional[str] = None):
        if key_path is not None:
            pulumi.set(__self__, "key_path", key_path)

    @property
    @pulumi.getter(name="keyPath")
    def key_path(self) -> Optional[str]:
        return pulumi.get(self, "key_path")


@pulumi.output_type
class SecretSshkeyKerberosTgtPasswordSpec(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")


@pulumi.output_type
class SecretSshkeySsh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "credentialType":
            suggest = "credential_type"
        elif key == "sshPasswordCredential":
            suggest = "ssh_password_credential"
        elif key == "sshkeyPathCredential":
            suggest = "sshkey_path_credential"
        elif key == "sshkeyReferenceCredential":
            suggest = "sshkey_reference_credential"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretSshkeySsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretSshkeySsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretSshkeySsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 credential_type: str,
                 ssh_password_credential: Optional['outputs.SecretSshkeySshSshPasswordCredential'] = None,
                 sshkey_path_credential: Optional['outputs.SecretSshkeySshSshkeyPathCredential'] = None,
                 sshkey_reference_credential: Optional['outputs.SecretSshkeySshSshkeyReferenceCredential'] = None):
        """
        :param str credential_type: This specifies SSH credential type as Password, KeyPath or KeyReference
        :param 'SecretSshkeySshSshPasswordCredentialArgs' ssh_password_credential: SSH credential of type keyReference
        :param 'SecretSshkeySshSshkeyPathCredentialArgs' sshkey_path_credential: SSH credential of type keyPath
        :param 'SecretSshkeySshSshkeyReferenceCredentialArgs' sshkey_reference_credential: SSH credential of type keyReference
        """
        pulumi.set(__self__, "credential_type", credential_type)
        if ssh_password_credential is not None:
            pulumi.set(__self__, "ssh_password_credential", ssh_password_credential)
        if sshkey_path_credential is not None:
            pulumi.set(__self__, "sshkey_path_credential", sshkey_path_credential)
        if sshkey_reference_credential is not None:
            pulumi.set(__self__, "sshkey_reference_credential", sshkey_reference_credential)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        """
        This specifies SSH credential type as Password, KeyPath or KeyReference
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="sshPasswordCredential")
    def ssh_password_credential(self) -> Optional['outputs.SecretSshkeySshSshPasswordCredential']:
        """
        SSH credential of type keyReference
        """
        return pulumi.get(self, "ssh_password_credential")

    @property
    @pulumi.getter(name="sshkeyPathCredential")
    def sshkey_path_credential(self) -> Optional['outputs.SecretSshkeySshSshkeyPathCredential']:
        """
        SSH credential of type keyPath
        """
        return pulumi.get(self, "sshkey_path_credential")

    @property
    @pulumi.getter(name="sshkeyReferenceCredential")
    def sshkey_reference_credential(self) -> Optional['outputs.SecretSshkeySshSshkeyReferenceCredential']:
        """
        SSH credential of type keyReference
        """
        return pulumi.get(self, "sshkey_reference_credential")


@pulumi.output_type
class SecretSshkeySshSshPasswordCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretSshkeySshSshPasswordCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretSshkeySshSshPasswordCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretSshkeySshSshPasswordCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 user_name: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class SecretSshkeySshSshkeyPathCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyPath":
            suggest = "key_path"
        elif key == "userName":
            suggest = "user_name"
        elif key == "encryptedPassphrase":
            suggest = "encrypted_passphrase"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretSshkeySshSshkeyPathCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretSshkeySshSshkeyPathCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretSshkeySshSshkeyPathCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_path: str,
                 user_name: str,
                 encrypted_passphrase: Optional[str] = None):
        pulumi.set(__self__, "key_path", key_path)
        pulumi.set(__self__, "user_name", user_name)
        if encrypted_passphrase is not None:
            pulumi.set(__self__, "encrypted_passphrase", encrypted_passphrase)

    @property
    @pulumi.getter(name="keyPath")
    def key_path(self) -> str:
        return pulumi.get(self, "key_path")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="encryptedPassphrase")
    def encrypted_passphrase(self) -> Optional[str]:
        return pulumi.get(self, "encrypted_passphrase")


@pulumi.output_type
class SecretSshkeySshSshkeyReferenceCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"
        elif key == "encryptedPassphrase":
            suggest = "encrypted_passphrase"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretSshkeySshSshkeyReferenceCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretSshkeySshSshkeyReferenceCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretSshkeySshSshkeyReferenceCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_name: str,
                 encrypted_passphrase: Optional[str] = None,
                 key: Optional[str] = None):
        pulumi.set(__self__, "user_name", user_name)
        if encrypted_passphrase is not None:
            pulumi.set(__self__, "encrypted_passphrase", encrypted_passphrase)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="encryptedPassphrase")
    def encrypted_passphrase(self) -> Optional[str]:
        return pulumi.get(self, "encrypted_passphrase")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class UsergroupNotificationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupEmail":
            suggest = "group_email"
        elif key == "microsoftTeamsWebhookUrl":
            suggest = "microsoft_teams_webhook_url"
        elif key == "pagerDutyKey":
            suggest = "pager_duty_key"
        elif key == "slackWebhookUrl":
            suggest = "slack_webhook_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsergroupNotificationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsergroupNotificationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsergroupNotificationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_email: Optional[str] = None,
                 microsoft_teams_webhook_url: Optional[str] = None,
                 pager_duty_key: Optional[str] = None,
                 slack_webhook_url: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str group_email: Group email
        :param str microsoft_teams_webhook_url: Url of Microsoft teams webhook
        :param str pager_duty_key: Pager duty key
        :param str slack_webhook_url: Url of slack webhook
        :param str type: Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS
        """
        if group_email is not None:
            pulumi.set(__self__, "group_email", group_email)
        if microsoft_teams_webhook_url is not None:
            pulumi.set(__self__, "microsoft_teams_webhook_url", microsoft_teams_webhook_url)
        if pager_duty_key is not None:
            pulumi.set(__self__, "pager_duty_key", pager_duty_key)
        if slack_webhook_url is not None:
            pulumi.set(__self__, "slack_webhook_url", slack_webhook_url)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupEmail")
    def group_email(self) -> Optional[str]:
        """
        Group email
        """
        return pulumi.get(self, "group_email")

    @property
    @pulumi.getter(name="microsoftTeamsWebhookUrl")
    def microsoft_teams_webhook_url(self) -> Optional[str]:
        """
        Url of Microsoft teams webhook
        """
        return pulumi.get(self, "microsoft_teams_webhook_url")

    @property
    @pulumi.getter(name="pagerDutyKey")
    def pager_duty_key(self) -> Optional[str]:
        """
        Pager duty key
        """
        return pulumi.get(self, "pager_duty_key")

    @property
    @pulumi.getter(name="slackWebhookUrl")
    def slack_webhook_url(self) -> Optional[str]:
        """
        Url of slack webhook
        """
        return pulumi.get(self, "slack_webhook_url")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetResourceGroupIncludedScopeResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 filter: str,
                 org_id: str,
                 project_id: str):
        """
        :param str account_id: Account Identifier of the account
        :param str org_id: Unique identifier of the organization.
        :param str project_id: Unique identifier of the project.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        Account Identifier of the account
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        Unique identifier of the organization.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Unique identifier of the project.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetResourceGroupResourceFilterResult(dict):
    def __init__(__self__, *,
                 include_all_resources: bool,
                 resources: Sequence['outputs.GetResourceGroupResourceFilterResourceResult']):
        pulumi.set(__self__, "include_all_resources", include_all_resources)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="includeAllResources")
    def include_all_resources(self) -> bool:
        return pulumi.get(self, "include_all_resources")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetResourceGroupResourceFilterResourceResult']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetResourceGroupResourceFilterResourceResult(dict):
    def __init__(__self__, *,
                 attribute_filters: Sequence['outputs.GetResourceGroupResourceFilterResourceAttributeFilterResult'],
                 identifiers: Sequence[str],
                 resource_type: str):
        pulumi.set(__self__, "attribute_filters", attribute_filters)
        pulumi.set(__self__, "identifiers", identifiers)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="attributeFilters")
    def attribute_filters(self) -> Sequence['outputs.GetResourceGroupResourceFilterResourceAttributeFilterResult']:
        return pulumi.get(self, "attribute_filters")

    @property
    @pulumi.getter
    def identifiers(self) -> Sequence[str]:
        return pulumi.get(self, "identifiers")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetResourceGroupResourceFilterResourceAttributeFilterResult(dict):
    def __init__(__self__, *,
                 attribute_name: str,
                 attribute_values: Sequence[str]):
        pulumi.set(__self__, "attribute_name", attribute_name)
        pulumi.set(__self__, "attribute_values", attribute_values)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> str:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValues")
    def attribute_values(self) -> Sequence[str]:
        return pulumi.get(self, "attribute_values")


@pulumi.output_type
class GetSecretSshkeyKerberoResult(dict):
    def __init__(__self__, *,
                 principal: str,
                 realm: str,
                 tgt_generation_method: str,
                 tgt_key_tab_file_path_specs: Sequence['outputs.GetSecretSshkeyKerberoTgtKeyTabFilePathSpecResult'],
                 tgt_password_specs: Sequence['outputs.GetSecretSshkeyKerberoTgtPasswordSpecResult']):
        pulumi.set(__self__, "principal", principal)
        pulumi.set(__self__, "realm", realm)
        pulumi.set(__self__, "tgt_generation_method", tgt_generation_method)
        pulumi.set(__self__, "tgt_key_tab_file_path_specs", tgt_key_tab_file_path_specs)
        pulumi.set(__self__, "tgt_password_specs", tgt_password_specs)

    @property
    @pulumi.getter
    def principal(self) -> str:
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter
    def realm(self) -> str:
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="tgtGenerationMethod")
    def tgt_generation_method(self) -> str:
        return pulumi.get(self, "tgt_generation_method")

    @property
    @pulumi.getter(name="tgtKeyTabFilePathSpecs")
    def tgt_key_tab_file_path_specs(self) -> Sequence['outputs.GetSecretSshkeyKerberoTgtKeyTabFilePathSpecResult']:
        return pulumi.get(self, "tgt_key_tab_file_path_specs")

    @property
    @pulumi.getter(name="tgtPasswordSpecs")
    def tgt_password_specs(self) -> Sequence['outputs.GetSecretSshkeyKerberoTgtPasswordSpecResult']:
        return pulumi.get(self, "tgt_password_specs")


@pulumi.output_type
class GetSecretSshkeyKerberoTgtKeyTabFilePathSpecResult(dict):
    def __init__(__self__, *,
                 key_path: str):
        pulumi.set(__self__, "key_path", key_path)

    @property
    @pulumi.getter(name="keyPath")
    def key_path(self) -> str:
        return pulumi.get(self, "key_path")


@pulumi.output_type
class GetSecretSshkeyKerberoTgtPasswordSpecResult(dict):
    def __init__(__self__, *,
                 password: str):
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")


@pulumi.output_type
class GetSecretSshkeySshResult(dict):
    def __init__(__self__, *,
                 credential_type: str,
                 ssh_password_credentials: Sequence['outputs.GetSecretSshkeySshSshPasswordCredentialResult'],
                 sshkey_path_credentials: Sequence['outputs.GetSecretSshkeySshSshkeyPathCredentialResult'],
                 sshkey_reference_credentials: Sequence['outputs.GetSecretSshkeySshSshkeyReferenceCredentialResult']):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "ssh_password_credentials", ssh_password_credentials)
        pulumi.set(__self__, "sshkey_path_credentials", sshkey_path_credentials)
        pulumi.set(__self__, "sshkey_reference_credentials", sshkey_reference_credentials)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="sshPasswordCredentials")
    def ssh_password_credentials(self) -> Sequence['outputs.GetSecretSshkeySshSshPasswordCredentialResult']:
        return pulumi.get(self, "ssh_password_credentials")

    @property
    @pulumi.getter(name="sshkeyPathCredentials")
    def sshkey_path_credentials(self) -> Sequence['outputs.GetSecretSshkeySshSshkeyPathCredentialResult']:
        return pulumi.get(self, "sshkey_path_credentials")

    @property
    @pulumi.getter(name="sshkeyReferenceCredentials")
    def sshkey_reference_credentials(self) -> Sequence['outputs.GetSecretSshkeySshSshkeyReferenceCredentialResult']:
        return pulumi.get(self, "sshkey_reference_credentials")


@pulumi.output_type
class GetSecretSshkeySshSshPasswordCredentialResult(dict):
    def __init__(__self__, *,
                 password: str,
                 user_name: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetSecretSshkeySshSshkeyPathCredentialResult(dict):
    def __init__(__self__, *,
                 encrypted_passphrase: str,
                 key_path: str,
                 user_name: str):
        pulumi.set(__self__, "encrypted_passphrase", encrypted_passphrase)
        pulumi.set(__self__, "key_path", key_path)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="encryptedPassphrase")
    def encrypted_passphrase(self) -> str:
        return pulumi.get(self, "encrypted_passphrase")

    @property
    @pulumi.getter(name="keyPath")
    def key_path(self) -> str:
        return pulumi.get(self, "key_path")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetSecretSshkeySshSshkeyReferenceCredentialResult(dict):
    def __init__(__self__, *,
                 encrypted_assphrase: str,
                 key: str,
                 user_name: str):
        pulumi.set(__self__, "encrypted_assphrase", encrypted_assphrase)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="encryptedAssphrase")
    def encrypted_assphrase(self) -> str:
        return pulumi.get(self, "encrypted_assphrase")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetUsergroupNotificationConfigResult(dict):
    def __init__(__self__, *,
                 group_email: str,
                 microsoft_teams_webhook_url: str,
                 pager_duty_key: str,
                 slack_webhook_url: str,
                 type: str):
        """
        :param str group_email: Group email
        :param str microsoft_teams_webhook_url: Url of Microsoft teams webhook
        :param str pager_duty_key: Pager duty key
        :param str slack_webhook_url: Url of slack webhook
        :param str type: Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS
        """
        pulumi.set(__self__, "group_email", group_email)
        pulumi.set(__self__, "microsoft_teams_webhook_url", microsoft_teams_webhook_url)
        pulumi.set(__self__, "pager_duty_key", pager_duty_key)
        pulumi.set(__self__, "slack_webhook_url", slack_webhook_url)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="groupEmail")
    def group_email(self) -> str:
        """
        Group email
        """
        return pulumi.get(self, "group_email")

    @property
    @pulumi.getter(name="microsoftTeamsWebhookUrl")
    def microsoft_teams_webhook_url(self) -> str:
        """
        Url of Microsoft teams webhook
        """
        return pulumi.get(self, "microsoft_teams_webhook_url")

    @property
    @pulumi.getter(name="pagerDutyKey")
    def pager_duty_key(self) -> str:
        """
        Pager duty key
        """
        return pulumi.get(self, "pager_duty_key")

    @property
    @pulumi.getter(name="slackWebhookUrl")
    def slack_webhook_url(self) -> str:
        """
        Url of slack webhook
        """
        return pulumi.get(self, "slack_webhook_url")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS
        """
        return pulumi.get(self, "type")


