// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.KubernetesConnectorArgs;
import com.pulumi.harness.platform.inputs.KubernetesConnectorState;
import com.pulumi.harness.platform.outputs.KubernetesConnectorClientKeyCert;
import com.pulumi.harness.platform.outputs.KubernetesConnectorInheritFromDelegate;
import com.pulumi.harness.platform.outputs.KubernetesConnectorOpenidConnect;
import com.pulumi.harness.platform.outputs.KubernetesConnectorServiceAccount;
import com.pulumi.harness.platform.outputs.KubernetesConnectorUsernamePassword;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating a K8s connector.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.KubernetesConnector;
 * import com.pulumi.harness.platform.KubernetesConnectorArgs;
 * import com.pulumi.harness.platform.inputs.KubernetesConnectorClientKeyCertArgs;
 * import com.pulumi.harness.platform.inputs.KubernetesConnectorUsernamePasswordArgs;
 * import com.pulumi.harness.platform.inputs.KubernetesConnectorServiceAccountArgs;
 * import com.pulumi.harness.platform.inputs.KubernetesConnectorOpenidConnectArgs;
 * import com.pulumi.harness.platform.inputs.KubernetesConnectorInheritFromDelegateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var clientKeyCert = new KubernetesConnector(&#34;clientKeyCert&#34;, KubernetesConnectorArgs.builder()        
 *             .clientKeyCert(KubernetesConnectorClientKeyCertArgs.builder()
 *                 .caCertRef(&#34;account.TEST_k8ss_client_stuff&#34;)
 *                 .clientCertRef(&#34;account.test_k8s_client_cert&#34;)
 *                 .clientKeyAlgorithm(&#34;RSA&#34;)
 *                 .clientKeyPassphraseRef(&#34;account.TEST_k8s_client_test&#34;)
 *                 .clientKeyRef(&#34;account.TEST_k8s_client_key&#34;)
 *                 .masterUrl(&#34;https://kubernetes.example.com&#34;)
 *                 .build())
 *             .delegateSelectors(&#34;harness-delegate&#34;)
 *             .description(&#34;description&#34;)
 *             .identifier(&#34;identifier&#34;)
 *             .tags(&#34;foo:bar&#34;)
 *             .build());
 * 
 *         var usernamePassword = new KubernetesConnector(&#34;usernamePassword&#34;, KubernetesConnectorArgs.builder()        
 *             .delegateSelectors(&#34;harness-delegate&#34;)
 *             .description(&#34;description&#34;)
 *             .identifier(&#34;identifier&#34;)
 *             .tags(&#34;foo:bar&#34;)
 *             .usernamePassword(KubernetesConnectorUsernamePasswordArgs.builder()
 *                 .masterUrl(&#34;https://kubernetes.example.com&#34;)
 *                 .passwordRef(&#34;account.TEST_k8s_client_test&#34;)
 *                 .username(&#34;admin&#34;)
 *                 .build())
 *             .build());
 * 
 *         var serviceAccount = new KubernetesConnector(&#34;serviceAccount&#34;, KubernetesConnectorArgs.builder()        
 *             .delegateSelectors(&#34;harness-delegate&#34;)
 *             .description(&#34;description&#34;)
 *             .identifier(&#34;identifier&#34;)
 *             .serviceAccount(KubernetesConnectorServiceAccountArgs.builder()
 *                 .masterUrl(&#34;https://kubernetes.example.com&#34;)
 *                 .serviceAccountTokenRef(&#34;account.TEST_k8s_client_test&#34;)
 *                 .build())
 *             .tags(&#34;foo:bar&#34;)
 *             .build());
 * 
 *         var openIDConnect = new KubernetesConnector(&#34;openIDConnect&#34;, KubernetesConnectorArgs.builder()        
 *             .delegateSelectors(&#34;harness-delegate&#34;)
 *             .description(&#34;description&#34;)
 *             .identifier(&#34;%[1]s&#34;)
 *             .openidConnect(KubernetesConnectorOpenidConnectArgs.builder()
 *                 .clientIdRef(&#34;account.TEST_k8s_client_test&#34;)
 *                 .issuerUrl(&#34;https://oidc.example.com&#34;)
 *                 .masterUrl(&#34;https://kubernetes.example.com&#34;)
 *                 .passwordRef(&#34;account.TEST_k8s_client_test&#34;)
 *                 .scopes(                
 *                     &#34;scope1&#34;,
 *                     &#34;scope2&#34;)
 *                 .secretRef(&#34;account.TEST_k8s_client_test&#34;)
 *                 .usernameRef(&#34;account.TEST_k8s_client_test&#34;)
 *                 .build())
 *             .tags(&#34;foo:bar&#34;)
 *             .build());
 * 
 *         var inheritFromDelegate = new KubernetesConnector(&#34;inheritFromDelegate&#34;, KubernetesConnectorArgs.builder()        
 *             .description(&#34;description&#34;)
 *             .identifier(&#34;identifier&#34;)
 *             .inheritFromDelegate(KubernetesConnectorInheritFromDelegateArgs.builder()
 *                 .delegateSelectors(&#34;harness-delegate&#34;)
 *                 .build())
 *             .tags(&#34;foo:bar&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Import using kubernetes connector id
 * 
 * ```sh
 *  $ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example &lt;connector_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/kubernetesConnector:KubernetesConnector")
public class KubernetesConnector extends com.pulumi.resources.CustomResource {
    /**
     * Client key and certificate config for the connector.
     * 
     */
    @Export(name="clientKeyCert", type=KubernetesConnectorClientKeyCert.class, parameters={})
    private Output</* @Nullable */ KubernetesConnectorClientKeyCert> clientKeyCert;

    /**
     * @return Client key and certificate config for the connector.
     * 
     */
    public Output<Optional<KubernetesConnectorClientKeyCert>> clientKeyCert() {
        return Codegen.optional(this.clientKeyCert);
    }
    /**
     * Selectors to use for the delegate.
     * 
     */
    @Export(name="delegateSelectors", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> delegateSelectors;

    /**
     * @return Selectors to use for the delegate.
     * 
     */
    public Output<Optional<List<String>>> delegateSelectors() {
        return Codegen.optional(this.delegateSelectors);
    }
    /**
     * Description of the resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Unique identifier of the resource.
     * 
     */
    @Export(name="identifier", type=String.class, parameters={})
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Credentials are inherited from the delegate.
     * 
     */
    @Export(name="inheritFromDelegate", type=KubernetesConnectorInheritFromDelegate.class, parameters={})
    private Output</* @Nullable */ KubernetesConnectorInheritFromDelegate> inheritFromDelegate;

    /**
     * @return Credentials are inherited from the delegate.
     * 
     */
    public Output<Optional<KubernetesConnectorInheritFromDelegate>> inheritFromDelegate() {
        return Codegen.optional(this.inheritFromDelegate);
    }
    /**
     * Name of the resource.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * OpenID configuration for the connector.
     * 
     */
    @Export(name="openidConnect", type=KubernetesConnectorOpenidConnect.class, parameters={})
    private Output</* @Nullable */ KubernetesConnectorOpenidConnect> openidConnect;

    /**
     * @return OpenID configuration for the connector.
     * 
     */
    public Output<Optional<KubernetesConnectorOpenidConnect>> openidConnect() {
        return Codegen.optional(this.openidConnect);
    }
    /**
     * Unique identifier of the Organization.
     * 
     */
    @Export(name="orgId", type=String.class, parameters={})
    private Output</* @Nullable */ String> orgId;

    /**
     * @return Unique identifier of the Organization.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * Unique identifier of the Project.
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output</* @Nullable */ String> projectId;

    /**
     * @return Unique identifier of the Project.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Service account for the connector.
     * 
     */
    @Export(name="serviceAccount", type=KubernetesConnectorServiceAccount.class, parameters={})
    private Output</* @Nullable */ KubernetesConnectorServiceAccount> serviceAccount;

    /**
     * @return Service account for the connector.
     * 
     */
    public Output<Optional<KubernetesConnectorServiceAccount>> serviceAccount() {
        return Codegen.optional(this.serviceAccount);
    }
    /**
     * Tags to associate with the resource. Tags should be in the form `name:value`.
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags to associate with the resource. Tags should be in the form `name:value`.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Username and password for the connector.
     * 
     */
    @Export(name="usernamePassword", type=KubernetesConnectorUsernamePassword.class, parameters={})
    private Output</* @Nullable */ KubernetesConnectorUsernamePassword> usernamePassword;

    /**
     * @return Username and password for the connector.
     * 
     */
    public Output<Optional<KubernetesConnectorUsernamePassword>> usernamePassword() {
        return Codegen.optional(this.usernamePassword);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public KubernetesConnector(String name) {
        this(name, KubernetesConnectorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public KubernetesConnector(String name, KubernetesConnectorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public KubernetesConnector(String name, KubernetesConnectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/kubernetesConnector:KubernetesConnector", name, args == null ? KubernetesConnectorArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private KubernetesConnector(String name, Output<String> id, @Nullable KubernetesConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/kubernetesConnector:KubernetesConnector", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static KubernetesConnector get(String name, Output<String> id, @Nullable KubernetesConnectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new KubernetesConnector(name, id, state, options);
    }
}
