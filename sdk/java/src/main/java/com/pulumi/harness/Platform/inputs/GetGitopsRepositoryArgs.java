// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GetGitopsRepositoryRepoArgs;
import com.pulumi.harness.platform.inputs.GetGitopsRepositoryUpdateMaskArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGitopsRepositoryArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGitopsRepositoryArgs Empty = new GetGitopsRepositoryArgs();

    @Import(name="accountId", required=true)
    private Output<String> accountId;

    public Output<String> accountId() {
        return this.accountId;
    }

    @Import(name="agentId")
    private @Nullable Output<String> agentId;

    public Optional<Output<String>> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    @Import(name="credsOnly")
    private @Nullable Output<Boolean> credsOnly;

    public Optional<Output<Boolean>> credsOnly() {
        return Optional.ofNullable(this.credsOnly);
    }

    @Import(name="identifier", required=true)
    private Output<String> identifier;

    public Output<String> identifier() {
        return this.identifier;
    }

    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    @Import(name="projectId", required=true)
    private Output<String> projectId;

    public Output<String> projectId() {
        return this.projectId;
    }

    @Import(name="queryForceRefresh")
    private @Nullable Output<Boolean> queryForceRefresh;

    public Optional<Output<Boolean>> queryForceRefresh() {
        return Optional.ofNullable(this.queryForceRefresh);
    }

    @Import(name="queryProject")
    private @Nullable Output<String> queryProject;

    public Optional<Output<String>> queryProject() {
        return Optional.ofNullable(this.queryProject);
    }

    @Import(name="queryRepo")
    private @Nullable Output<String> queryRepo;

    public Optional<Output<String>> queryRepo() {
        return Optional.ofNullable(this.queryRepo);
    }

    @Import(name="repos", required=true)
    private Output<List<GetGitopsRepositoryRepoArgs>> repos;

    public Output<List<GetGitopsRepositoryRepoArgs>> repos() {
        return this.repos;
    }

    @Import(name="updateMasks")
    private @Nullable Output<List<GetGitopsRepositoryUpdateMaskArgs>> updateMasks;

    public Optional<Output<List<GetGitopsRepositoryUpdateMaskArgs>>> updateMasks() {
        return Optional.ofNullable(this.updateMasks);
    }

    @Import(name="upsert")
    private @Nullable Output<Boolean> upsert;

    public Optional<Output<Boolean>> upsert() {
        return Optional.ofNullable(this.upsert);
    }

    private GetGitopsRepositoryArgs() {}

    private GetGitopsRepositoryArgs(GetGitopsRepositoryArgs $) {
        this.accountId = $.accountId;
        this.agentId = $.agentId;
        this.credsOnly = $.credsOnly;
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.queryForceRefresh = $.queryForceRefresh;
        this.queryProject = $.queryProject;
        this.queryRepo = $.queryRepo;
        this.repos = $.repos;
        this.updateMasks = $.updateMasks;
        this.upsert = $.upsert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitopsRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitopsRepositoryArgs $;

        public Builder() {
            $ = new GetGitopsRepositoryArgs();
        }

        public Builder(GetGitopsRepositoryArgs defaults) {
            $ = new GetGitopsRepositoryArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder agentId(@Nullable Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        public Builder credsOnly(@Nullable Output<Boolean> credsOnly) {
            $.credsOnly = credsOnly;
            return this;
        }

        public Builder credsOnly(Boolean credsOnly) {
            return credsOnly(Output.of(credsOnly));
        }

        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder queryForceRefresh(@Nullable Output<Boolean> queryForceRefresh) {
            $.queryForceRefresh = queryForceRefresh;
            return this;
        }

        public Builder queryForceRefresh(Boolean queryForceRefresh) {
            return queryForceRefresh(Output.of(queryForceRefresh));
        }

        public Builder queryProject(@Nullable Output<String> queryProject) {
            $.queryProject = queryProject;
            return this;
        }

        public Builder queryProject(String queryProject) {
            return queryProject(Output.of(queryProject));
        }

        public Builder queryRepo(@Nullable Output<String> queryRepo) {
            $.queryRepo = queryRepo;
            return this;
        }

        public Builder queryRepo(String queryRepo) {
            return queryRepo(Output.of(queryRepo));
        }

        public Builder repos(Output<List<GetGitopsRepositoryRepoArgs>> repos) {
            $.repos = repos;
            return this;
        }

        public Builder repos(List<GetGitopsRepositoryRepoArgs> repos) {
            return repos(Output.of(repos));
        }

        public Builder repos(GetGitopsRepositoryRepoArgs... repos) {
            return repos(List.of(repos));
        }

        public Builder updateMasks(@Nullable Output<List<GetGitopsRepositoryUpdateMaskArgs>> updateMasks) {
            $.updateMasks = updateMasks;
            return this;
        }

        public Builder updateMasks(List<GetGitopsRepositoryUpdateMaskArgs> updateMasks) {
            return updateMasks(Output.of(updateMasks));
        }

        public Builder updateMasks(GetGitopsRepositoryUpdateMaskArgs... updateMasks) {
            return updateMasks(List.of(updateMasks));
        }

        public Builder upsert(@Nullable Output<Boolean> upsert) {
            $.upsert = upsert;
            return this;
        }

        public Builder upsert(Boolean upsert) {
            return upsert(Output.of(upsert));
        }

        public GetGitopsRepositoryArgs build() {
            $.accountId = Objects.requireNonNull($.accountId, "expected parameter 'accountId' to be non-null");
            $.identifier = Objects.requireNonNull($.identifier, "expected parameter 'identifier' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.repos = Objects.requireNonNull($.repos, "expected parameter 'repos' to be non-null");
            return $;
        }
    }

}
