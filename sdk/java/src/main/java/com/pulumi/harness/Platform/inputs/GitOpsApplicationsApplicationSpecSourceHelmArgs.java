// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs;
import com.pulumi.harness.platform.inputs.GitOpsApplicationsApplicationSpecSourceHelmParameterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsApplicationsApplicationSpecSourceHelmArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsApplicationsApplicationSpecSourceHelmArgs Empty = new GitOpsApplicationsApplicationSpecSourceHelmArgs();

    @Import(name="fileParameters")
    private @Nullable Output<List<GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs>> fileParameters;

    public Optional<Output<List<GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs>>> fileParameters() {
        return Optional.ofNullable(this.fileParameters);
    }

    @Import(name="parameters")
    private @Nullable Output<List<GitOpsApplicationsApplicationSpecSourceHelmParameterArgs>> parameters;

    public Optional<Output<List<GitOpsApplicationsApplicationSpecSourceHelmParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    @Import(name="passCredentials")
    private @Nullable Output<Boolean> passCredentials;

    public Optional<Output<Boolean>> passCredentials() {
        return Optional.ofNullable(this.passCredentials);
    }

    @Import(name="releaseName")
    private @Nullable Output<String> releaseName;

    public Optional<Output<String>> releaseName() {
        return Optional.ofNullable(this.releaseName);
    }

    @Import(name="valueFiles")
    private @Nullable Output<List<String>> valueFiles;

    public Optional<Output<List<String>>> valueFiles() {
        return Optional.ofNullable(this.valueFiles);
    }

    @Import(name="values")
    private @Nullable Output<String> values;

    public Optional<Output<String>> values() {
        return Optional.ofNullable(this.values);
    }

    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private GitOpsApplicationsApplicationSpecSourceHelmArgs() {}

    private GitOpsApplicationsApplicationSpecSourceHelmArgs(GitOpsApplicationsApplicationSpecSourceHelmArgs $) {
        this.fileParameters = $.fileParameters;
        this.parameters = $.parameters;
        this.passCredentials = $.passCredentials;
        this.releaseName = $.releaseName;
        this.valueFiles = $.valueFiles;
        this.values = $.values;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsApplicationsApplicationSpecSourceHelmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsApplicationsApplicationSpecSourceHelmArgs $;

        public Builder() {
            $ = new GitOpsApplicationsApplicationSpecSourceHelmArgs();
        }

        public Builder(GitOpsApplicationsApplicationSpecSourceHelmArgs defaults) {
            $ = new GitOpsApplicationsApplicationSpecSourceHelmArgs(Objects.requireNonNull(defaults));
        }

        public Builder fileParameters(@Nullable Output<List<GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs>> fileParameters) {
            $.fileParameters = fileParameters;
            return this;
        }

        public Builder fileParameters(List<GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs> fileParameters) {
            return fileParameters(Output.of(fileParameters));
        }

        public Builder fileParameters(GitOpsApplicationsApplicationSpecSourceHelmFileParameterArgs... fileParameters) {
            return fileParameters(List.of(fileParameters));
        }

        public Builder parameters(@Nullable Output<List<GitOpsApplicationsApplicationSpecSourceHelmParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(List<GitOpsApplicationsApplicationSpecSourceHelmParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder parameters(GitOpsApplicationsApplicationSpecSourceHelmParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        public Builder passCredentials(@Nullable Output<Boolean> passCredentials) {
            $.passCredentials = passCredentials;
            return this;
        }

        public Builder passCredentials(Boolean passCredentials) {
            return passCredentials(Output.of(passCredentials));
        }

        public Builder releaseName(@Nullable Output<String> releaseName) {
            $.releaseName = releaseName;
            return this;
        }

        public Builder releaseName(String releaseName) {
            return releaseName(Output.of(releaseName));
        }

        public Builder valueFiles(@Nullable Output<List<String>> valueFiles) {
            $.valueFiles = valueFiles;
            return this;
        }

        public Builder valueFiles(List<String> valueFiles) {
            return valueFiles(Output.of(valueFiles));
        }

        public Builder valueFiles(String... valueFiles) {
            return valueFiles(List.of(valueFiles));
        }

        public Builder values(@Nullable Output<String> values) {
            $.values = values;
            return this;
        }

        public Builder values(String values) {
            return values(Output.of(values));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public GitOpsApplicationsApplicationSpecSourceHelmArgs build() {
            return $;
        }
    }

}
