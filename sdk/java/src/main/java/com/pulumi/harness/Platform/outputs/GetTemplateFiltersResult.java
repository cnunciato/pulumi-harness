// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.platform.outputs.GetTemplateFiltersFilterProperty;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetTemplateFiltersResult {
    /**
     * @return Properties of the filter entity defined in Harness.
     * 
     */
    private List<GetTemplateFiltersFilterProperty> filterProperties;
    /**
     * @return This indicates visibility of filter. By default, everyone can view this filter.
     * 
     */
    private String filterVisibility;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the resource.
     * 
     */
    private String identifier;
    /**
     * @return Name of the Filter.
     * 
     */
    private String name;
    /**
     * @return Organization Identifier for the Entity.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Project Identifier for the Entity.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Type of filter. Currently supported types are {TemplateSetup, TemplateExecution, Deployment, Template, EnvironmentGroup, Environment}.
     * 
     */
    private String type;

    private GetTemplateFiltersResult() {}
    /**
     * @return Properties of the filter entity defined in Harness.
     * 
     */
    public List<GetTemplateFiltersFilterProperty> filterProperties() {
        return this.filterProperties;
    }
    /**
     * @return This indicates visibility of filter. By default, everyone can view this filter.
     * 
     */
    public String filterVisibility() {
        return this.filterVisibility;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the resource.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Name of the Filter.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Organization Identifier for the Entity.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Project Identifier for the Entity.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Type of filter. Currently supported types are {TemplateSetup, TemplateExecution, Deployment, Template, EnvironmentGroup, Environment}.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTemplateFiltersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTemplateFiltersFilterProperty> filterProperties;
        private String filterVisibility;
        private String id;
        private String identifier;
        private String name;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private String type;
        public Builder() {}
        public Builder(GetTemplateFiltersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filterProperties = defaults.filterProperties;
    	      this.filterVisibility = defaults.filterVisibility;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder filterProperties(List<GetTemplateFiltersFilterProperty> filterProperties) {
            this.filterProperties = Objects.requireNonNull(filterProperties);
            return this;
        }
        public Builder filterProperties(GetTemplateFiltersFilterProperty... filterProperties) {
            return filterProperties(List.of(filterProperties));
        }
        @CustomType.Setter
        public Builder filterVisibility(String filterVisibility) {
            this.filterVisibility = Objects.requireNonNull(filterVisibility);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetTemplateFiltersResult build() {
            final var o = new GetTemplateFiltersResult();
            o.filterProperties = filterProperties;
            o.filterVisibility = filterVisibility;
            o.id = id;
            o.identifier = identifier;
            o.name = name;
            o.orgId = orgId;
            o.projectId = projectId;
            o.type = type;
            return o;
        }
    }
}
