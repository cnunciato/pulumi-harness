// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.outputs.GetGitConnectorCommitDetail;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGitConnectorResult {
    /**
     * @return The branch of the git connector to use.
     * 
     */
    private String branch;
    /**
     * @return Custom details to use when making commits using this git connector.
     * 
     */
    private List<GetGitConnectorCommitDetail> commitDetails;
    /**
     * @return The time the git connector was created.
     * 
     */
    private String createdAt;
    /**
     * @return Delegate selectors to apply to this git connector.
     * 
     */
    private List<String> delegateSelectors;
    /**
     * @return Boolean indicating whether or not to generate a webhook url.
     * 
     */
    private Boolean generateWebhookUrl;
    /**
     * @return Id of the git connector.
     * 
     */
    private @Nullable String id;
    /**
     * @return The name of the git connector.
     * 
     */
    private @Nullable String name;
    /**
     * @return The id of the secret for connecting to the git repository.
     * 
     */
    private String passwordSecretId;
    /**
     * @return The id of the SSH secret to use.
     * 
     */
    private String sshSettingId;
    /**
     * @return The url of the git repository or account/organization.
     * 
     */
    private String url;
    /**
     * @return The type of git url being used. Options are `ACCOUNT`, and `REPO`.
     * 
     */
    private String urlType;
    /**
     * @return The name of the user used to connect to the git repository.
     * 
     */
    private String username;
    /**
     * @return The generated webhook url.
     * 
     */
    private String webhookUrl;

    private GetGitConnectorResult() {}
    /**
     * @return The branch of the git connector to use.
     * 
     */
    public String branch() {
        return this.branch;
    }
    /**
     * @return Custom details to use when making commits using this git connector.
     * 
     */
    public List<GetGitConnectorCommitDetail> commitDetails() {
        return this.commitDetails;
    }
    /**
     * @return The time the git connector was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Delegate selectors to apply to this git connector.
     * 
     */
    public List<String> delegateSelectors() {
        return this.delegateSelectors;
    }
    /**
     * @return Boolean indicating whether or not to generate a webhook url.
     * 
     */
    public Boolean generateWebhookUrl() {
        return this.generateWebhookUrl;
    }
    /**
     * @return Id of the git connector.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The name of the git connector.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The id of the secret for connecting to the git repository.
     * 
     */
    public String passwordSecretId() {
        return this.passwordSecretId;
    }
    /**
     * @return The id of the SSH secret to use.
     * 
     */
    public String sshSettingId() {
        return this.sshSettingId;
    }
    /**
     * @return The url of the git repository or account/organization.
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return The type of git url being used. Options are `ACCOUNT`, and `REPO`.
     * 
     */
    public String urlType() {
        return this.urlType;
    }
    /**
     * @return The name of the user used to connect to the git repository.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return The generated webhook url.
     * 
     */
    public String webhookUrl() {
        return this.webhookUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitConnectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String branch;
        private List<GetGitConnectorCommitDetail> commitDetails;
        private String createdAt;
        private List<String> delegateSelectors;
        private Boolean generateWebhookUrl;
        private @Nullable String id;
        private @Nullable String name;
        private String passwordSecretId;
        private String sshSettingId;
        private String url;
        private String urlType;
        private String username;
        private String webhookUrl;
        public Builder() {}
        public Builder(GetGitConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.commitDetails = defaults.commitDetails;
    	      this.createdAt = defaults.createdAt;
    	      this.delegateSelectors = defaults.delegateSelectors;
    	      this.generateWebhookUrl = defaults.generateWebhookUrl;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.passwordSecretId = defaults.passwordSecretId;
    	      this.sshSettingId = defaults.sshSettingId;
    	      this.url = defaults.url;
    	      this.urlType = defaults.urlType;
    	      this.username = defaults.username;
    	      this.webhookUrl = defaults.webhookUrl;
        }

        @CustomType.Setter
        public Builder branch(String branch) {
            this.branch = Objects.requireNonNull(branch);
            return this;
        }
        @CustomType.Setter
        public Builder commitDetails(List<GetGitConnectorCommitDetail> commitDetails) {
            this.commitDetails = Objects.requireNonNull(commitDetails);
            return this;
        }
        public Builder commitDetails(GetGitConnectorCommitDetail... commitDetails) {
            return commitDetails(List.of(commitDetails));
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder delegateSelectors(List<String> delegateSelectors) {
            this.delegateSelectors = Objects.requireNonNull(delegateSelectors);
            return this;
        }
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }
        @CustomType.Setter
        public Builder generateWebhookUrl(Boolean generateWebhookUrl) {
            this.generateWebhookUrl = Objects.requireNonNull(generateWebhookUrl);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder passwordSecretId(String passwordSecretId) {
            this.passwordSecretId = Objects.requireNonNull(passwordSecretId);
            return this;
        }
        @CustomType.Setter
        public Builder sshSettingId(String sshSettingId) {
            this.sshSettingId = Objects.requireNonNull(sshSettingId);
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        @CustomType.Setter
        public Builder urlType(String urlType) {
            this.urlType = Objects.requireNonNull(urlType);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        @CustomType.Setter
        public Builder webhookUrl(String webhookUrl) {
            this.webhookUrl = Objects.requireNonNull(webhookUrl);
            return this;
        }
        public GetGitConnectorResult build() {
            final var o = new GetGitConnectorResult();
            o.branch = branch;
            o.commitDetails = commitDetails;
            o.createdAt = createdAt;
            o.delegateSelectors = delegateSelectors;
            o.generateWebhookUrl = generateWebhookUrl;
            o.id = id;
            o.name = name;
            o.passwordSecretId = passwordSecretId;
            o.sshSettingId = sshSettingId;
            o.url = url;
            o.urlType = urlType;
            o.username = username;
            o.webhookUrl = webhookUrl;
            return o;
        }
    }
}
