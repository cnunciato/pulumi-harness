// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.GitOpsRepositoryArgs;
import com.pulumi.harness.platform.inputs.GitOpsRepositoryState;
import com.pulumi.harness.platform.outputs.GitOpsRepositoryRepo;
import com.pulumi.harness.platform.outputs.GitOpsRepositoryUpdateMask;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="harness:platform/gitOpsRepository:GitOpsRepository")
public class GitOpsRepository extends com.pulumi.resources.CustomResource {
    /**
     * account identifier of the cluster.
     * 
     */
    @Export(name="accountId", type=String.class, parameters={})
    private Output<String> accountId;

    /**
     * @return account identifier of the cluster.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * agent identifier of the cluster.
     * 
     */
    @Export(name="agentId", type=String.class, parameters={})
    private Output</* @Nullable */ String> agentId;

    /**
     * @return agent identifier of the cluster.
     * 
     */
    public Output<Optional<String>> agentId() {
        return Codegen.optional(this.agentId);
    }
    /**
     * Credentials only of the Repo.
     * 
     */
    @Export(name="credsOnly", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> credsOnly;

    /**
     * @return Credentials only of the Repo.
     * 
     */
    public Output<Optional<Boolean>> credsOnly() {
        return Codegen.optional(this.credsOnly);
    }
    /**
     * identifier of the cluster.
     * 
     */
    @Export(name="identifier", type=String.class, parameters={})
    private Output<String> identifier;

    /**
     * @return identifier of the cluster.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * organization identifier of the cluster.
     * 
     */
    @Export(name="orgId", type=String.class, parameters={})
    private Output</* @Nullable */ String> orgId;

    /**
     * @return organization identifier of the cluster.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * project identifier of the cluster.
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return project identifier of the cluster.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Force refresh query for Repo.
     * 
     */
    @Export(name="queryForceRefresh", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> queryForceRefresh;

    /**
     * @return Force refresh query for Repo.
     * 
     */
    public Output<Optional<Boolean>> queryForceRefresh() {
        return Codegen.optional(this.queryForceRefresh);
    }
    /**
     * Project to Query for Repo.
     * 
     */
    @Export(name="queryProject", type=String.class, parameters={})
    private Output</* @Nullable */ String> queryProject;

    /**
     * @return Project to Query for Repo.
     * 
     */
    public Output<Optional<String>> queryProject() {
        return Codegen.optional(this.queryProject);
    }
    /**
     * Repo to Query.
     * 
     */
    @Export(name="queryRepo", type=String.class, parameters={})
    private Output</* @Nullable */ String> queryRepo;

    /**
     * @return Repo to Query.
     * 
     */
    public Output<Optional<String>> queryRepo() {
        return Codegen.optional(this.queryRepo);
    }
    /**
     * Repo Details that need to be stored.
     * 
     */
    @Export(name="repos", type=List.class, parameters={GitOpsRepositoryRepo.class})
    private Output<List<GitOpsRepositoryRepo>> repos;

    /**
     * @return Repo Details that need to be stored.
     * 
     */
    public Output<List<GitOpsRepositoryRepo>> repos() {
        return this.repos;
    }
    /**
     * Update mask of the Repository.
     * 
     */
    @Export(name="updateMasks", type=List.class, parameters={GitOpsRepositoryUpdateMask.class})
    private Output</* @Nullable */ List<GitOpsRepositoryUpdateMask>> updateMasks;

    /**
     * @return Update mask of the Repository.
     * 
     */
    public Output<Optional<List<GitOpsRepositoryUpdateMask>>> updateMasks() {
        return Codegen.optional(this.updateMasks);
    }
    /**
     * Upsert the Repo Details.
     * 
     */
    @Export(name="upsert", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> upsert;

    /**
     * @return Upsert the Repo Details.
     * 
     */
    public Output<Optional<Boolean>> upsert() {
        return Codegen.optional(this.upsert);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GitOpsRepository(String name) {
        this(name, GitOpsRepositoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GitOpsRepository(String name, GitOpsRepositoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GitOpsRepository(String name, GitOpsRepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitOpsRepository:GitOpsRepository", name, args == null ? GitOpsRepositoryArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GitOpsRepository(String name, Output<String> id, @Nullable GitOpsRepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitOpsRepository:GitOpsRepository", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GitOpsRepository get(String name, Output<String> id, @Nullable GitOpsRepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GitOpsRepository(name, id, state, options);
    }
}
