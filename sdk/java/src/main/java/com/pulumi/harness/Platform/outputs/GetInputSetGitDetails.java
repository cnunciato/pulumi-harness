// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInputSetGitDetails {
    /**
     * @return Name of the default branch (this checks out a new branch titled by branch_name).
     * 
     */
    private String baseBranch;
    /**
     * @return Name of the branch.
     * 
     */
    private String branchName;
    /**
     * @return Commit message used for the merge commit.
     * 
     */
    private String commitMessage;
    /**
     * @return Identifier of the Harness Connector used for CRUD operations on the Entity.
     * 
     */
    private String connectorRef;
    /**
     * @return File path of the Entity in the repository.
     * 
     */
    private String filePath;
    /**
     * @return Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
     * 
     */
    private String lastCommitId;
    /**
     * @return Last object identifier (for Github). To be provided only when updating Pipeline.
     * 
     */
    private String lastObjectId;
    /**
     * @return Connector reference for Parent Entity (Pipeline).
     * 
     */
    private String parentEntityConnectorRef;
    /**
     * @return Repository name for Parent Entity (Pipeline).
     * 
     */
    private String parentEntityRepoName;
    /**
     * @return Name of the repository.
     * 
     */
    private String repoName;
    /**
     * @return Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
     * 
     */
    private String storeType;

    private GetInputSetGitDetails() {}
    /**
     * @return Name of the default branch (this checks out a new branch titled by branch_name).
     * 
     */
    public String baseBranch() {
        return this.baseBranch;
    }
    /**
     * @return Name of the branch.
     * 
     */
    public String branchName() {
        return this.branchName;
    }
    /**
     * @return Commit message used for the merge commit.
     * 
     */
    public String commitMessage() {
        return this.commitMessage;
    }
    /**
     * @return Identifier of the Harness Connector used for CRUD operations on the Entity.
     * 
     */
    public String connectorRef() {
        return this.connectorRef;
    }
    /**
     * @return File path of the Entity in the repository.
     * 
     */
    public String filePath() {
        return this.filePath;
    }
    /**
     * @return Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.
     * 
     */
    public String lastCommitId() {
        return this.lastCommitId;
    }
    /**
     * @return Last object identifier (for Github). To be provided only when updating Pipeline.
     * 
     */
    public String lastObjectId() {
        return this.lastObjectId;
    }
    /**
     * @return Connector reference for Parent Entity (Pipeline).
     * 
     */
    public String parentEntityConnectorRef() {
        return this.parentEntityConnectorRef;
    }
    /**
     * @return Repository name for Parent Entity (Pipeline).
     * 
     */
    public String parentEntityRepoName() {
        return this.parentEntityRepoName;
    }
    /**
     * @return Name of the repository.
     * 
     */
    public String repoName() {
        return this.repoName;
    }
    /**
     * @return Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.
     * 
     */
    public String storeType() {
        return this.storeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInputSetGitDetails defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String baseBranch;
        private String branchName;
        private String commitMessage;
        private String connectorRef;
        private String filePath;
        private String lastCommitId;
        private String lastObjectId;
        private String parentEntityConnectorRef;
        private String parentEntityRepoName;
        private String repoName;
        private String storeType;
        public Builder() {}
        public Builder(GetInputSetGitDetails defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseBranch = defaults.baseBranch;
    	      this.branchName = defaults.branchName;
    	      this.commitMessage = defaults.commitMessage;
    	      this.connectorRef = defaults.connectorRef;
    	      this.filePath = defaults.filePath;
    	      this.lastCommitId = defaults.lastCommitId;
    	      this.lastObjectId = defaults.lastObjectId;
    	      this.parentEntityConnectorRef = defaults.parentEntityConnectorRef;
    	      this.parentEntityRepoName = defaults.parentEntityRepoName;
    	      this.repoName = defaults.repoName;
    	      this.storeType = defaults.storeType;
        }

        @CustomType.Setter
        public Builder baseBranch(String baseBranch) {
            this.baseBranch = Objects.requireNonNull(baseBranch);
            return this;
        }
        @CustomType.Setter
        public Builder branchName(String branchName) {
            this.branchName = Objects.requireNonNull(branchName);
            return this;
        }
        @CustomType.Setter
        public Builder commitMessage(String commitMessage) {
            this.commitMessage = Objects.requireNonNull(commitMessage);
            return this;
        }
        @CustomType.Setter
        public Builder connectorRef(String connectorRef) {
            this.connectorRef = Objects.requireNonNull(connectorRef);
            return this;
        }
        @CustomType.Setter
        public Builder filePath(String filePath) {
            this.filePath = Objects.requireNonNull(filePath);
            return this;
        }
        @CustomType.Setter
        public Builder lastCommitId(String lastCommitId) {
            this.lastCommitId = Objects.requireNonNull(lastCommitId);
            return this;
        }
        @CustomType.Setter
        public Builder lastObjectId(String lastObjectId) {
            this.lastObjectId = Objects.requireNonNull(lastObjectId);
            return this;
        }
        @CustomType.Setter
        public Builder parentEntityConnectorRef(String parentEntityConnectorRef) {
            this.parentEntityConnectorRef = Objects.requireNonNull(parentEntityConnectorRef);
            return this;
        }
        @CustomType.Setter
        public Builder parentEntityRepoName(String parentEntityRepoName) {
            this.parentEntityRepoName = Objects.requireNonNull(parentEntityRepoName);
            return this;
        }
        @CustomType.Setter
        public Builder repoName(String repoName) {
            this.repoName = Objects.requireNonNull(repoName);
            return this;
        }
        @CustomType.Setter
        public Builder storeType(String storeType) {
            this.storeType = Objects.requireNonNull(storeType);
            return this;
        }
        public GetInputSetGitDetails build() {
            final var o = new GetInputSetGitDetails();
            o.baseBranch = baseBranch;
            o.branchName = branchName;
            o.commitMessage = commitMessage;
            o.connectorRef = connectorRef;
            o.filePath = filePath;
            o.lastCommitId = lastCommitId;
            o.lastObjectId = lastObjectId;
            o.parentEntityConnectorRef = parentEntityConnectorRef;
            o.parentEntityRepoName = parentEntityRepoName;
            o.repoName = repoName;
            o.storeType = storeType;
            return o;
        }
    }
}
