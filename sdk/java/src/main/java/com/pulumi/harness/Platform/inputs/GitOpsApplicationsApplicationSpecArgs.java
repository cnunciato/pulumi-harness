// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitOpsApplicationsApplicationSpecDestinationArgs;
import com.pulumi.harness.platform.inputs.GitOpsApplicationsApplicationSpecSourceArgs;
import com.pulumi.harness.platform.inputs.GitOpsApplicationsApplicationSpecSyncPolicyArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsApplicationsApplicationSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsApplicationsApplicationSpecArgs Empty = new GitOpsApplicationsApplicationSpecArgs();

    @Import(name="destinations")
    private @Nullable Output<List<GitOpsApplicationsApplicationSpecDestinationArgs>> destinations;

    public Optional<Output<List<GitOpsApplicationsApplicationSpecDestinationArgs>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    @Import(name="sources")
    private @Nullable Output<List<GitOpsApplicationsApplicationSpecSourceArgs>> sources;

    public Optional<Output<List<GitOpsApplicationsApplicationSpecSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    @Import(name="syncPolicies")
    private @Nullable Output<List<GitOpsApplicationsApplicationSpecSyncPolicyArgs>> syncPolicies;

    public Optional<Output<List<GitOpsApplicationsApplicationSpecSyncPolicyArgs>>> syncPolicies() {
        return Optional.ofNullable(this.syncPolicies);
    }

    private GitOpsApplicationsApplicationSpecArgs() {}

    private GitOpsApplicationsApplicationSpecArgs(GitOpsApplicationsApplicationSpecArgs $) {
        this.destinations = $.destinations;
        this.sources = $.sources;
        this.syncPolicies = $.syncPolicies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsApplicationsApplicationSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsApplicationsApplicationSpecArgs $;

        public Builder() {
            $ = new GitOpsApplicationsApplicationSpecArgs();
        }

        public Builder(GitOpsApplicationsApplicationSpecArgs defaults) {
            $ = new GitOpsApplicationsApplicationSpecArgs(Objects.requireNonNull(defaults));
        }

        public Builder destinations(@Nullable Output<List<GitOpsApplicationsApplicationSpecDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        public Builder destinations(List<GitOpsApplicationsApplicationSpecDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        public Builder destinations(GitOpsApplicationsApplicationSpecDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        public Builder sources(@Nullable Output<List<GitOpsApplicationsApplicationSpecSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        public Builder sources(List<GitOpsApplicationsApplicationSpecSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        public Builder sources(GitOpsApplicationsApplicationSpecSourceArgs... sources) {
            return sources(List.of(sources));
        }

        public Builder syncPolicies(@Nullable Output<List<GitOpsApplicationsApplicationSpecSyncPolicyArgs>> syncPolicies) {
            $.syncPolicies = syncPolicies;
            return this;
        }

        public Builder syncPolicies(List<GitOpsApplicationsApplicationSpecSyncPolicyArgs> syncPolicies) {
            return syncPolicies(Output.of(syncPolicies));
        }

        public Builder syncPolicies(GitOpsApplicationsApplicationSpecSyncPolicyArgs... syncPolicies) {
            return syncPolicies(List.of(syncPolicies));
        }

        public GitOpsApplicationsApplicationSpecArgs build() {
            return $;
        }
    }

}
