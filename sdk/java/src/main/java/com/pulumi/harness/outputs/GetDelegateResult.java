// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDelegateResult {
    /**
     * @return The account id the delegate belongs to.
     * 
     */
    private String accountId;
    /**
     * @return The description of the delegate.
     * 
     */
    private String description;
    /**
     * @return The hostname of the delegate.
     * 
     */
    private @Nullable String hostname;
    /**
     * @return Unique identifier of the delegate
     * 
     */
    private @Nullable String id;
    /**
     * @return The ip address of the delegate.
     * 
     */
    private String ip;
    /**
     * @return The last time the delegate was heard from.
     * 
     */
    private String lastHeartbeat;
    /**
     * @return The name of the delegate to query for.
     * 
     */
    private @Nullable String name;
    /**
     * @return Whether the delegate is in polling mode.
     * 
     */
    private Boolean pollingModeEnabled;
    /**
     * @return The id of the profile assigned to the delegate.
     * 
     */
    private String profileId;
    /**
     * @return The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL
     * 
     */
    private @Nullable String status;
    /**
     * @return The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT
     * 
     */
    private @Nullable String type;
    /**
     * @return The version of the delegate.
     * 
     */
    private String version;

    private GetDelegateResult() {}
    /**
     * @return The account id the delegate belongs to.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The description of the delegate.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The hostname of the delegate.
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return Unique identifier of the delegate
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The ip address of the delegate.
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return The last time the delegate was heard from.
     * 
     */
    public String lastHeartbeat() {
        return this.lastHeartbeat;
    }
    /**
     * @return The name of the delegate to query for.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Whether the delegate is in polling mode.
     * 
     */
    public Boolean pollingModeEnabled() {
        return this.pollingModeEnabled;
    }
    /**
     * @return The id of the profile assigned to the delegate.
     * 
     */
    public String profileId() {
        return this.profileId;
    }
    /**
     * @return The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return The version of the delegate.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDelegateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String description;
        private @Nullable String hostname;
        private @Nullable String id;
        private String ip;
        private String lastHeartbeat;
        private @Nullable String name;
        private Boolean pollingModeEnabled;
        private String profileId;
        private @Nullable String status;
        private @Nullable String type;
        private String version;
        public Builder() {}
        public Builder(GetDelegateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.description = defaults.description;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.ip = defaults.ip;
    	      this.lastHeartbeat = defaults.lastHeartbeat;
    	      this.name = defaults.name;
    	      this.pollingModeEnabled = defaults.pollingModeEnabled;
    	      this.profileId = defaults.profileId;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            this.ip = Objects.requireNonNull(ip);
            return this;
        }
        @CustomType.Setter
        public Builder lastHeartbeat(String lastHeartbeat) {
            this.lastHeartbeat = Objects.requireNonNull(lastHeartbeat);
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pollingModeEnabled(Boolean pollingModeEnabled) {
            this.pollingModeEnabled = Objects.requireNonNull(pollingModeEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder profileId(String profileId) {
            this.profileId = Objects.requireNonNull(profileId);
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetDelegateResult build() {
            final var o = new GetDelegateResult();
            o.accountId = accountId;
            o.description = description;
            o.hostname = hostname;
            o.id = id;
            o.ip = ip;
            o.lastHeartbeat = lastHeartbeat;
            o.name = name;
            o.pollingModeEnabled = pollingModeEnabled;
            o.profileId = profileId;
            o.status = status;
            o.type = type;
            o.version = version;
            return o;
        }
    }
}
