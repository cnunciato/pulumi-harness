// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GetGitopsAgentMetadata;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetGitopsAgentPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGitopsAgentPlainArgs Empty = new GetGitopsAgentPlainArgs();

    @Import(name="accountId", required=true)
    private String accountId;

    public String accountId() {
        return this.accountId;
    }

    @Import(name="identifier", required=true)
    private String identifier;

    public String identifier() {
        return this.identifier;
    }

    @Import(name="metadatas", required=true)
    private List<GetGitopsAgentMetadata> metadatas;

    public List<GetGitopsAgentMetadata> metadatas() {
        return this.metadatas;
    }

    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    @Import(name="orgId", required=true)
    private String orgId;

    public String orgId() {
        return this.orgId;
    }

    @Import(name="projectId", required=true)
    private String projectId;

    public String projectId() {
        return this.projectId;
    }

    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private GetGitopsAgentPlainArgs() {}

    private GetGitopsAgentPlainArgs(GetGitopsAgentPlainArgs $) {
        this.accountId = $.accountId;
        this.identifier = $.identifier;
        this.metadatas = $.metadatas;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitopsAgentPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitopsAgentPlainArgs $;

        public Builder() {
            $ = new GetGitopsAgentPlainArgs();
        }

        public Builder(GetGitopsAgentPlainArgs defaults) {
            $ = new GetGitopsAgentPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(String accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        public Builder metadatas(List<GetGitopsAgentMetadata> metadatas) {
            $.metadatas = metadatas;
            return this;
        }

        public Builder metadatas(GetGitopsAgentMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder orgId(String orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder projectId(String projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GetGitopsAgentPlainArgs build() {
            $.accountId = Objects.requireNonNull($.accountId, "expected parameter 'accountId' to be non-null");
            $.identifier = Objects.requireNonNull($.identifier, "expected parameter 'identifier' to be non-null");
            $.metadatas = Objects.requireNonNull($.metadatas, "expected parameter 'metadatas' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.orgId = Objects.requireNonNull($.orgId, "expected parameter 'orgId' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
