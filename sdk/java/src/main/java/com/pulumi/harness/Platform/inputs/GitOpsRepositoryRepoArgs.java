// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsRepositoryRepoArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsRepositoryRepoArgs Empty = new GitOpsRepositoryRepoArgs();

    @Import(name="connectionType", required=true)
    private Output<String> connectionType;

    public Output<String> connectionType() {
        return this.connectionType;
    }

    @Import(name="enableLfs")
    private @Nullable Output<Boolean> enableLfs;

    public Optional<Output<Boolean>> enableLfs() {
        return Optional.ofNullable(this.enableLfs);
    }

    @Import(name="enableOci")
    private @Nullable Output<Boolean> enableOci;

    public Optional<Output<Boolean>> enableOci() {
        return Optional.ofNullable(this.enableOci);
    }

    @Import(name="githubAppEnterpriseBaseUrl")
    private @Nullable Output<String> githubAppEnterpriseBaseUrl;

    public Optional<Output<String>> githubAppEnterpriseBaseUrl() {
        return Optional.ofNullable(this.githubAppEnterpriseBaseUrl);
    }

    @Import(name="githubAppId")
    private @Nullable Output<String> githubAppId;

    public Optional<Output<String>> githubAppId() {
        return Optional.ofNullable(this.githubAppId);
    }

    @Import(name="githubAppInstallationId")
    private @Nullable Output<String> githubAppInstallationId;

    public Optional<Output<String>> githubAppInstallationId() {
        return Optional.ofNullable(this.githubAppInstallationId);
    }

    @Import(name="githubAppPrivateKey")
    private @Nullable Output<String> githubAppPrivateKey;

    public Optional<Output<String>> githubAppPrivateKey() {
        return Optional.ofNullable(this.githubAppPrivateKey);
    }

    @Import(name="inheritedCreds")
    private @Nullable Output<Boolean> inheritedCreds;

    public Optional<Output<Boolean>> inheritedCreds() {
        return Optional.ofNullable(this.inheritedCreds);
    }

    @Import(name="insecure")
    private @Nullable Output<Boolean> insecure;

    public Optional<Output<Boolean>> insecure() {
        return Optional.ofNullable(this.insecure);
    }

    @Import(name="insecureIgnoreHostKey")
    private @Nullable Output<Boolean> insecureIgnoreHostKey;

    public Optional<Output<Boolean>> insecureIgnoreHostKey() {
        return Optional.ofNullable(this.insecureIgnoreHostKey);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="proxy")
    private @Nullable Output<String> proxy;

    public Optional<Output<String>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    @Import(name="repo", required=true)
    private Output<String> repo;

    public Output<String> repo() {
        return this.repo;
    }

    @Import(name="sshPrivateKey")
    private @Nullable Output<String> sshPrivateKey;

    public Optional<Output<String>> sshPrivateKey() {
        return Optional.ofNullable(this.sshPrivateKey);
    }

    @Import(name="tlsClientCertData")
    private @Nullable Output<String> tlsClientCertData;

    public Optional<Output<String>> tlsClientCertData() {
        return Optional.ofNullable(this.tlsClientCertData);
    }

    @Import(name="tlsClientCertKey")
    private @Nullable Output<String> tlsClientCertKey;

    public Optional<Output<String>> tlsClientCertKey() {
        return Optional.ofNullable(this.tlsClientCertKey);
    }

    @Import(name="type_")
    private @Nullable Output<String> type_;

    public Optional<Output<String>> type_() {
        return Optional.ofNullable(this.type_);
    }

    @Import(name="username")
    private @Nullable Output<String> username;

    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private GitOpsRepositoryRepoArgs() {}

    private GitOpsRepositoryRepoArgs(GitOpsRepositoryRepoArgs $) {
        this.connectionType = $.connectionType;
        this.enableLfs = $.enableLfs;
        this.enableOci = $.enableOci;
        this.githubAppEnterpriseBaseUrl = $.githubAppEnterpriseBaseUrl;
        this.githubAppId = $.githubAppId;
        this.githubAppInstallationId = $.githubAppInstallationId;
        this.githubAppPrivateKey = $.githubAppPrivateKey;
        this.inheritedCreds = $.inheritedCreds;
        this.insecure = $.insecure;
        this.insecureIgnoreHostKey = $.insecureIgnoreHostKey;
        this.name = $.name;
        this.password = $.password;
        this.project = $.project;
        this.proxy = $.proxy;
        this.repo = $.repo;
        this.sshPrivateKey = $.sshPrivateKey;
        this.tlsClientCertData = $.tlsClientCertData;
        this.tlsClientCertKey = $.tlsClientCertKey;
        this.type_ = $.type_;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsRepositoryRepoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsRepositoryRepoArgs $;

        public Builder() {
            $ = new GitOpsRepositoryRepoArgs();
        }

        public Builder(GitOpsRepositoryRepoArgs defaults) {
            $ = new GitOpsRepositoryRepoArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectionType(Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        public Builder enableLfs(@Nullable Output<Boolean> enableLfs) {
            $.enableLfs = enableLfs;
            return this;
        }

        public Builder enableLfs(Boolean enableLfs) {
            return enableLfs(Output.of(enableLfs));
        }

        public Builder enableOci(@Nullable Output<Boolean> enableOci) {
            $.enableOci = enableOci;
            return this;
        }

        public Builder enableOci(Boolean enableOci) {
            return enableOci(Output.of(enableOci));
        }

        public Builder githubAppEnterpriseBaseUrl(@Nullable Output<String> githubAppEnterpriseBaseUrl) {
            $.githubAppEnterpriseBaseUrl = githubAppEnterpriseBaseUrl;
            return this;
        }

        public Builder githubAppEnterpriseBaseUrl(String githubAppEnterpriseBaseUrl) {
            return githubAppEnterpriseBaseUrl(Output.of(githubAppEnterpriseBaseUrl));
        }

        public Builder githubAppId(@Nullable Output<String> githubAppId) {
            $.githubAppId = githubAppId;
            return this;
        }

        public Builder githubAppId(String githubAppId) {
            return githubAppId(Output.of(githubAppId));
        }

        public Builder githubAppInstallationId(@Nullable Output<String> githubAppInstallationId) {
            $.githubAppInstallationId = githubAppInstallationId;
            return this;
        }

        public Builder githubAppInstallationId(String githubAppInstallationId) {
            return githubAppInstallationId(Output.of(githubAppInstallationId));
        }

        public Builder githubAppPrivateKey(@Nullable Output<String> githubAppPrivateKey) {
            $.githubAppPrivateKey = githubAppPrivateKey;
            return this;
        }

        public Builder githubAppPrivateKey(String githubAppPrivateKey) {
            return githubAppPrivateKey(Output.of(githubAppPrivateKey));
        }

        public Builder inheritedCreds(@Nullable Output<Boolean> inheritedCreds) {
            $.inheritedCreds = inheritedCreds;
            return this;
        }

        public Builder inheritedCreds(Boolean inheritedCreds) {
            return inheritedCreds(Output.of(inheritedCreds));
        }

        public Builder insecure(@Nullable Output<Boolean> insecure) {
            $.insecure = insecure;
            return this;
        }

        public Builder insecure(Boolean insecure) {
            return insecure(Output.of(insecure));
        }

        public Builder insecureIgnoreHostKey(@Nullable Output<Boolean> insecureIgnoreHostKey) {
            $.insecureIgnoreHostKey = insecureIgnoreHostKey;
            return this;
        }

        public Builder insecureIgnoreHostKey(Boolean insecureIgnoreHostKey) {
            return insecureIgnoreHostKey(Output.of(insecureIgnoreHostKey));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder proxy(@Nullable Output<String> proxy) {
            $.proxy = proxy;
            return this;
        }

        public Builder proxy(String proxy) {
            return proxy(Output.of(proxy));
        }

        public Builder repo(Output<String> repo) {
            $.repo = repo;
            return this;
        }

        public Builder repo(String repo) {
            return repo(Output.of(repo));
        }

        public Builder sshPrivateKey(@Nullable Output<String> sshPrivateKey) {
            $.sshPrivateKey = sshPrivateKey;
            return this;
        }

        public Builder sshPrivateKey(String sshPrivateKey) {
            return sshPrivateKey(Output.of(sshPrivateKey));
        }

        public Builder tlsClientCertData(@Nullable Output<String> tlsClientCertData) {
            $.tlsClientCertData = tlsClientCertData;
            return this;
        }

        public Builder tlsClientCertData(String tlsClientCertData) {
            return tlsClientCertData(Output.of(tlsClientCertData));
        }

        public Builder tlsClientCertKey(@Nullable Output<String> tlsClientCertKey) {
            $.tlsClientCertKey = tlsClientCertKey;
            return this;
        }

        public Builder tlsClientCertKey(String tlsClientCertKey) {
            return tlsClientCertKey(Output.of(tlsClientCertKey));
        }

        public Builder type_(@Nullable Output<String> type_) {
            $.type_ = type_;
            return this;
        }

        public Builder type_(String type_) {
            return type_(Output.of(type_));
        }

        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public GitOpsRepositoryRepoArgs build() {
            $.connectionType = Objects.requireNonNull($.connectionType, "expected parameter 'connectionType' to be non-null");
            $.repo = Objects.requireNonNull($.repo, "expected parameter 'repo' to be non-null");
            return $;
        }
    }

}
