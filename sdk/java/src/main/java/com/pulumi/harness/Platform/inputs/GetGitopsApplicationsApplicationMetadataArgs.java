// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGitopsApplicationsApplicationMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetGitopsApplicationsApplicationMetadataArgs Empty = new GetGitopsApplicationsApplicationMetadataArgs();

    @Import(name="annotations", required=true)
    private Output<Map<String,String>> annotations;

    public Output<Map<String,String>> annotations() {
        return this.annotations;
    }

    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    @Import(name="finalizers", required=true)
    private Output<List<String>> finalizers;

    public Output<List<String>> finalizers() {
        return this.finalizers;
    }

    @Import(name="generateName")
    private @Nullable Output<String> generateName;

    public Optional<Output<String>> generateName() {
        return Optional.ofNullable(this.generateName);
    }

    @Import(name="generation", required=true)
    private Output<String> generation;

    public Output<String> generation() {
        return this.generation;
    }

    @Import(name="labels", required=true)
    private Output<Map<String,String>> labels;

    public Output<Map<String,String>> labels() {
        return this.labels;
    }

    /**
     * Name of the GitOps application.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the GitOps application.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="namespace", required=true)
    private Output<String> namespace;

    public Output<String> namespace() {
        return this.namespace;
    }

    @Import(name="ownerReferences")
    private @Nullable Output<List<GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs>> ownerReferences;

    public Optional<Output<List<GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs>>> ownerReferences() {
        return Optional.ofNullable(this.ownerReferences);
    }

    @Import(name="uid", required=true)
    private Output<String> uid;

    public Output<String> uid() {
        return this.uid;
    }

    private GetGitopsApplicationsApplicationMetadataArgs() {}

    private GetGitopsApplicationsApplicationMetadataArgs(GetGitopsApplicationsApplicationMetadataArgs $) {
        this.annotations = $.annotations;
        this.clusterName = $.clusterName;
        this.finalizers = $.finalizers;
        this.generateName = $.generateName;
        this.generation = $.generation;
        this.labels = $.labels;
        this.name = $.name;
        this.namespace = $.namespace;
        this.ownerReferences = $.ownerReferences;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitopsApplicationsApplicationMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitopsApplicationsApplicationMetadataArgs $;

        public Builder() {
            $ = new GetGitopsApplicationsApplicationMetadataArgs();
        }

        public Builder(GetGitopsApplicationsApplicationMetadataArgs defaults) {
            $ = new GetGitopsApplicationsApplicationMetadataArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotations(Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        public Builder finalizers(Output<List<String>> finalizers) {
            $.finalizers = finalizers;
            return this;
        }

        public Builder finalizers(List<String> finalizers) {
            return finalizers(Output.of(finalizers));
        }

        public Builder finalizers(String... finalizers) {
            return finalizers(List.of(finalizers));
        }

        public Builder generateName(@Nullable Output<String> generateName) {
            $.generateName = generateName;
            return this;
        }

        public Builder generateName(String generateName) {
            return generateName(Output.of(generateName));
        }

        public Builder generation(Output<String> generation) {
            $.generation = generation;
            return this;
        }

        public Builder generation(String generation) {
            return generation(Output.of(generation));
        }

        public Builder labels(Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Name of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder ownerReferences(@Nullable Output<List<GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs>> ownerReferences) {
            $.ownerReferences = ownerReferences;
            return this;
        }

        public Builder ownerReferences(List<GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs> ownerReferences) {
            return ownerReferences(Output.of(ownerReferences));
        }

        public Builder ownerReferences(GetGitopsApplicationsApplicationMetadataOwnerReferenceArgs... ownerReferences) {
            return ownerReferences(List.of(ownerReferences));
        }

        public Builder uid(Output<String> uid) {
            $.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public GetGitopsApplicationsApplicationMetadataArgs build() {
            $.annotations = Objects.requireNonNull($.annotations, "expected parameter 'annotations' to be non-null");
            $.finalizers = Objects.requireNonNull($.finalizers, "expected parameter 'finalizers' to be non-null");
            $.generation = Objects.requireNonNull($.generation, "expected parameter 'generation' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            $.uid = Objects.requireNonNull($.uid, "expected parameter 'uid' to be non-null");
            return $;
        }
    }

}
