// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.outputs.SshCredentialSshAuthenticationInlineSsh;
import com.pulumi.harness.outputs.SshCredentialSshAuthenticationServerPassword;
import com.pulumi.harness.outputs.SshCredentialSshAuthenticationSshKeyFile;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SshCredentialSshAuthentication {
    /**
     * @return Inline SSH authentication configuration. Only ond of `passphrase_secret_id` or `ssh_key_file_id` should be used
     * 
     */
    private @Nullable SshCredentialSshAuthenticationInlineSsh inlineSsh;
    /**
     * @return The port to connect to
     * 
     */
    private Integer port;
    /**
     * @return Server password authentication configuration
     * 
     */
    private @Nullable SshCredentialSshAuthenticationServerPassword serverPassword;
    /**
     * @return Use ssh key file for authentication
     * 
     */
    private @Nullable SshCredentialSshAuthenticationSshKeyFile sshKeyFile;
    /**
     * @return The username to use when connecting to ssh
     * 
     */
    private String username;

    private SshCredentialSshAuthentication() {}
    /**
     * @return Inline SSH authentication configuration. Only ond of `passphrase_secret_id` or `ssh_key_file_id` should be used
     * 
     */
    public Optional<SshCredentialSshAuthenticationInlineSsh> inlineSsh() {
        return Optional.ofNullable(this.inlineSsh);
    }
    /**
     * @return The port to connect to
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Server password authentication configuration
     * 
     */
    public Optional<SshCredentialSshAuthenticationServerPassword> serverPassword() {
        return Optional.ofNullable(this.serverPassword);
    }
    /**
     * @return Use ssh key file for authentication
     * 
     */
    public Optional<SshCredentialSshAuthenticationSshKeyFile> sshKeyFile() {
        return Optional.ofNullable(this.sshKeyFile);
    }
    /**
     * @return The username to use when connecting to ssh
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SshCredentialSshAuthentication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable SshCredentialSshAuthenticationInlineSsh inlineSsh;
        private Integer port;
        private @Nullable SshCredentialSshAuthenticationServerPassword serverPassword;
        private @Nullable SshCredentialSshAuthenticationSshKeyFile sshKeyFile;
        private String username;
        public Builder() {}
        public Builder(SshCredentialSshAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inlineSsh = defaults.inlineSsh;
    	      this.port = defaults.port;
    	      this.serverPassword = defaults.serverPassword;
    	      this.sshKeyFile = defaults.sshKeyFile;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder inlineSsh(@Nullable SshCredentialSshAuthenticationInlineSsh inlineSsh) {
            this.inlineSsh = inlineSsh;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder serverPassword(@Nullable SshCredentialSshAuthenticationServerPassword serverPassword) {
            this.serverPassword = serverPassword;
            return this;
        }
        @CustomType.Setter
        public Builder sshKeyFile(@Nullable SshCredentialSshAuthenticationSshKeyFile sshKeyFile) {
            this.sshKeyFile = sshKeyFile;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public SshCredentialSshAuthentication build() {
            final var o = new SshCredentialSshAuthentication();
            o.inlineSsh = inlineSsh;
            o.port = port;
            o.serverPassword = serverPassword;
            o.sshKeyFile = sshKeyFile;
            o.username = username;
            return o;
        }
    }
}
