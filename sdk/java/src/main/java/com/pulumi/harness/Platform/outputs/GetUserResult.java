// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserResult {
    /**
     * @return Whether or not the user account is disabled.
     * 
     */
    private Boolean disabled;
    /**
     * @return The email of the user.
     * 
     */
    private String email;
    /**
     * @return Whether or not the user account is externally managed.
     * 
     */
    private Boolean externallyManaged;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique identifier of the user.
     * 
     */
    private String identifier;
    /**
     * @return Whether or not the user account is locked.
     * 
     */
    private Boolean locked;
    /**
     * @return Name of the user.
     * 
     */
    private String name;
    /**
     * @return Organization identifier of the user.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Project identifier of the user.
     * 
     */
    private @Nullable String projectId;

    private GetUserResult() {}
    /**
     * @return Whether or not the user account is disabled.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return The email of the user.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Whether or not the user account is externally managed.
     * 
     */
    public Boolean externallyManaged() {
        return this.externallyManaged;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique identifier of the user.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Whether or not the user account is locked.
     * 
     */
    public Boolean locked() {
        return this.locked;
    }
    /**
     * @return Name of the user.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Organization identifier of the user.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Project identifier of the user.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean disabled;
        private String email;
        private Boolean externallyManaged;
        private String id;
        private String identifier;
        private Boolean locked;
        private String name;
        private @Nullable String orgId;
        private @Nullable String projectId;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disabled = defaults.disabled;
    	      this.email = defaults.email;
    	      this.externallyManaged = defaults.externallyManaged;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.locked = defaults.locked;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
        }

        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            this.disabled = Objects.requireNonNull(disabled);
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        @CustomType.Setter
        public Builder externallyManaged(Boolean externallyManaged) {
            this.externallyManaged = Objects.requireNonNull(externallyManaged);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            this.identifier = Objects.requireNonNull(identifier);
            return this;
        }
        @CustomType.Setter
        public Builder locked(Boolean locked) {
            this.locked = Objects.requireNonNull(locked);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {
            this.projectId = projectId;
            return this;
        }
        public GetUserResult build() {
            final var o = new GetUserResult();
            o.disabled = disabled;
            o.email = email;
            o.externallyManaged = externallyManaged;
            o.id = id;
            o.identifier = identifier;
            o.locked = locked;
            o.name = name;
            o.orgId = orgId;
            o.projectId = projectId;
            return o;
        }
    }
}
