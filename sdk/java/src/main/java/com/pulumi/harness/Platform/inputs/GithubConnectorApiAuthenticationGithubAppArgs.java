// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GithubConnectorApiAuthenticationGithubAppArgs extends com.pulumi.resources.ResourceArgs {

    public static final GithubConnectorApiAuthenticationGithubAppArgs Empty = new GithubConnectorApiAuthenticationGithubAppArgs();

    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    @Import(name="applicationIdRef")
    private @Nullable Output<String> applicationIdRef;

    public Optional<Output<String>> applicationIdRef() {
        return Optional.ofNullable(this.applicationIdRef);
    }

    @Import(name="installationId")
    private @Nullable Output<String> installationId;

    public Optional<Output<String>> installationId() {
        return Optional.ofNullable(this.installationId);
    }

    @Import(name="installationIdRef")
    private @Nullable Output<String> installationIdRef;

    public Optional<Output<String>> installationIdRef() {
        return Optional.ofNullable(this.installationIdRef);
    }

    @Import(name="privateKeyRef", required=true)
    private Output<String> privateKeyRef;

    public Output<String> privateKeyRef() {
        return this.privateKeyRef;
    }

    private GithubConnectorApiAuthenticationGithubAppArgs() {}

    private GithubConnectorApiAuthenticationGithubAppArgs(GithubConnectorApiAuthenticationGithubAppArgs $) {
        this.applicationId = $.applicationId;
        this.applicationIdRef = $.applicationIdRef;
        this.installationId = $.installationId;
        this.installationIdRef = $.installationIdRef;
        this.privateKeyRef = $.privateKeyRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GithubConnectorApiAuthenticationGithubAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GithubConnectorApiAuthenticationGithubAppArgs $;

        public Builder() {
            $ = new GithubConnectorApiAuthenticationGithubAppArgs();
        }

        public Builder(GithubConnectorApiAuthenticationGithubAppArgs defaults) {
            $ = new GithubConnectorApiAuthenticationGithubAppArgs(Objects.requireNonNull(defaults));
        }

        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        public Builder applicationIdRef(@Nullable Output<String> applicationIdRef) {
            $.applicationIdRef = applicationIdRef;
            return this;
        }

        public Builder applicationIdRef(String applicationIdRef) {
            return applicationIdRef(Output.of(applicationIdRef));
        }

        public Builder installationId(@Nullable Output<String> installationId) {
            $.installationId = installationId;
            return this;
        }

        public Builder installationId(String installationId) {
            return installationId(Output.of(installationId));
        }

        public Builder installationIdRef(@Nullable Output<String> installationIdRef) {
            $.installationIdRef = installationIdRef;
            return this;
        }

        public Builder installationIdRef(String installationIdRef) {
            return installationIdRef(Output.of(installationIdRef));
        }

        public Builder privateKeyRef(Output<String> privateKeyRef) {
            $.privateKeyRef = privateKeyRef;
            return this;
        }

        public Builder privateKeyRef(String privateKeyRef) {
            return privateKeyRef(Output.of(privateKeyRef));
        }

        public GithubConnectorApiAuthenticationGithubAppArgs build() {
            $.privateKeyRef = Objects.requireNonNull($.privateKeyRef, "expected parameter 'privateKeyRef' to be non-null");
            return $;
        }
    }

}
