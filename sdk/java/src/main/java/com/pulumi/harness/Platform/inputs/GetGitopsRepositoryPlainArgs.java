// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GetGitopsRepositoryRepo;
import com.pulumi.harness.platform.inputs.GetGitopsRepositoryUpdateMask;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGitopsRepositoryPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGitopsRepositoryPlainArgs Empty = new GetGitopsRepositoryPlainArgs();

    @Import(name="accountId", required=true)
    private String accountId;

    public String accountId() {
        return this.accountId;
    }

    @Import(name="agentId")
    private @Nullable String agentId;

    public Optional<String> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    @Import(name="credsOnly")
    private @Nullable Boolean credsOnly;

    public Optional<Boolean> credsOnly() {
        return Optional.ofNullable(this.credsOnly);
    }

    @Import(name="identifier", required=true)
    private String identifier;

    public String identifier() {
        return this.identifier;
    }

    @Import(name="orgId")
    private @Nullable String orgId;

    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    @Import(name="projectId", required=true)
    private String projectId;

    public String projectId() {
        return this.projectId;
    }

    @Import(name="queryForceRefresh")
    private @Nullable Boolean queryForceRefresh;

    public Optional<Boolean> queryForceRefresh() {
        return Optional.ofNullable(this.queryForceRefresh);
    }

    @Import(name="queryProject")
    private @Nullable String queryProject;

    public Optional<String> queryProject() {
        return Optional.ofNullable(this.queryProject);
    }

    @Import(name="queryRepo")
    private @Nullable String queryRepo;

    public Optional<String> queryRepo() {
        return Optional.ofNullable(this.queryRepo);
    }

    @Import(name="repos", required=true)
    private List<GetGitopsRepositoryRepo> repos;

    public List<GetGitopsRepositoryRepo> repos() {
        return this.repos;
    }

    @Import(name="updateMasks")
    private @Nullable List<GetGitopsRepositoryUpdateMask> updateMasks;

    public Optional<List<GetGitopsRepositoryUpdateMask>> updateMasks() {
        return Optional.ofNullable(this.updateMasks);
    }

    @Import(name="upsert")
    private @Nullable Boolean upsert;

    public Optional<Boolean> upsert() {
        return Optional.ofNullable(this.upsert);
    }

    private GetGitopsRepositoryPlainArgs() {}

    private GetGitopsRepositoryPlainArgs(GetGitopsRepositoryPlainArgs $) {
        this.accountId = $.accountId;
        this.agentId = $.agentId;
        this.credsOnly = $.credsOnly;
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.queryForceRefresh = $.queryForceRefresh;
        this.queryProject = $.queryProject;
        this.queryRepo = $.queryRepo;
        this.repos = $.repos;
        this.updateMasks = $.updateMasks;
        this.upsert = $.upsert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitopsRepositoryPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitopsRepositoryPlainArgs $;

        public Builder() {
            $ = new GetGitopsRepositoryPlainArgs();
        }

        public Builder(GetGitopsRepositoryPlainArgs defaults) {
            $ = new GetGitopsRepositoryPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(String accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder agentId(@Nullable String agentId) {
            $.agentId = agentId;
            return this;
        }

        public Builder credsOnly(@Nullable Boolean credsOnly) {
            $.credsOnly = credsOnly;
            return this;
        }

        public Builder identifier(String identifier) {
            $.identifier = identifier;
            return this;
        }

        public Builder orgId(@Nullable String orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder projectId(String projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder queryForceRefresh(@Nullable Boolean queryForceRefresh) {
            $.queryForceRefresh = queryForceRefresh;
            return this;
        }

        public Builder queryProject(@Nullable String queryProject) {
            $.queryProject = queryProject;
            return this;
        }

        public Builder queryRepo(@Nullable String queryRepo) {
            $.queryRepo = queryRepo;
            return this;
        }

        public Builder repos(List<GetGitopsRepositoryRepo> repos) {
            $.repos = repos;
            return this;
        }

        public Builder repos(GetGitopsRepositoryRepo... repos) {
            return repos(List.of(repos));
        }

        public Builder updateMasks(@Nullable List<GetGitopsRepositoryUpdateMask> updateMasks) {
            $.updateMasks = updateMasks;
            return this;
        }

        public Builder updateMasks(GetGitopsRepositoryUpdateMask... updateMasks) {
            return updateMasks(List.of(updateMasks));
        }

        public Builder upsert(@Nullable Boolean upsert) {
            $.upsert = upsert;
            return this;
        }

        public GetGitopsRepositoryPlainArgs build() {
            $.accountId = Objects.requireNonNull($.accountId, "expected parameter 'accountId' to be non-null");
            $.identifier = Objects.requireNonNull($.identifier, "expected parameter 'identifier' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.repos = Objects.requireNonNull($.repos, "expected parameter 'repos' to be non-null");
            return $;
        }
    }

}
