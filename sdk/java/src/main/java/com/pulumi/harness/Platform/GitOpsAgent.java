// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.GitOpsAgentArgs;
import com.pulumi.harness.platform.inputs.GitOpsAgentState;
import com.pulumi.harness.platform.outputs.GitOpsAgentMetadata;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="harness:platform/gitOpsAgent:GitOpsAgent")
public class GitOpsAgent extends com.pulumi.resources.CustomResource {
    /**
     * account identifier of the agent.
     * 
     */
    @Export(name="accountId", type=String.class, parameters={})
    private Output<String> accountId;

    /**
     * @return account identifier of the agent.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * description of the agent.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return description of the agent.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * identifier of the agent.
     * 
     */
    @Export(name="identifier", type=String.class, parameters={})
    private Output<String> identifier;

    /**
     * @return identifier of the agent.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * tags for the agent.
     * 
     */
    @Export(name="metadatas", type=List.class, parameters={GitOpsAgentMetadata.class})
    private Output</* @Nullable */ List<GitOpsAgentMetadata>> metadatas;

    /**
     * @return tags for the agent.
     * 
     */
    public Output<Optional<List<GitOpsAgentMetadata>>> metadatas() {
        return Codegen.optional(this.metadatas);
    }
    /**
     * name of the agent.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return name of the agent.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * org identifier of the agent.
     * 
     */
    @Export(name="orgId", type=String.class, parameters={})
    private Output<String> orgId;

    /**
     * @return org identifier of the agent.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * org identifier of the agent.
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return org identifier of the agent.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * tags for the agent.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return tags for the agent.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * type of the agent.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return type of the agent.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GitOpsAgent(String name) {
        this(name, GitOpsAgentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GitOpsAgent(String name, GitOpsAgentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GitOpsAgent(String name, GitOpsAgentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitOpsAgent:GitOpsAgent", name, args == null ? GitOpsAgentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GitOpsAgent(String name, Output<String> id, @Nullable GitOpsAgentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitOpsAgent:GitOpsAgent", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GitOpsAgent get(String name, Output<String> id, @Nullable GitOpsAgentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GitOpsAgent(name, id, state, options);
    }
}
