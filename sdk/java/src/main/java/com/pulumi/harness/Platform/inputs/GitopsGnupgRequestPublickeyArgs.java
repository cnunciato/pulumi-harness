// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsGnupgRequestPublickeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsGnupgRequestPublickeyArgs Empty = new GitopsGnupgRequestPublickeyArgs();

    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    @Import(name="keyData", required=true)
    private Output<String> keyData;

    public Output<String> keyData() {
        return this.keyData;
    }

    @Import(name="keyId")
    private @Nullable Output<String> keyId;

    public Optional<Output<String>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="subType")
    private @Nullable Output<String> subType;

    public Optional<Output<String>> subType() {
        return Optional.ofNullable(this.subType);
    }

    @Import(name="trust")
    private @Nullable Output<String> trust;

    public Optional<Output<String>> trust() {
        return Optional.ofNullable(this.trust);
    }

    private GitopsGnupgRequestPublickeyArgs() {}

    private GitopsGnupgRequestPublickeyArgs(GitopsGnupgRequestPublickeyArgs $) {
        this.fingerprint = $.fingerprint;
        this.keyData = $.keyData;
        this.keyId = $.keyId;
        this.owner = $.owner;
        this.subType = $.subType;
        this.trust = $.trust;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsGnupgRequestPublickeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsGnupgRequestPublickeyArgs $;

        public Builder() {
            $ = new GitopsGnupgRequestPublickeyArgs();
        }

        public Builder(GitopsGnupgRequestPublickeyArgs defaults) {
            $ = new GitopsGnupgRequestPublickeyArgs(Objects.requireNonNull(defaults));
        }

        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        public Builder keyData(Output<String> keyData) {
            $.keyData = keyData;
            return this;
        }

        public Builder keyData(String keyData) {
            return keyData(Output.of(keyData));
        }

        public Builder keyId(@Nullable Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder subType(@Nullable Output<String> subType) {
            $.subType = subType;
            return this;
        }

        public Builder subType(String subType) {
            return subType(Output.of(subType));
        }

        public Builder trust(@Nullable Output<String> trust) {
            $.trust = trust;
            return this;
        }

        public Builder trust(String trust) {
            return trust(Output.of(trust));
        }

        public GitopsGnupgRequestPublickeyArgs build() {
            $.keyData = Objects.requireNonNull($.keyData, "expected parameter 'keyData' to be non-null");
            return $;
        }
    }

}
