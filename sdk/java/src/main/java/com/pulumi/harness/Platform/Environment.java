// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.EnvironmentArgs;
import com.pulumi.harness.platform.inputs.EnvironmentState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating a Harness environment.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.Environment;
 * import com.pulumi.harness.platform.EnvironmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Environment(&#34;example&#34;, EnvironmentArgs.builder()        
 *             .identifier(&#34;identifier&#34;)
 *             .orgId(&#34;org_id&#34;)
 *             .projectId(&#34;project_id&#34;)
 *             .tags(            
 *                 &#34;foo:bar&#34;,
 *                 &#34;baz&#34;)
 *             .type(&#34;PreProduction&#34;)
 *             .yaml(&#34;&#34;&#34;
 * 			   environment:
 *          name: name
 *          identifier: identifier
 *          orgIdentifier: org_id
 *          projectIdentifier: project_id
 *          type: PreProduction
 *          tags:
 *            foo: bar
 *            baz: &#34;&#34;
 *          variables:
 *            - name: envVar1
 *              type: String
 *              value: v1
 *              description: &#34;&#34;
 *            - name: envVar2
 *              type: String
 *              value: v2
 *              description: &#34;&#34;
 *          overrides:
 *            manifests:
 *              - manifest:
 *                  identifier: manifestEnv
 *                  type: Values
 *                  spec:
 *                    store:
 *                      type: Git
 *                      spec:
 *                        connectorRef: &lt;+input&gt;
 *                        gitFetchType: Branch
 *                        paths:
 *                          - file1
 *                        repoName: &lt;+input&gt;
 *                        branch: master
 *            configFiles:
 *              - configFile:
 *                  identifier: configFileEnv
 *                  spec:
 *                    store:
 *                      type: Harness
 *                      spec:
 *                        files:
 *                          - account:/Add-ons/svcOverrideTest
 *                        secretFiles: []
 * 
 *             &#34;&#34;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Import using environment id
 * 
 * ```sh
 *  $ pulumi import harness:platform/environment:Environment example &lt;environment_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/environment:Environment")
public class Environment extends com.pulumi.resources.CustomResource {
    /**
     * Color of the environment.
     * 
     */
    @Export(name="color", type=String.class, parameters={})
    private Output<String> color;

    /**
     * @return Color of the environment.
     * 
     */
    public Output<String> color() {
        return this.color;
    }
    /**
     * Description of the resource.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Unique identifier of the resource.
     * 
     */
    @Export(name="identifier", type=String.class, parameters={})
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Name of the resource.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Unique identifier of the organization.
     * 
     */
    @Export(name="orgId", type=String.class, parameters={})
    private Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * Unique identifier of the project.
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Tags to associate with the resource. Tags should be in the form `name:value`.
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags to associate with the resource. Tags should be in the form `name:value`.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The type of environment. Valid values are PreProduction, Production
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of environment. Valid values are PreProduction, Production
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Environment YAML
     * 
     */
    @Export(name="yaml", type=String.class, parameters={})
    private Output</* @Nullable */ String> yaml;

    /**
     * @return Environment YAML
     * 
     */
    public Output<Optional<String>> yaml() {
        return Codegen.optional(this.yaml);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Environment(String name) {
        this(name, EnvironmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Environment(String name, EnvironmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Environment(String name, EnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/environment:Environment", name, args == null ? EnvironmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Environment(String name, Output<String> id, @Nullable EnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/environment:Environment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Environment get(String name, Output<String> id, @Nullable EnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Environment(name, id, state, options);
    }
}
