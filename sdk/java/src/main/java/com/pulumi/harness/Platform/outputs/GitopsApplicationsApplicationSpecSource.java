// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.platform.outputs.GitopsApplicationsApplicationSpecSourceDirectory;
import com.pulumi.harness.platform.outputs.GitopsApplicationsApplicationSpecSourceHelm;
import com.pulumi.harness.platform.outputs.GitopsApplicationsApplicationSpecSourceKsonnet;
import com.pulumi.harness.platform.outputs.GitopsApplicationsApplicationSpecSourceKustomize;
import com.pulumi.harness.platform.outputs.GitopsApplicationsApplicationSpecSourcePlugin;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitopsApplicationsApplicationSpecSource {
    private @Nullable String chart;
    private @Nullable List<GitopsApplicationsApplicationSpecSourceDirectory> directories;
    private @Nullable List<GitopsApplicationsApplicationSpecSourceHelm> helms;
    private @Nullable List<GitopsApplicationsApplicationSpecSourceKsonnet> ksonnets;
    private @Nullable List<GitopsApplicationsApplicationSpecSourceKustomize> kustomizes;
    private String path;
    private @Nullable List<GitopsApplicationsApplicationSpecSourcePlugin> plugins;
    private String repoUrl;
    private String targetRevision;

    private GitopsApplicationsApplicationSpecSource() {}
    public Optional<String> chart() {
        return Optional.ofNullable(this.chart);
    }
    public List<GitopsApplicationsApplicationSpecSourceDirectory> directories() {
        return this.directories == null ? List.of() : this.directories;
    }
    public List<GitopsApplicationsApplicationSpecSourceHelm> helms() {
        return this.helms == null ? List.of() : this.helms;
    }
    public List<GitopsApplicationsApplicationSpecSourceKsonnet> ksonnets() {
        return this.ksonnets == null ? List.of() : this.ksonnets;
    }
    public List<GitopsApplicationsApplicationSpecSourceKustomize> kustomizes() {
        return this.kustomizes == null ? List.of() : this.kustomizes;
    }
    public String path() {
        return this.path;
    }
    public List<GitopsApplicationsApplicationSpecSourcePlugin> plugins() {
        return this.plugins == null ? List.of() : this.plugins;
    }
    public String repoUrl() {
        return this.repoUrl;
    }
    public String targetRevision() {
        return this.targetRevision;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitopsApplicationsApplicationSpecSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String chart;
        private @Nullable List<GitopsApplicationsApplicationSpecSourceDirectory> directories;
        private @Nullable List<GitopsApplicationsApplicationSpecSourceHelm> helms;
        private @Nullable List<GitopsApplicationsApplicationSpecSourceKsonnet> ksonnets;
        private @Nullable List<GitopsApplicationsApplicationSpecSourceKustomize> kustomizes;
        private String path;
        private @Nullable List<GitopsApplicationsApplicationSpecSourcePlugin> plugins;
        private String repoUrl;
        private String targetRevision;
        public Builder() {}
        public Builder(GitopsApplicationsApplicationSpecSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chart = defaults.chart;
    	      this.directories = defaults.directories;
    	      this.helms = defaults.helms;
    	      this.ksonnets = defaults.ksonnets;
    	      this.kustomizes = defaults.kustomizes;
    	      this.path = defaults.path;
    	      this.plugins = defaults.plugins;
    	      this.repoUrl = defaults.repoUrl;
    	      this.targetRevision = defaults.targetRevision;
        }

        @CustomType.Setter
        public Builder chart(@Nullable String chart) {
            this.chart = chart;
            return this;
        }
        @CustomType.Setter
        public Builder directories(@Nullable List<GitopsApplicationsApplicationSpecSourceDirectory> directories) {
            this.directories = directories;
            return this;
        }
        public Builder directories(GitopsApplicationsApplicationSpecSourceDirectory... directories) {
            return directories(List.of(directories));
        }
        @CustomType.Setter
        public Builder helms(@Nullable List<GitopsApplicationsApplicationSpecSourceHelm> helms) {
            this.helms = helms;
            return this;
        }
        public Builder helms(GitopsApplicationsApplicationSpecSourceHelm... helms) {
            return helms(List.of(helms));
        }
        @CustomType.Setter
        public Builder ksonnets(@Nullable List<GitopsApplicationsApplicationSpecSourceKsonnet> ksonnets) {
            this.ksonnets = ksonnets;
            return this;
        }
        public Builder ksonnets(GitopsApplicationsApplicationSpecSourceKsonnet... ksonnets) {
            return ksonnets(List.of(ksonnets));
        }
        @CustomType.Setter
        public Builder kustomizes(@Nullable List<GitopsApplicationsApplicationSpecSourceKustomize> kustomizes) {
            this.kustomizes = kustomizes;
            return this;
        }
        public Builder kustomizes(GitopsApplicationsApplicationSpecSourceKustomize... kustomizes) {
            return kustomizes(List.of(kustomizes));
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder plugins(@Nullable List<GitopsApplicationsApplicationSpecSourcePlugin> plugins) {
            this.plugins = plugins;
            return this;
        }
        public Builder plugins(GitopsApplicationsApplicationSpecSourcePlugin... plugins) {
            return plugins(List.of(plugins));
        }
        @CustomType.Setter
        public Builder repoUrl(String repoUrl) {
            this.repoUrl = Objects.requireNonNull(repoUrl);
            return this;
        }
        @CustomType.Setter
        public Builder targetRevision(String targetRevision) {
            this.targetRevision = Objects.requireNonNull(targetRevision);
            return this;
        }
        public GitopsApplicationsApplicationSpecSource build() {
            final var o = new GitopsApplicationsApplicationSpecSource();
            o.chart = chart;
            o.directories = directories;
            o.helms = helms;
            o.ksonnets = ksonnets;
            o.kustomizes = kustomizes;
            o.path = path;
            o.plugins = plugins;
            o.repoUrl = repoUrl;
            o.targetRevision = targetRevision;
            return o;
        }
    }
}
