// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.PlatformConnector.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.PlatformConnector.inputs.GithubApiAuthenticationGithubAppArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GithubApiAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GithubApiAuthenticationArgs Empty = new GithubApiAuthenticationArgs();

    /**
     * Configuration for using the github app for interacting with the github api.
     * 
     */
    @Import(name="githubApp")
    private @Nullable Output<GithubApiAuthenticationGithubAppArgs> githubApp;

    /**
     * @return Configuration for using the github app for interacting with the github api.
     * 
     */
    public Optional<Output<GithubApiAuthenticationGithubAppArgs>> githubApp() {
        return Optional.ofNullable(this.githubApp);
    }

    /**
     * Personal access token for interacting with the github api.
     * 
     */
    @Import(name="tokenRef")
    private @Nullable Output<String> tokenRef;

    /**
     * @return Personal access token for interacting with the github api.
     * 
     */
    public Optional<Output<String>> tokenRef() {
        return Optional.ofNullable(this.tokenRef);
    }

    private GithubApiAuthenticationArgs() {}

    private GithubApiAuthenticationArgs(GithubApiAuthenticationArgs $) {
        this.githubApp = $.githubApp;
        this.tokenRef = $.tokenRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GithubApiAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GithubApiAuthenticationArgs $;

        public Builder() {
            $ = new GithubApiAuthenticationArgs();
        }

        public Builder(GithubApiAuthenticationArgs defaults) {
            $ = new GithubApiAuthenticationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param githubApp Configuration for using the github app for interacting with the github api.
         * 
         * @return builder
         * 
         */
        public Builder githubApp(@Nullable Output<GithubApiAuthenticationGithubAppArgs> githubApp) {
            $.githubApp = githubApp;
            return this;
        }

        /**
         * @param githubApp Configuration for using the github app for interacting with the github api.
         * 
         * @return builder
         * 
         */
        public Builder githubApp(GithubApiAuthenticationGithubAppArgs githubApp) {
            return githubApp(Output.of(githubApp));
        }

        /**
         * @param tokenRef Personal access token for interacting with the github api.
         * 
         * @return builder
         * 
         */
        public Builder tokenRef(@Nullable Output<String> tokenRef) {
            $.tokenRef = tokenRef;
            return this;
        }

        /**
         * @param tokenRef Personal access token for interacting with the github api.
         * 
         * @return builder
         * 
         */
        public Builder tokenRef(String tokenRef) {
            return tokenRef(Output.of(tokenRef));
        }

        public GithubApiAuthenticationArgs build() {
            return $;
        }
    }

}
