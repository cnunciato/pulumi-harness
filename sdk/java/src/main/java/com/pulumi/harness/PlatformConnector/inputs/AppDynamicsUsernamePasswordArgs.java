// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.PlatformConnector.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class AppDynamicsUsernamePasswordArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppDynamicsUsernamePasswordArgs Empty = new AppDynamicsUsernamePasswordArgs();

    /**
     * Reference to a secret containing the password to use for authentication.
     * 
     */
    @Import(name="passwordRef", required=true)
    private Output<String> passwordRef;

    /**
     * @return Reference to a secret containing the password to use for authentication.
     * 
     */
    public Output<String> passwordRef() {
        return this.passwordRef;
    }

    /**
     * Username to use for authentication.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Username to use for authentication.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private AppDynamicsUsernamePasswordArgs() {}

    private AppDynamicsUsernamePasswordArgs(AppDynamicsUsernamePasswordArgs $) {
        this.passwordRef = $.passwordRef;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppDynamicsUsernamePasswordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppDynamicsUsernamePasswordArgs $;

        public Builder() {
            $ = new AppDynamicsUsernamePasswordArgs();
        }

        public Builder(AppDynamicsUsernamePasswordArgs defaults) {
            $ = new AppDynamicsUsernamePasswordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param passwordRef Reference to a secret containing the password to use for authentication.
         * 
         * @return builder
         * 
         */
        public Builder passwordRef(Output<String> passwordRef) {
            $.passwordRef = passwordRef;
            return this;
        }

        /**
         * @param passwordRef Reference to a secret containing the password to use for authentication.
         * 
         * @return builder
         * 
         */
        public Builder passwordRef(String passwordRef) {
            return passwordRef(Output.of(passwordRef));
        }

        /**
         * @param username Username to use for authentication.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username to use for authentication.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public AppDynamicsUsernamePasswordArgs build() {
            $.passwordRef = Objects.requireNonNull($.passwordRef, "expected parameter 'passwordRef' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
