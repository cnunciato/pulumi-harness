// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.SecretSshkeyArgs;
import com.pulumi.harness.platform.inputs.SecretSshkeyState;
import com.pulumi.harness.platform.outputs.SecretSshkeyKerberos;
import com.pulumi.harness.platform.outputs.SecretSshkeySsh;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating an ssh key type secret.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.SecretSshkey;
 * import com.pulumi.harness.platform.SecretSshkeyArgs;
 * import com.pulumi.harness.platform.inputs.SecretSshkeyKerberosArgs;
 * import com.pulumi.harness.platform.inputs.SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs;
 * import com.pulumi.harness.platform.inputs.SecretSshkeyKerberosTgtPasswordSpecArgs;
 * import com.pulumi.harness.platform.inputs.SecretSshkeySshArgs;
 * import com.pulumi.harness.platform.inputs.SecretSshkeySshSshkeyReferenceCredentialArgs;
 * import com.pulumi.harness.platform.inputs.SecretSshkeySshSshkeyPathCredentialArgs;
 * import com.pulumi.harness.platform.inputs.SecretSshkeySshSshPasswordCredentialArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var keyTabFilePath = new SecretSshkey(&#34;keyTabFilePath&#34;, SecretSshkeyArgs.builder()        
 *             .identifier(&#34;identifier&#34;)
 *             .description(&#34;test&#34;)
 *             .tags(&#34;foo:bar&#34;)
 *             .port(22)
 *             .kerberos(SecretSshkeyKerberosArgs.builder()
 *                 .tgtKeyTabFilePathSpec(SecretSshkeyKerberosTgtKeyTabFilePathSpecArgs.builder()
 *                     .keyPath(&#34;key_path&#34;)
 *                     .build())
 *                 .principal(&#34;principal&#34;)
 *                 .realm(&#34;realm&#34;)
 *                 .tgtGenerationMethod(&#34;KeyTabFilePath&#34;)
 *                 .build())
 *             .build());
 * 
 *         var _tgtPassword = new SecretSshkey(&#34; tgtPassword&#34;, SecretSshkeyArgs.builder()        
 *             .identifier(&#34;identifier&#34;)
 *             .description(&#34;test&#34;)
 *             .tags(&#34;foo:bar&#34;)
 *             .port(22)
 *             .kerberos(SecretSshkeyKerberosArgs.builder()
 *                 .tgtPasswordSpec(SecretSshkeyKerberosTgtPasswordSpecArgs.builder()
 *                     .password(String.format(&#34;account.%s&#34;, secret.id()))
 *                     .build())
 *                 .principal(&#34;principal&#34;)
 *                 .realm(&#34;realm&#34;)
 *                 .tgtGenerationMethod(&#34;Password&#34;)
 *                 .build())
 *             .build());
 * 
 *         var sshkeyReference = new SecretSshkey(&#34;sshkeyReference&#34;, SecretSshkeyArgs.builder()        
 *             .identifier(&#34;identifier&#34;)
 *             .description(&#34;test&#34;)
 *             .tags(&#34;foo:bar&#34;)
 *             .port(22)
 *             .ssh(SecretSshkeySshArgs.builder()
 *                 .sshkeyReferenceCredential(SecretSshkeySshSshkeyReferenceCredentialArgs.builder()
 *                     .userName(&#34;user_name&#34;)
 *                     .key(String.format(&#34;account.%s&#34;, key.id()))
 *                     .encryptedPassphrase(String.format(&#34;account.%s&#34;, secret.id()))
 *                     .build())
 *                 .credentialType(&#34;KeyReference&#34;)
 *                 .build())
 *             .build());
 * 
 *         var _sshkeyPath = new SecretSshkey(&#34; sshkeyPath&#34;, SecretSshkeyArgs.builder()        
 *             .identifier(&#34;identifier&#34;)
 *             .description(&#34;test&#34;)
 *             .tags(&#34;foo:bar&#34;)
 *             .port(22)
 *             .ssh(SecretSshkeySshArgs.builder()
 *                 .sshkeyPathCredential(SecretSshkeySshSshkeyPathCredentialArgs.builder()
 *                     .userName(&#34;user_name&#34;)
 *                     .keyPath(&#34;key_path&#34;)
 *                     .encryptedPassphrase(&#34;encrypted_passphrase&#34;)
 *                     .build())
 *                 .credentialType(&#34;KeyPath&#34;)
 *                 .build())
 *             .build());
 * 
 *         var sshPassword = new SecretSshkey(&#34;sshPassword&#34;, SecretSshkeyArgs.builder()        
 *             .identifier(&#34;identifier&#34;)
 *             .description(&#34;test&#34;)
 *             .tags(&#34;foo:bar&#34;)
 *             .port(22)
 *             .ssh(SecretSshkeySshArgs.builder()
 *                 .sshPasswordCredential(SecretSshkeySshSshPasswordCredentialArgs.builder()
 *                     .userName(&#34;user_name&#34;)
 *                     .password(String.format(&#34;account.%s&#34;, secret.id()))
 *                     .build())
 *                 .credentialType(&#34;Password&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Import account level secret sshkey
 * 
 * ```sh
 *  $ pulumi import harness:platform/secretSshkey:SecretSshkey example &lt;secret_sshkey_id&gt;
 * ```
 * 
 *  Import org level secret sshkey
 * 
 * ```sh
 *  $ pulumi import harness:platform/secretSshkey:SecretSshkey example &lt;ord_id&gt;/&lt;secret_sshkey_id&gt;
 * ```
 * 
 *  Import project level secret sshkey
 * 
 * ```sh
 *  $ pulumi import harness:platform/secretSshkey:SecretSshkey example &lt;org_id&gt;/&lt;project_id&gt;/&lt;secret_sshkey_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/secretSshkey:SecretSshkey")
public class SecretSshkey extends com.pulumi.resources.CustomResource {
    /**
     * Description of the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Unique identifier of the resource.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Kerberos authentication scheme
     * 
     */
    @Export(name="kerberos", refs={SecretSshkeyKerberos.class}, tree="[0]")
    private Output</* @Nullable */ SecretSshkeyKerberos> kerberos;

    /**
     * @return Kerberos authentication scheme
     * 
     */
    public Output<Optional<SecretSshkeyKerberos>> kerberos() {
        return Codegen.optional(this.kerberos);
    }
    /**
     * Name of the resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Unique identifier of the organization.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * SSH port
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> port;

    /**
     * @return SSH port
     * 
     */
    public Output<Optional<Integer>> port() {
        return Codegen.optional(this.port);
    }
    /**
     * Unique identifier of the project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Kerberos authentication scheme
     * 
     */
    @Export(name="ssh", refs={SecretSshkeySsh.class}, tree="[0]")
    private Output</* @Nullable */ SecretSshkeySsh> ssh;

    /**
     * @return Kerberos authentication scheme
     * 
     */
    public Output<Optional<SecretSshkeySsh>> ssh() {
        return Codegen.optional(this.ssh);
    }
    /**
     * Tags to associate with the resource.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SecretSshkey(String name) {
        this(name, SecretSshkeyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SecretSshkey(String name, SecretSshkeyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SecretSshkey(String name, SecretSshkeyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/secretSshkey:SecretSshkey", name, args == null ? SecretSshkeyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SecretSshkey(String name, Output<String> id, @Nullable SecretSshkeyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/secretSshkey:SecretSshkey", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SecretSshkey get(String name, Output<String> id, @Nullable SecretSshkeyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SecretSshkey(name, id, state, options);
    }
}
